/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/build/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/renderer.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../../build/oss-experimental/react-debug-tools/cjs/react-debug-tools.development.js":
/*!**************************************************************************************************************!*\
  !*** /home/pomber/p/dev/react/build/oss-experimental/react-debug-tools/cjs/react-debug-tools.development.js ***!
  \**************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/** @license React vundefined\n * react-debug-tools.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nif (true) {\n  (function () {\n    'use strict';\n\n    var _assign = __webpack_require__(/*! object-assign */ \"../../node_modules/object-assign/index.js\");\n\n    var ErrorStackParser = __webpack_require__(/*! error-stack-parser */ \"../../node_modules/error-stack-parser/error-stack-parser.js\");\n\n    var React = __webpack_require__(/*! react */ \"../../build/oss-experimental/react/index.js\");\n\n    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n    var FunctionComponent = 0;\n    var ContextProvider = 10;\n    var ForwardRef = 11;\n    var SimpleMemoComponent = 15;\n    var hookLog = []; // Primitives\n\n    var primitiveStackCache = null;\n\n    function getPrimitiveStackCache() {\n      // This initializes a cache of all primitive hooks so that the top\n      // most stack frames added by calling the primitive hook can be removed.\n      if (primitiveStackCache === null) {\n        var cache = new Map();\n        var readHookLog;\n\n        try {\n          // Use all hooks here to add them to the hook log.\n          Dispatcher.useContext({\n            _currentValue: null\n          });\n          Dispatcher.useState(null);\n          Dispatcher.useReducer(function (s, a) {\n            return s;\n          }, null);\n          Dispatcher.useRef(null);\n\n          if (typeof Dispatcher.useCacheRefresh === 'function') {\n            // This type check is for Flow only.\n            Dispatcher.useCacheRefresh();\n          }\n\n          Dispatcher.useLayoutEffect(function () {});\n          Dispatcher.useInsertionEffect(function () {});\n          Dispatcher.useEffect(function () {});\n          Dispatcher.useImperativeHandle(undefined, function () {\n            return null;\n          });\n          Dispatcher.useDebugValue(null);\n          Dispatcher.useCallback(function () {});\n          Dispatcher.useMemo(function () {\n            return null;\n          });\n        } finally {\n          readHookLog = hookLog;\n          hookLog = [];\n        }\n\n        for (var i = 0; i < readHookLog.length; i++) {\n          var hook = readHookLog[i];\n          cache.set(hook.primitive, ErrorStackParser.parse(hook.stackError));\n        }\n\n        primitiveStackCache = cache;\n      }\n\n      return primitiveStackCache;\n    }\n\n    var currentHook = null;\n\n    function nextHook() {\n      var hook = currentHook;\n\n      if (hook !== null) {\n        currentHook = hook.next;\n      }\n\n      return hook;\n    }\n\n    function getCacheForType(resourceType) {\n      throw new Error('Not implemented.');\n    }\n\n    function readContext(context) {\n      // For now we don't expose readContext usage in the hooks debugging info.\n      return context._currentValue;\n    }\n\n    function useContext(context) {\n      hookLog.push({\n        primitive: 'Context',\n        stackError: new Error(),\n        value: context._currentValue\n      });\n      return context._currentValue;\n    }\n\n    function useState(initialState) {\n      var hook = nextHook();\n      var state = hook !== null ? hook.memoizedState : typeof initialState === 'function' ? // $FlowFixMe: Flow doesn't like mixed types\n      initialState() : initialState;\n      hookLog.push({\n        primitive: 'State',\n        stackError: new Error(),\n        value: state\n      });\n      return [state, function (action) {}];\n    }\n\n    function useReducer(reducer, initialArg, init) {\n      var hook = nextHook();\n      var state;\n\n      if (hook !== null) {\n        state = hook.memoizedState;\n      } else {\n        state = init !== undefined ? init(initialArg) : initialArg;\n      }\n\n      hookLog.push({\n        primitive: 'Reducer',\n        stackError: new Error(),\n        value: state\n      });\n      return [state, function (action) {}];\n    }\n\n    function useRef(initialValue) {\n      var hook = nextHook();\n      var ref = hook !== null ? hook.memoizedState : {\n        current: initialValue\n      };\n      hookLog.push({\n        primitive: 'Ref',\n        stackError: new Error(),\n        value: ref.current\n      });\n      return ref;\n    }\n\n    function useCacheRefresh() {\n      var hook = nextHook();\n      hookLog.push({\n        primitive: 'CacheRefresh',\n        stackError: new Error(),\n        value: hook !== null ? hook.memoizedState : function refresh() {}\n      });\n      return function () {};\n    }\n\n    function useLayoutEffect(create, inputs) {\n      nextHook();\n      hookLog.push({\n        primitive: 'LayoutEffect',\n        stackError: new Error(),\n        value: create\n      });\n    }\n\n    function useInsertionEffect(create, inputs) {\n      nextHook();\n      hookLog.push({\n        primitive: 'InsertionEffect',\n        stackError: new Error(),\n        value: create\n      });\n    }\n\n    function useEffect(create, inputs) {\n      nextHook();\n      hookLog.push({\n        primitive: 'Effect',\n        stackError: new Error(),\n        value: create\n      });\n    }\n\n    function useImperativeHandle(ref, create, inputs) {\n      nextHook(); // We don't actually store the instance anywhere if there is no ref callback\n      // and if there is a ref callback it might not store it but if it does we\n      // have no way of knowing where. So let's only enable introspection of the\n      // ref itself if it is using the object form.\n\n      var instance = undefined;\n\n      if (ref !== null && typeof ref === 'object') {\n        instance = ref.current;\n      }\n\n      hookLog.push({\n        primitive: 'ImperativeHandle',\n        stackError: new Error(),\n        value: instance\n      });\n    }\n\n    function useDebugValue(value, formatterFn) {\n      hookLog.push({\n        primitive: 'DebugValue',\n        stackError: new Error(),\n        value: typeof formatterFn === 'function' ? formatterFn(value) : value\n      });\n    }\n\n    function useCallback(callback, inputs) {\n      var hook = nextHook();\n      hookLog.push({\n        primitive: 'Callback',\n        stackError: new Error(),\n        value: hook !== null ? hook.memoizedState[0] : callback\n      });\n      return callback;\n    }\n\n    function useMemo(nextCreate, inputs) {\n      var hook = nextHook();\n      var value = hook !== null ? hook.memoizedState[0] : nextCreate();\n      hookLog.push({\n        primitive: 'Memo',\n        stackError: new Error(),\n        value: value\n      });\n      return value;\n    }\n\n    function useMutableSource(source, getSnapshot, subscribe) {\n      // useMutableSource() composes multiple hooks internally.\n      // Advance the current hook index the same number of times\n      // so that subsequent hooks have the right memoized state.\n      nextHook(); // MutableSource\n\n      nextHook(); // State\n\n      nextHook(); // Effect\n\n      nextHook(); // Effect\n\n      var value = getSnapshot(source._source);\n      hookLog.push({\n        primitive: 'MutableSource',\n        stackError: new Error(),\n        value: value\n      });\n      return value;\n    }\n\n    function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n      // useSyncExternalStore() composes multiple hooks internally.\n      // Advance the current hook index the same number of times\n      // so that subsequent hooks have the right memoized state.\n      nextHook(); // SyncExternalStore\n\n      nextHook(); // Effect\n\n      var value = getSnapshot();\n      hookLog.push({\n        primitive: 'SyncExternalStore',\n        stackError: new Error(),\n        value: value\n      });\n      return value;\n    }\n\n    function useTransition() {\n      // useTransition() composes multiple hooks internally.\n      // Advance the current hook index the same number of times\n      // so that subsequent hooks have the right memoized state.\n      nextHook(); // State\n\n      nextHook(); // Callback\n\n      hookLog.push({\n        primitive: 'Transition',\n        stackError: new Error(),\n        value: undefined\n      });\n      return [false, function (callback) {}];\n    }\n\n    function useDeferredValue(value) {\n      // useDeferredValue() composes multiple hooks internally.\n      // Advance the current hook index the same number of times\n      // so that subsequent hooks have the right memoized state.\n      nextHook(); // State\n\n      nextHook(); // Effect\n\n      hookLog.push({\n        primitive: 'DeferredValue',\n        stackError: new Error(),\n        value: value\n      });\n      return value;\n    }\n\n    function useId() {\n      var hook = nextHook();\n      var id = hook !== null ? hook.memoizedState : '';\n      hookLog.push({\n        primitive: 'Id',\n        stackError: new Error(),\n        value: id\n      });\n      return id;\n    }\n\n    var Dispatcher = {\n      getCacheForType: getCacheForType,\n      readContext: readContext,\n      useCacheRefresh: useCacheRefresh,\n      useCallback: useCallback,\n      useContext: useContext,\n      useEffect: useEffect,\n      useImperativeHandle: useImperativeHandle,\n      useDebugValue: useDebugValue,\n      useLayoutEffect: useLayoutEffect,\n      useInsertionEffect: useInsertionEffect,\n      useMemo: useMemo,\n      useReducer: useReducer,\n      useRef: useRef,\n      useState: useState,\n      useTransition: useTransition,\n      useMutableSource: useMutableSource,\n      useSyncExternalStore: useSyncExternalStore,\n      useDeferredValue: useDeferredValue,\n      useId: useId\n    }; // Inspect\n    // Don't assume\n    //\n    // We can't assume that stack frames are nth steps away from anything.\n    // E.g. we can't assume that the root call shares all frames with the stack\n    // of a hook call. A simple way to demonstrate this is wrapping `new Error()`\n    // in a wrapper constructor like a polyfill. That'll add an extra frame.\n    // Similar things can happen with the call to the dispatcher. The top frame\n    // may not be the primitive. Likewise the primitive can have fewer stack frames\n    // such as when a call to useState got inlined to use dispatcher.useState.\n    //\n    // We also can't assume that the last frame of the root call is the same\n    // frame as the last frame of the hook call because long stack traces can be\n    // truncated to a stack trace limit.\n\n    var mostLikelyAncestorIndex = 0;\n\n    function findSharedIndex(hookStack, rootStack, rootIndex) {\n      var source = rootStack[rootIndex].source;\n\n      hookSearch: for (var i = 0; i < hookStack.length; i++) {\n        if (hookStack[i].source === source) {\n          // This looks like a match. Validate that the rest of both stack match up.\n          for (var a = rootIndex + 1, b = i + 1; a < rootStack.length && b < hookStack.length; a++, b++) {\n            if (hookStack[b].source !== rootStack[a].source) {\n              // If not, give up and try a different match.\n              continue hookSearch;\n            }\n          }\n\n          return i;\n        }\n      }\n\n      return -1;\n    }\n\n    function findCommonAncestorIndex(rootStack, hookStack) {\n      var rootIndex = findSharedIndex(hookStack, rootStack, mostLikelyAncestorIndex);\n\n      if (rootIndex !== -1) {\n        return rootIndex;\n      } // If the most likely one wasn't a hit, try any other frame to see if it is shared.\n      // If that takes more than 5 frames, something probably went wrong.\n\n\n      for (var i = 0; i < rootStack.length && i < 5; i++) {\n        rootIndex = findSharedIndex(hookStack, rootStack, i);\n\n        if (rootIndex !== -1) {\n          mostLikelyAncestorIndex = i;\n          return rootIndex;\n        }\n      }\n\n      return -1;\n    }\n\n    function isReactWrapper(functionName, primitiveName) {\n      if (!functionName) {\n        return false;\n      }\n\n      var expectedPrimitiveName = 'use' + primitiveName;\n\n      if (functionName.length < expectedPrimitiveName.length) {\n        return false;\n      }\n\n      return functionName.lastIndexOf(expectedPrimitiveName) === functionName.length - expectedPrimitiveName.length;\n    }\n\n    function findPrimitiveIndex(hookStack, hook) {\n      var stackCache = getPrimitiveStackCache();\n      var primitiveStack = stackCache.get(hook.primitive);\n\n      if (primitiveStack === undefined) {\n        return -1;\n      }\n\n      for (var i = 0; i < primitiveStack.length && i < hookStack.length; i++) {\n        if (primitiveStack[i].source !== hookStack[i].source) {\n          // If the next two frames are functions called `useX` then we assume that they're part of the\n          // wrappers that the React packager or other packages adds around the dispatcher.\n          if (i < hookStack.length - 1 && isReactWrapper(hookStack[i].functionName, hook.primitive)) {\n            i++;\n          }\n\n          if (i < hookStack.length - 1 && isReactWrapper(hookStack[i].functionName, hook.primitive)) {\n            i++;\n          }\n\n          return i;\n        }\n      }\n\n      return -1;\n    }\n\n    function parseTrimmedStack(rootStack, hook) {\n      // Get the stack trace between the primitive hook function and\n      // the root function call. I.e. the stack frames of custom hooks.\n      var hookStack = ErrorStackParser.parse(hook.stackError);\n      var rootIndex = findCommonAncestorIndex(rootStack, hookStack);\n      var primitiveIndex = findPrimitiveIndex(hookStack, hook);\n\n      if (rootIndex === -1 || primitiveIndex === -1 || rootIndex - primitiveIndex < 2) {\n        // Something went wrong. Give up.\n        return null;\n      }\n\n      return hookStack.slice(primitiveIndex, rootIndex - 1);\n    }\n\n    function parseCustomHookName(functionName) {\n      if (!functionName) {\n        return '';\n      }\n\n      var startIndex = functionName.lastIndexOf('.');\n\n      if (startIndex === -1) {\n        startIndex = 0;\n      }\n\n      if (functionName.substr(startIndex, 3) === 'use') {\n        startIndex += 3;\n      }\n\n      return functionName.substr(startIndex);\n    }\n\n    function buildTree(rootStack, readHookLog, includeHooksSource) {\n      var rootChildren = [];\n      var prevStack = null;\n      var levelChildren = rootChildren;\n      var nativeHookID = 0;\n      var stackOfChildren = [];\n\n      for (var i = 0; i < readHookLog.length; i++) {\n        var hook = readHookLog[i];\n        var stack = parseTrimmedStack(rootStack, hook);\n\n        if (stack !== null) {\n          // Note: The indices 0 <= n < length-1 will contain the names.\n          // The indices 1 <= n < length will contain the source locations.\n          // That's why we get the name from n - 1 and don't check the source\n          // of index 0.\n          var commonSteps = 0;\n\n          if (prevStack !== null) {\n            // Compare the current level's stack to the new stack.\n            while (commonSteps < stack.length && commonSteps < prevStack.length) {\n              var stackSource = stack[stack.length - commonSteps - 1].source;\n              var prevSource = prevStack[prevStack.length - commonSteps - 1].source;\n\n              if (stackSource !== prevSource) {\n                break;\n              }\n\n              commonSteps++;\n            } // Pop back the stack as many steps as were not common.\n\n\n            for (var j = prevStack.length - 1; j > commonSteps; j--) {\n              levelChildren = stackOfChildren.pop();\n            }\n          } // The remaining part of the new stack are custom hooks. Push them\n          // to the tree.\n\n\n          for (var _j = stack.length - commonSteps - 1; _j >= 1; _j--) {\n            var children = [];\n            var stackFrame = stack[_j];\n            var _levelChild = {\n              id: null,\n              isStateEditable: false,\n              name: parseCustomHookName(stack[_j - 1].functionName),\n              value: undefined,\n              subHooks: children\n            };\n\n            if (includeHooksSource) {\n              _levelChild.hookSource = {\n                lineNumber: stackFrame.lineNumber,\n                columnNumber: stackFrame.columnNumber,\n                functionName: stackFrame.functionName,\n                fileName: stackFrame.fileName\n              };\n            }\n\n            levelChildren.push(_levelChild);\n            stackOfChildren.push(levelChildren);\n            levelChildren = children;\n          }\n\n          prevStack = stack;\n        }\n\n        var primitive = hook.primitive; // For now, the \"id\" of stateful hooks is just the stateful hook index.\n        // Custom hooks have no ids, nor do non-stateful native hooks (e.g. Context, DebugValue).\n\n        var id = primitive === 'Context' || primitive === 'DebugValue' ? null : nativeHookID++; // For the time being, only State and Reducer hooks support runtime overrides.\n\n        var isStateEditable = primitive === 'Reducer' || primitive === 'State';\n        var levelChild = {\n          id: id,\n          isStateEditable: isStateEditable,\n          name: primitive,\n          value: hook.value,\n          subHooks: []\n        };\n\n        if (includeHooksSource) {\n          var hookSource = {\n            lineNumber: null,\n            functionName: null,\n            fileName: null,\n            columnNumber: null\n          };\n\n          if (stack && stack.length >= 1) {\n            var _stackFrame = stack[0];\n            hookSource.lineNumber = _stackFrame.lineNumber;\n            hookSource.functionName = _stackFrame.functionName;\n            hookSource.fileName = _stackFrame.fileName;\n            hookSource.columnNumber = _stackFrame.columnNumber;\n          }\n\n          levelChild.hookSource = hookSource;\n        }\n\n        levelChildren.push(levelChild);\n      } // Associate custom hook values (useDebugValue() hook entries) with the correct hooks.\n\n\n      processDebugValues(rootChildren, null);\n      return rootChildren;\n    } // Custom hooks support user-configurable labels (via the special useDebugValue() hook).\n    // That hook adds user-provided values to the hooks tree,\n    // but these values aren't intended to appear alongside of the other hooks.\n    // Instead they should be attributed to their parent custom hook.\n    // This method walks the tree and assigns debug values to their custom hook owners.\n\n\n    function processDebugValues(hooksTree, parentHooksNode) {\n      var debugValueHooksNodes = [];\n\n      for (var i = 0; i < hooksTree.length; i++) {\n        var hooksNode = hooksTree[i];\n\n        if (hooksNode.name === 'DebugValue' && hooksNode.subHooks.length === 0) {\n          hooksTree.splice(i, 1);\n          i--;\n          debugValueHooksNodes.push(hooksNode);\n        } else {\n          processDebugValues(hooksNode.subHooks, hooksNode);\n        }\n      } // Bubble debug value labels to their custom hook owner.\n      // If there is no parent hook, just ignore them for now.\n      // (We may warn about this in the future.)\n\n\n      if (parentHooksNode !== null) {\n        if (debugValueHooksNodes.length === 1) {\n          parentHooksNode.value = debugValueHooksNodes[0].value;\n        } else if (debugValueHooksNodes.length > 1) {\n          parentHooksNode.value = debugValueHooksNodes.map(function (_ref) {\n            var value = _ref.value;\n            return value;\n          });\n        }\n      }\n    }\n\n    function inspectHooks(renderFunction, props, currentDispatcher) {\n      var includeHooksSource = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false; // DevTools will pass the current renderer's injected dispatcher.\n      // Other apps might compile debug hooks as part of their app though.\n\n      if (currentDispatcher == null) {\n        currentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n      }\n\n      var previousDispatcher = currentDispatcher.current;\n      var readHookLog;\n      currentDispatcher.current = Dispatcher;\n      var ancestorStackError;\n\n      try {\n        ancestorStackError = new Error();\n        renderFunction(props);\n      } finally {\n        readHookLog = hookLog;\n        hookLog = [];\n        currentDispatcher.current = previousDispatcher;\n      }\n\n      var rootStack = ErrorStackParser.parse(ancestorStackError);\n      return buildTree(rootStack, readHookLog, includeHooksSource);\n    }\n\n    function setupContexts(contextMap, fiber) {\n      var current = fiber;\n\n      while (current) {\n        if (current.tag === ContextProvider) {\n          var providerType = current.type;\n          var context = providerType._context;\n\n          if (!contextMap.has(context)) {\n            // Store the current value that we're going to restore later.\n            contextMap.set(context, context._currentValue); // Set the inner most provider value on the context.\n\n            context._currentValue = current.memoizedProps.value;\n          }\n        }\n\n        current = current.return;\n      }\n    }\n\n    function restoreContexts(contextMap) {\n      contextMap.forEach(function (value, context) {\n        return context._currentValue = value;\n      });\n    }\n\n    function inspectHooksOfForwardRef(renderFunction, props, ref, currentDispatcher, includeHooksSource) {\n      var previousDispatcher = currentDispatcher.current;\n      var readHookLog;\n      currentDispatcher.current = Dispatcher;\n      var ancestorStackError;\n\n      try {\n        ancestorStackError = new Error();\n        renderFunction(props, ref);\n      } finally {\n        readHookLog = hookLog;\n        hookLog = [];\n        currentDispatcher.current = previousDispatcher;\n      }\n\n      var rootStack = ErrorStackParser.parse(ancestorStackError);\n      return buildTree(rootStack, readHookLog, includeHooksSource);\n    }\n\n    function resolveDefaultProps(Component, baseProps) {\n      if (Component && Component.defaultProps) {\n        // Resolve default props. Taken from ReactElement\n        var props = _assign({}, baseProps);\n\n        var defaultProps = Component.defaultProps;\n\n        for (var propName in defaultProps) {\n          if (props[propName] === undefined) {\n            props[propName] = defaultProps[propName];\n          }\n        }\n\n        return props;\n      }\n\n      return baseProps;\n    }\n\n    function inspectHooksOfFiber(fiber, currentDispatcher) {\n      var includeHooksSource = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false; // DevTools will pass the current renderer's injected dispatcher.\n      // Other apps might compile debug hooks as part of their app though.\n\n      if (currentDispatcher == null) {\n        currentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n      }\n\n      if (fiber.tag !== FunctionComponent && fiber.tag !== SimpleMemoComponent && fiber.tag !== ForwardRef) {\n        throw new Error('Unknown Fiber. Needs to be a function component to inspect hooks.');\n      } // Warm up the cache so that it doesn't consume the currentHook.\n\n\n      getPrimitiveStackCache();\n      var type = fiber.type;\n      var props = fiber.memoizedProps;\n\n      if (type !== fiber.elementType) {\n        props = resolveDefaultProps(type, props);\n      } // Set up the current hook so that we can step through and read the\n      // current state from them.\n\n\n      currentHook = fiber.memoizedState;\n      var contextMap = new Map();\n\n      try {\n        setupContexts(contextMap, fiber);\n\n        if (fiber.tag === ForwardRef) {\n          return inspectHooksOfForwardRef(type.render, props, fiber.ref, currentDispatcher, includeHooksSource);\n        }\n\n        return inspectHooks(type, props, currentDispatcher, includeHooksSource);\n      } finally {\n        currentHook = null;\n        restoreContexts(contextMap);\n      }\n    }\n\n    exports.inspectHooks = inspectHooks;\n    exports.inspectHooksOfFiber = inspectHooksOfFiber;\n  })();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../build/oss-experimental/react-debug-tools/cjs/react-debug-tools.development.js\n");

/***/ }),

/***/ "../../build/oss-experimental/react-debug-tools/index.js":
/*!**********************************************************************************!*\
  !*** /home/pomber/p/dev/react/build/oss-experimental/react-debug-tools/index.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-debug-tools.development.js */ \"../../build/oss-experimental/react-debug-tools/cjs/react-debug-tools.development.js\");\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vYnVpbGQvb3NzLWV4cGVyaW1lbnRhbC9yZWFjdC1kZWJ1Zy10b29scy9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8vaG9tZS9wb21iZXIvcC9kZXYvcmVhY3QvYnVpbGQvb3NzLWV4cGVyaW1lbnRhbC9yZWFjdC1kZWJ1Zy10b29scy9pbmRleC5qcz9mZGUxIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kZWJ1Zy10b29scy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kZWJ1Zy10b29scy5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0EsYUFFQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../build/oss-experimental/react-debug-tools/index.js\n");

/***/ }),

/***/ "../../build/oss-experimental/react-is/cjs/react-is.development.js":
/*!********************************************************************************************!*\
  !*** /home/pomber/p/dev/react/build/oss-experimental/react-is/cjs/react-is.development.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/** @license React vundefined\n * react-is.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nif (true) {\n  (function () {\n    'use strict'; // ATTENTION\n    // When adding new symbols to this file,\n    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n    // nor polyfill, then a plain number is used for performance.\n\n    var REACT_ELEMENT_TYPE = 0xeac7;\n    var REACT_PORTAL_TYPE = 0xeaca;\n    var REACT_FRAGMENT_TYPE = 0xeacb;\n    var REACT_STRICT_MODE_TYPE = 0xeacc;\n    var REACT_PROFILER_TYPE = 0xead2;\n    var REACT_PROVIDER_TYPE = 0xeacd;\n    var REACT_CONTEXT_TYPE = 0xeace;\n    var REACT_FORWARD_REF_TYPE = 0xead0;\n    var REACT_SUSPENSE_TYPE = 0xead1;\n    var REACT_SUSPENSE_LIST_TYPE = 0xead8;\n    var REACT_MEMO_TYPE = 0xead3;\n    var REACT_LAZY_TYPE = 0xead4;\n    var REACT_SCOPE_TYPE = 0xead7;\n    var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;\n    var REACT_OFFSCREEN_TYPE = 0xeae2;\n    var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;\n    var REACT_CACHE_TYPE = 0xeae4;\n\n    if (typeof Symbol === 'function' && Symbol.for) {\n      var symbolFor = Symbol.for;\n      REACT_ELEMENT_TYPE = symbolFor('react.element');\n      REACT_PORTAL_TYPE = symbolFor('react.portal');\n      REACT_FRAGMENT_TYPE = symbolFor('react.fragment');\n      REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');\n      REACT_PROFILER_TYPE = symbolFor('react.profiler');\n      REACT_PROVIDER_TYPE = symbolFor('react.provider');\n      REACT_CONTEXT_TYPE = symbolFor('react.context');\n      REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');\n      REACT_SUSPENSE_TYPE = symbolFor('react.suspense');\n      REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');\n      REACT_MEMO_TYPE = symbolFor('react.memo');\n      REACT_LAZY_TYPE = symbolFor('react.lazy');\n      REACT_SCOPE_TYPE = symbolFor('react.scope');\n      REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');\n      REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');\n      REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');\n      REACT_CACHE_TYPE = symbolFor('react.cache');\n    } // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.\n\n\n    var enableScopeAPI = false; // Experimental Create Event Handle API.\n\n    var REACT_MODULE_REFERENCE = 0;\n\n    if (typeof Symbol === 'function') {\n      REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');\n    }\n\n    function isValidElementType(type) {\n      if (typeof type === 'string' || typeof type === 'function') {\n        return true;\n      } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n      if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || type === REACT_CACHE_TYPE) {\n        return true;\n      }\n\n      if (typeof type === 'object' && type !== null) {\n        if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n        // types supported by any Flight configuration anywhere since\n        // we don't know which Flight build this will end up being used\n        // with.\n        type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    function typeOf(object) {\n      if (typeof object === 'object' && object !== null) {\n        var $$typeof = object.$$typeof;\n\n        switch ($$typeof) {\n          case REACT_ELEMENT_TYPE:\n            var type = object.type;\n\n            switch (type) {\n              case REACT_FRAGMENT_TYPE:\n              case REACT_PROFILER_TYPE:\n              case REACT_STRICT_MODE_TYPE:\n              case REACT_SUSPENSE_TYPE:\n              case REACT_SUSPENSE_LIST_TYPE:\n                return type;\n\n              default:\n                var $$typeofType = type && type.$$typeof;\n\n                switch ($$typeofType) {\n                  case REACT_CONTEXT_TYPE:\n                  case REACT_FORWARD_REF_TYPE:\n                  case REACT_LAZY_TYPE:\n                  case REACT_MEMO_TYPE:\n                  case REACT_PROVIDER_TYPE:\n                    return $$typeofType;\n\n                  default:\n                    return $$typeof;\n                }\n\n            }\n\n          case REACT_PORTAL_TYPE:\n            return $$typeof;\n        }\n      }\n\n      return undefined;\n    }\n\n    var ContextConsumer = REACT_CONTEXT_TYPE;\n    var ContextProvider = REACT_PROVIDER_TYPE;\n    var Element = REACT_ELEMENT_TYPE;\n    var ForwardRef = REACT_FORWARD_REF_TYPE;\n    var Fragment = REACT_FRAGMENT_TYPE;\n    var Lazy = REACT_LAZY_TYPE;\n    var Memo = REACT_MEMO_TYPE;\n    var Portal = REACT_PORTAL_TYPE;\n    var Profiler = REACT_PROFILER_TYPE;\n    var StrictMode = REACT_STRICT_MODE_TYPE;\n    var Suspense = REACT_SUSPENSE_TYPE;\n    var SuspenseList = REACT_SUSPENSE_LIST_TYPE;\n    var hasWarnedAboutDeprecatedIsAsyncMode = false;\n    var hasWarnedAboutDeprecatedIsConcurrentMode = false; // AsyncMode should be deprecated\n\n    function isAsyncMode(object) {\n      {\n        if (!hasWarnedAboutDeprecatedIsAsyncMode) {\n          hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint\n\n          console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 18+.');\n        }\n      }\n      return false;\n    }\n\n    function isConcurrentMode(object) {\n      {\n        if (!hasWarnedAboutDeprecatedIsConcurrentMode) {\n          hasWarnedAboutDeprecatedIsConcurrentMode = true; // Using console['warn'] to evade Babel and ESLint\n\n          console['warn']('The ReactIs.isConcurrentMode() alias has been deprecated, ' + 'and will be removed in React 18+.');\n        }\n      }\n      return false;\n    }\n\n    function isContextConsumer(object) {\n      return typeOf(object) === REACT_CONTEXT_TYPE;\n    }\n\n    function isContextProvider(object) {\n      return typeOf(object) === REACT_PROVIDER_TYPE;\n    }\n\n    function isElement(object) {\n      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n    }\n\n    function isForwardRef(object) {\n      return typeOf(object) === REACT_FORWARD_REF_TYPE;\n    }\n\n    function isFragment(object) {\n      return typeOf(object) === REACT_FRAGMENT_TYPE;\n    }\n\n    function isLazy(object) {\n      return typeOf(object) === REACT_LAZY_TYPE;\n    }\n\n    function isMemo(object) {\n      return typeOf(object) === REACT_MEMO_TYPE;\n    }\n\n    function isPortal(object) {\n      return typeOf(object) === REACT_PORTAL_TYPE;\n    }\n\n    function isProfiler(object) {\n      return typeOf(object) === REACT_PROFILER_TYPE;\n    }\n\n    function isStrictMode(object) {\n      return typeOf(object) === REACT_STRICT_MODE_TYPE;\n    }\n\n    function isSuspense(object) {\n      return typeOf(object) === REACT_SUSPENSE_TYPE;\n    }\n\n    function isSuspenseList(object) {\n      return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;\n    }\n\n    exports.ContextConsumer = ContextConsumer;\n    exports.ContextProvider = ContextProvider;\n    exports.Element = Element;\n    exports.ForwardRef = ForwardRef;\n    exports.Fragment = Fragment;\n    exports.Lazy = Lazy;\n    exports.Memo = Memo;\n    exports.Portal = Portal;\n    exports.Profiler = Profiler;\n    exports.StrictMode = StrictMode;\n    exports.Suspense = Suspense;\n    exports.SuspenseList = SuspenseList;\n    exports.isAsyncMode = isAsyncMode;\n    exports.isConcurrentMode = isConcurrentMode;\n    exports.isContextConsumer = isContextConsumer;\n    exports.isContextProvider = isContextProvider;\n    exports.isElement = isElement;\n    exports.isForwardRef = isForwardRef;\n    exports.isFragment = isFragment;\n    exports.isLazy = isLazy;\n    exports.isMemo = isMemo;\n    exports.isPortal = isPortal;\n    exports.isProfiler = isProfiler;\n    exports.isStrictMode = isStrictMode;\n    exports.isSuspense = isSuspense;\n    exports.isSuspenseList = isSuspenseList;\n    exports.isValidElementType = isValidElementType;\n    exports.typeOf = typeOf;\n  })();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../build/oss-experimental/react-is/cjs/react-is.development.js\n");

/***/ }),

/***/ "../../build/oss-experimental/react-is/index.js":
/*!*************************************************************************!*\
  !*** /home/pomber/p/dev/react/build/oss-experimental/react-is/index.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-is.development.js */ \"../../build/oss-experimental/react-is/cjs/react-is.development.js\");\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vYnVpbGQvb3NzLWV4cGVyaW1lbnRhbC9yZWFjdC1pcy9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8vaG9tZS9wb21iZXIvcC9kZXYvcmVhY3QvYnVpbGQvb3NzLWV4cGVyaW1lbnRhbC9yZWFjdC1pcy9pbmRleC5qcz84N2UzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0EsYUFFQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../build/oss-experimental/react-is/index.js\n");

/***/ }),

/***/ "../../build/oss-experimental/react/cjs/react.development.js":
/*!**************************************************************************************!*\
  !*** /home/pomber/p/dev/react/build/oss-experimental/react/cjs/react.development.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {/** @license React vundefined\n * react.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nif (true) {\n  (function () {\n    'use strict';\n    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n\n    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === 'function') {\n      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());\n    }\n\n    var _assign = __webpack_require__(/*! object-assign */ \"../../node_modules/object-assign/index.js\"); // TODO: this is special because it gets imported during build.\n    //\n    // TODO: 17.0.3 has not been released to NPM;\n    // It exists as a placeholder so that DevTools can support work tag changes between releases.\n    // When we next publish a release (either 17.0.3 or 17.1.0), update the matching TODO in backend/renderer.js\n    // TODO: This module is used both by the release scripts and to expose a version\n    // at runtime. We should instead inject the version number as part of the build\n    // process, and use the ReactVersions.js module as the single source of truth.\n\n\n    var ReactVersion = '17.0.3'; // ATTENTION\n    // When adding new symbols to this file,\n    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n    // nor polyfill, then a plain number is used for performance.\n\n    var REACT_ELEMENT_TYPE = 0xeac7;\n    var REACT_PORTAL_TYPE = 0xeaca;\n    exports.Fragment = 0xeacb;\n    exports.StrictMode = 0xeacc;\n    exports.Profiler = 0xead2;\n    var REACT_PROVIDER_TYPE = 0xeacd;\n    var REACT_CONTEXT_TYPE = 0xeace;\n    var REACT_FORWARD_REF_TYPE = 0xead0;\n    exports.Suspense = 0xead1;\n    exports.SuspenseList = 0xead8;\n    var REACT_MEMO_TYPE = 0xead3;\n    var REACT_LAZY_TYPE = 0xead4;\n    var REACT_SCOPE_TYPE = 0xead7;\n    exports.unstable_DebugTracingMode = 0xeae1;\n    exports.unstable_Offscreen = 0xeae2;\n    exports.unstable_LegacyHidden = 0xeae3;\n    exports.unstable_Cache = 0xeae4;\n\n    if (typeof Symbol === 'function' && Symbol.for) {\n      var symbolFor = Symbol.for;\n      REACT_ELEMENT_TYPE = symbolFor('react.element');\n      REACT_PORTAL_TYPE = symbolFor('react.portal');\n      exports.Fragment = symbolFor('react.fragment');\n      exports.StrictMode = symbolFor('react.strict_mode');\n      exports.Profiler = symbolFor('react.profiler');\n      REACT_PROVIDER_TYPE = symbolFor('react.provider');\n      REACT_CONTEXT_TYPE = symbolFor('react.context');\n      REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');\n      exports.Suspense = symbolFor('react.suspense');\n      exports.SuspenseList = symbolFor('react.suspense_list');\n      REACT_MEMO_TYPE = symbolFor('react.memo');\n      REACT_LAZY_TYPE = symbolFor('react.lazy');\n      REACT_SCOPE_TYPE = symbolFor('react.scope');\n      exports.unstable_DebugTracingMode = symbolFor('react.debug_trace_mode');\n      exports.unstable_Offscreen = symbolFor('react.offscreen');\n      exports.unstable_LegacyHidden = symbolFor('react.legacy_hidden');\n      exports.unstable_Cache = symbolFor('react.cache');\n    }\n\n    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n    var FAUX_ITERATOR_SYMBOL = '@@iterator';\n\n    function getIteratorFn(maybeIterable) {\n      if (maybeIterable === null || typeof maybeIterable !== 'object') {\n        return null;\n      }\n\n      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n      if (typeof maybeIterator === 'function') {\n        return maybeIterator;\n      }\n\n      return null;\n    }\n    /**\n     * Keeps track of the current dispatcher.\n     */\n\n\n    var ReactCurrentDispatcher = {\n      /**\n       * @internal\n       * @type {ReactComponent}\n       */\n      current: null\n    };\n    /**\n     * Keeps track of the current batch's configuration such as how long an update\n     * should suspend for if it needs to.\n     */\n\n    var ReactCurrentBatchConfig = {\n      transition: 0\n    };\n    {\n      ReactCurrentBatchConfig._updatedFibers = new Set();\n    }\n    var ReactCurrentActQueue = {\n      current: null,\n      // Used to reproduce behavior of `batchedUpdates` in legacy mode.\n      isBatchingLegacy: false,\n      didScheduleLegacyUpdate: false\n    };\n    /**\n     * Keeps track of the current owner.\n     *\n     * The current owner is the component who should own any components that are\n     * currently being constructed.\n     */\n\n    var ReactCurrentOwner = {\n      /**\n       * @internal\n       * @type {ReactComponent}\n       */\n      current: null\n    };\n    var ReactDebugCurrentFrame = {};\n    var currentExtraStackFrame = null;\n\n    function setExtraStackFrame(stack) {\n      {\n        currentExtraStackFrame = stack;\n      }\n    }\n\n    {\n      ReactDebugCurrentFrame.setExtraStackFrame = function (stack) {\n        {\n          currentExtraStackFrame = stack;\n        }\n      }; // Stack implementation injected by the current renderer.\n\n\n      ReactDebugCurrentFrame.getCurrentStack = null;\n\n      ReactDebugCurrentFrame.getStackAddendum = function () {\n        var stack = ''; // Add an extra top frame while an element is being validated\n\n        if (currentExtraStackFrame) {\n          stack += currentExtraStackFrame;\n        } // Delegate to the injected renderer-specific implementation\n\n\n        var impl = ReactDebugCurrentFrame.getCurrentStack;\n\n        if (impl) {\n          stack += impl() || '';\n        }\n\n        return stack;\n      };\n    }\n    var ReactSharedInternals = {\n      ReactCurrentDispatcher: ReactCurrentDispatcher,\n      ReactCurrentBatchConfig: ReactCurrentBatchConfig,\n      ReactCurrentOwner: ReactCurrentOwner,\n      // Used by renderers to avoid bundling object-assign twice in UMD bundles:\n      assign: _assign\n    };\n    {\n      ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;\n      ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;\n    } // by calls to these methods by a Babel plugin.\n    //\n    // In PROD (or in packages without access to React internals),\n    // they are left as they are instead.\n\n    function warn(format) {\n      {\n        {\n          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            args[_key - 1] = arguments[_key];\n          }\n\n          printWarning('warn', format, args);\n        }\n      }\n    }\n\n    function error(format) {\n      {\n        {\n          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n            args[_key2 - 1] = arguments[_key2];\n          }\n\n          printWarning('error', format, args);\n        }\n      }\n    }\n\n    function printWarning(level, format, args) {\n      // When changing this logic, you might want to also\n      // update consoleWithStackDev.www.js as well.\n      {\n        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n        var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n        if (stack !== '') {\n          format += '%s';\n          args = args.concat([stack]);\n        } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n        var argsWithFormat = args.map(function (item) {\n          return String(item);\n        }); // Careful: RN currently depends on this prefix\n\n        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n        // breaks IE9: https://github.com/facebook/react/issues/13610\n        // eslint-disable-next-line react-internal/no-production-logging\n\n        Function.prototype.apply.call(console[level], console, argsWithFormat);\n      }\n    }\n\n    var didWarnStateUpdateForUnmountedComponent = {};\n\n    function warnNoop(publicInstance, callerName) {\n      {\n        var _constructor = publicInstance.constructor;\n        var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';\n        var warningKey = componentName + \".\" + callerName;\n\n        if (didWarnStateUpdateForUnmountedComponent[warningKey]) {\n          return;\n        }\n\n        error(\"Can't call %s on a component that is not yet mounted. \" + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);\n        didWarnStateUpdateForUnmountedComponent[warningKey] = true;\n      }\n    }\n    /**\n     * This is the abstract API for an update queue.\n     */\n\n\n    var ReactNoopUpdateQueue = {\n      /**\n       * Checks whether or not this composite component is mounted.\n       * @param {ReactClass} publicInstance The instance we want to test.\n       * @return {boolean} True if mounted, false otherwise.\n       * @protected\n       * @final\n       */\n      isMounted: function (publicInstance) {\n        return false;\n      },\n\n      /**\n       * Forces an update. This should only be invoked when it is known with\n       * certainty that we are **not** in a DOM transaction.\n       *\n       * You may want to call this when you know that some deeper aspect of the\n       * component's state has changed but `setState` was not called.\n       *\n       * This will not invoke `shouldComponentUpdate`, but it will invoke\n       * `componentWillUpdate` and `componentDidUpdate`.\n       *\n       * @param {ReactClass} publicInstance The instance that should rerender.\n       * @param {?function} callback Called after component is updated.\n       * @param {?string} callerName name of the calling function in the public API.\n       * @internal\n       */\n      enqueueForceUpdate: function (publicInstance, callback, callerName) {\n        warnNoop(publicInstance, 'forceUpdate');\n      },\n\n      /**\n       * Replaces all of the state. Always use this or `setState` to mutate state.\n       * You should treat `this.state` as immutable.\n       *\n       * There is no guarantee that `this.state` will be immediately updated, so\n       * accessing `this.state` after calling this method may return the old value.\n       *\n       * @param {ReactClass} publicInstance The instance that should rerender.\n       * @param {object} completeState Next state.\n       * @param {?function} callback Called after component is updated.\n       * @param {?string} callerName name of the calling function in the public API.\n       * @internal\n       */\n      enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {\n        warnNoop(publicInstance, 'replaceState');\n      },\n\n      /**\n       * Sets a subset of the state. This only exists because _pendingState is\n       * internal. This provides a merging strategy that is not available to deep\n       * properties which is confusing. TODO: Expose pendingState or don't use it\n       * during the merge.\n       *\n       * @param {ReactClass} publicInstance The instance that should rerender.\n       * @param {object} partialState Next partial state to be merged with state.\n       * @param {?function} callback Called after component is updated.\n       * @param {?string} Name of the calling function in the public API.\n       * @internal\n       */\n      enqueueSetState: function (publicInstance, partialState, callback, callerName) {\n        warnNoop(publicInstance, 'setState');\n      }\n    };\n    var emptyObject = {};\n    {\n      Object.freeze(emptyObject);\n    }\n    /**\n     * Base class helpers for the updating state of a component.\n     */\n\n    function Component(props, context, updater) {\n      this.props = props;\n      this.context = context; // If a component has string refs, we will assign a different object later.\n\n      this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the\n      // renderer.\n\n      this.updater = updater || ReactNoopUpdateQueue;\n    }\n\n    Component.prototype.isReactComponent = {};\n    /**\n     * Sets a subset of the state. Always use this to mutate\n     * state. You should treat `this.state` as immutable.\n     *\n     * There is no guarantee that `this.state` will be immediately updated, so\n     * accessing `this.state` after calling this method may return the old value.\n     *\n     * There is no guarantee that calls to `setState` will run synchronously,\n     * as they may eventually be batched together.  You can provide an optional\n     * callback that will be executed when the call to setState is actually\n     * completed.\n     *\n     * When a function is provided to setState, it will be called at some point in\n     * the future (not synchronously). It will be called with the up to date\n     * component arguments (state, props, context). These values can be different\n     * from this.* because your function may be called after receiveProps but before\n     * shouldComponentUpdate, and this new state, props, and context will not yet be\n     * assigned to this.\n     *\n     * @param {object|function} partialState Next partial state or function to\n     *        produce next partial state to be merged with current state.\n     * @param {?function} callback Called after state is updated.\n     * @final\n     * @protected\n     */\n\n    Component.prototype.setState = function (partialState, callback) {\n      if (typeof partialState !== 'object' && typeof partialState !== 'function' && partialState != null) {\n        throw new Error('setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.');\n      }\n\n      this.updater.enqueueSetState(this, partialState, callback, 'setState');\n    };\n    /**\n     * Forces an update. This should only be invoked when it is known with\n     * certainty that we are **not** in a DOM transaction.\n     *\n     * You may want to call this when you know that some deeper aspect of the\n     * component's state has changed but `setState` was not called.\n     *\n     * This will not invoke `shouldComponentUpdate`, but it will invoke\n     * `componentWillUpdate` and `componentDidUpdate`.\n     *\n     * @param {?function} callback Called after update is complete.\n     * @final\n     * @protected\n     */\n\n\n    Component.prototype.forceUpdate = function (callback) {\n      this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');\n    };\n    /**\n     * Deprecated APIs. These APIs used to exist on classic React classes but since\n     * we would like to deprecate them, we're not going to move them over to this\n     * modern base class. Instead, we define a getter that warns if it's accessed.\n     */\n\n\n    {\n      var deprecatedAPIs = {\n        isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],\n        replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']\n      };\n\n      var defineDeprecationWarning = function (methodName, info) {\n        Object.defineProperty(Component.prototype, methodName, {\n          get: function () {\n            warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);\n            return undefined;\n          }\n        });\n      };\n\n      for (var fnName in deprecatedAPIs) {\n        if (deprecatedAPIs.hasOwnProperty(fnName)) {\n          defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n        }\n      }\n    }\n\n    function ComponentDummy() {}\n\n    ComponentDummy.prototype = Component.prototype;\n    /**\n     * Convenience component with default shallow equality check for sCU.\n     */\n\n    function PureComponent(props, context, updater) {\n      this.props = props;\n      this.context = context; // If a component has string refs, we will assign a different object later.\n\n      this.refs = emptyObject;\n      this.updater = updater || ReactNoopUpdateQueue;\n    }\n\n    var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();\n    pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.\n\n    _assign(pureComponentPrototype, Component.prototype);\n\n    pureComponentPrototype.isPureReactComponent = true; // an immutable object with a single mutable value\n\n    function createRef() {\n      var refObject = {\n        current: null\n      };\n      {\n        Object.seal(refObject);\n      }\n      return refObject;\n    }\n\n    var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\n    function isArray(a) {\n      return isArrayImpl(a);\n    }\n    /*\n     * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol\n     * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n     *\n     * The functions in this module will throw an easier-to-understand,\n     * easier-to-debug exception with a clear errors message message explaining the\n     * problem. (Instead of a confusing exception thrown inside the implementation\n     * of the `value` object).\n     */\n    // $FlowFixMe only called in DEV, so void return is not possible.\n\n\n    function typeName(value) {\n      {\n        // toStringTag is needed for namespaced types like Temporal.Instant\n        var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';\n        return type;\n      }\n    } // $FlowFixMe only called in DEV, so void return is not possible.\n\n\n    function willCoercionThrow(value) {\n      {\n        try {\n          testStringCoercion(value);\n          return false;\n        } catch (e) {\n          return true;\n        }\n      }\n    }\n\n    function testStringCoercion(value) {\n      // If you ended up here by following an exception call stack, here's what's\n      // happened: you supplied an object or symbol value to React (as a prop, key,\n      // DOM attribute, CSS property, string ref, etc.) and when React tried to\n      // coerce it to a string using `'' + value`, an exception was thrown.\n      //\n      // The most common types that will cause this exception are `Symbol` instances\n      // and Temporal objects like `Temporal.Instant`. But any object that has a\n      // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n      // exception. (Library authors do this to prevent users from using built-in\n      // numeric operators like `+` or comparison operators like `>=` because custom\n      // methods are needed to perform accurate arithmetic or comparison.)\n      //\n      // To fix the problem, coerce this object or symbol value to a string before\n      // passing it to React. The most reliable way is usually `String(value)`.\n      //\n      // To find which value is throwing, check the browser or debugger console.\n      // Before this exception was thrown, there should be `console.error` output\n      // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n      // problem and how that type was used: key, atrribute, input value prop, etc.\n      // In most cases, this console output also shows the component and its\n      // ancestor components where the exception happened.\n      //\n      // eslint-disable-next-line react-internal/safe-string-coercion\n      return '' + value;\n    }\n\n    function checkKeyStringCoercion(value) {\n      {\n        if (willCoercionThrow(value)) {\n          error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));\n          return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n        }\n      }\n    }\n\n    function getWrappedName(outerType, innerType, wrapperName) {\n      var displayName = outerType.displayName;\n\n      if (displayName) {\n        return displayName;\n      }\n\n      var functionName = innerType.displayName || innerType.name || '';\n      return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n    } // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\n    function getContextName(type) {\n      return type.displayName || 'Context';\n    } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\n\n    function getComponentNameFromType(type) {\n      if (type == null) {\n        // Host root, text node or just invalid type.\n        return null;\n      }\n\n      {\n        if (typeof type.tag === 'number') {\n          error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n        }\n      }\n\n      if (typeof type === 'function') {\n        return type.displayName || type.name || null;\n      }\n\n      if (typeof type === 'string') {\n        return type;\n      }\n\n      switch (type) {\n        case exports.Fragment:\n          return 'Fragment';\n\n        case REACT_PORTAL_TYPE:\n          return 'Portal';\n\n        case exports.Profiler:\n          return 'Profiler';\n\n        case exports.StrictMode:\n          return 'StrictMode';\n\n        case exports.Suspense:\n          return 'Suspense';\n\n        case exports.SuspenseList:\n          return 'SuspenseList';\n\n        case exports.unstable_Cache:\n          return 'Cache';\n      }\n\n      if (typeof type === 'object') {\n        switch (type.$$typeof) {\n          case REACT_CONTEXT_TYPE:\n            var context = type;\n            return getContextName(context) + '.Consumer';\n\n          case REACT_PROVIDER_TYPE:\n            var provider = type;\n            return getContextName(provider._context) + '.Provider';\n\n          case REACT_FORWARD_REF_TYPE:\n            return getWrappedName(type, type.render, 'ForwardRef');\n\n          case REACT_MEMO_TYPE:\n            var outerName = type.displayName || null;\n\n            if (outerName !== null) {\n              return outerName;\n            }\n\n            return getComponentNameFromType(type.type) || 'Memo';\n\n          case REACT_LAZY_TYPE:\n            {\n              var lazyComponent = type;\n              var payload = lazyComponent._payload;\n              var init = lazyComponent._init;\n\n              try {\n                return getComponentNameFromType(init(payload));\n              } catch (x) {\n                return null;\n              }\n            }\n        }\n      }\n\n      return null;\n    }\n\n    var hasOwnProperty = Object.prototype.hasOwnProperty;\n    var RESERVED_PROPS = {\n      key: true,\n      ref: true,\n      __self: true,\n      __source: true\n    };\n    var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;\n    {\n      didWarnAboutStringRefs = {};\n    }\n\n    function hasValidRef(config) {\n      {\n        if (hasOwnProperty.call(config, 'ref')) {\n          var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n          if (getter && getter.isReactWarning) {\n            return false;\n          }\n        }\n      }\n      return config.ref !== undefined;\n    }\n\n    function hasValidKey(config) {\n      {\n        if (hasOwnProperty.call(config, 'key')) {\n          var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n          if (getter && getter.isReactWarning) {\n            return false;\n          }\n        }\n      }\n      return config.key !== undefined;\n    }\n\n    function defineKeyPropWarningGetter(props, displayName) {\n      var warnAboutAccessingKey = function () {\n        {\n          if (!specialPropKeyWarningShown) {\n            specialPropKeyWarningShown = true;\n            error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n          }\n        }\n      };\n\n      warnAboutAccessingKey.isReactWarning = true;\n      Object.defineProperty(props, 'key', {\n        get: warnAboutAccessingKey,\n        configurable: true\n      });\n    }\n\n    function defineRefPropWarningGetter(props, displayName) {\n      var warnAboutAccessingRef = function () {\n        {\n          if (!specialPropRefWarningShown) {\n            specialPropRefWarningShown = true;\n            error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n          }\n        }\n      };\n\n      warnAboutAccessingRef.isReactWarning = true;\n      Object.defineProperty(props, 'ref', {\n        get: warnAboutAccessingRef,\n        configurable: true\n      });\n    }\n\n    function warnIfStringRefCannotBeAutoConverted(config) {\n      {\n        if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {\n          var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n          if (!didWarnAboutStringRefs[componentName]) {\n            error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);\n            didWarnAboutStringRefs[componentName] = true;\n          }\n        }\n      }\n    }\n    /**\n     * Factory method to create a new React element. This no longer adheres to\n     * the class pattern, so do not use new to call it. Also, instanceof check\n     * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n     * if something is a React Element.\n     *\n     * @param {*} type\n     * @param {*} props\n     * @param {*} key\n     * @param {string|object} ref\n     * @param {*} owner\n     * @param {*} self A *temporary* helper to detect places where `this` is\n     * different from the `owner` when React.createElement is called, so that we\n     * can warn. We want to get rid of owner and replace string `ref`s with arrow\n     * functions, and as long as `this` and owner are the same, there will be no\n     * change in behavior.\n     * @param {*} source An annotation object (added by a transpiler or otherwise)\n     * indicating filename, line number, and/or other information.\n     * @internal\n     */\n\n\n    var ReactElement = function (type, key, ref, self, source, owner, props) {\n      var element = {\n        // This tag allows us to uniquely identify this as a React Element\n        $$typeof: REACT_ELEMENT_TYPE,\n        // Built-in properties that belong on the element\n        type: type,\n        key: key,\n        ref: ref,\n        props: props,\n        // Record the component responsible for creating this element.\n        _owner: owner\n      };\n      {\n        // The validation flag is currently mutative. We put it on\n        // an external backing store so that we can freeze the whole object.\n        // This can be replaced with a WeakMap once they are implemented in\n        // commonly used development environments.\n        element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n        // the validation flag non-enumerable (where possible, which should\n        // include every environment we run tests in), so the test framework\n        // ignores it.\n\n        Object.defineProperty(element._store, 'validated', {\n          configurable: false,\n          enumerable: false,\n          writable: true,\n          value: false\n        }); // self and source are DEV only properties.\n\n        Object.defineProperty(element, '_self', {\n          configurable: false,\n          enumerable: false,\n          writable: false,\n          value: self\n        }); // Two elements created in two different places should be considered\n        // equal for testing purposes and therefore we hide it from enumeration.\n\n        Object.defineProperty(element, '_source', {\n          configurable: false,\n          enumerable: false,\n          writable: false,\n          value: source\n        });\n\n        if (Object.freeze) {\n          Object.freeze(element.props);\n          Object.freeze(element);\n        }\n      }\n      return element;\n    };\n    /**\n     * Create and return a new ReactElement of the given type.\n     * See https://reactjs.org/docs/react-api.html#createelement\n     */\n\n\n    function createElement(type, config, children) {\n      var propName; // Reserved names are extracted\n\n      var props = {};\n      var key = null;\n      var ref = null;\n      var self = null;\n      var source = null;\n\n      if (config != null) {\n        if (hasValidRef(config)) {\n          ref = config.ref;\n          {\n            warnIfStringRefCannotBeAutoConverted(config);\n          }\n        }\n\n        if (hasValidKey(config)) {\n          {\n            checkKeyStringCoercion(config.key);\n          }\n          key = '' + config.key;\n        }\n\n        self = config.__self === undefined ? null : config.__self;\n        source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object\n\n        for (propName in config) {\n          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n            props[propName] = config[propName];\n          }\n        }\n      } // Children can be more than one argument, and those are transferred onto\n      // the newly allocated props object.\n\n\n      var childrenLength = arguments.length - 2;\n\n      if (childrenLength === 1) {\n        props.children = children;\n      } else if (childrenLength > 1) {\n        var childArray = Array(childrenLength);\n\n        for (var i = 0; i < childrenLength; i++) {\n          childArray[i] = arguments[i + 2];\n        }\n\n        {\n          if (Object.freeze) {\n            Object.freeze(childArray);\n          }\n        }\n        props.children = childArray;\n      } // Resolve default props\n\n\n      if (type && type.defaultProps) {\n        var defaultProps = type.defaultProps;\n\n        for (propName in defaultProps) {\n          if (props[propName] === undefined) {\n            props[propName] = defaultProps[propName];\n          }\n        }\n      }\n\n      {\n        if (key || ref) {\n          var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n          if (key) {\n            defineKeyPropWarningGetter(props, displayName);\n          }\n\n          if (ref) {\n            defineRefPropWarningGetter(props, displayName);\n          }\n        }\n      }\n      return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n    }\n\n    function cloneAndReplaceKey(oldElement, newKey) {\n      var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);\n      return newElement;\n    }\n    /**\n     * Clone and return a new ReactElement using element as the starting point.\n     * See https://reactjs.org/docs/react-api.html#cloneelement\n     */\n\n\n    function cloneElement(element, config, children) {\n      if (element === null || element === undefined) {\n        throw new Error(\"React.cloneElement(...): The argument must be a React element, but you passed \" + element + \".\");\n      }\n\n      var propName; // Original props are copied\n\n      var props = _assign({}, element.props); // Reserved names are extracted\n\n\n      var key = element.key;\n      var ref = element.ref; // Self is preserved since the owner is preserved.\n\n      var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a\n      // transpiler, and the original source is probably a better indicator of the\n      // true owner.\n\n      var source = element._source; // Owner will be preserved, unless ref is overridden\n\n      var owner = element._owner;\n\n      if (config != null) {\n        if (hasValidRef(config)) {\n          // Silently steal the ref from the parent.\n          ref = config.ref;\n          owner = ReactCurrentOwner.current;\n        }\n\n        if (hasValidKey(config)) {\n          {\n            checkKeyStringCoercion(config.key);\n          }\n          key = '' + config.key;\n        } // Remaining properties override existing props\n\n\n        var defaultProps;\n\n        if (element.type && element.type.defaultProps) {\n          defaultProps = element.type.defaultProps;\n        }\n\n        for (propName in config) {\n          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n            if (config[propName] === undefined && defaultProps !== undefined) {\n              // Resolve default props\n              props[propName] = defaultProps[propName];\n            } else {\n              props[propName] = config[propName];\n            }\n          }\n        }\n      } // Children can be more than one argument, and those are transferred onto\n      // the newly allocated props object.\n\n\n      var childrenLength = arguments.length - 2;\n\n      if (childrenLength === 1) {\n        props.children = children;\n      } else if (childrenLength > 1) {\n        var childArray = Array(childrenLength);\n\n        for (var i = 0; i < childrenLength; i++) {\n          childArray[i] = arguments[i + 2];\n        }\n\n        props.children = childArray;\n      }\n\n      return ReactElement(element.type, key, ref, self, source, owner, props);\n    }\n    /**\n     * Verifies the object is a ReactElement.\n     * See https://reactjs.org/docs/react-api.html#isvalidelement\n     * @param {?object} object\n     * @return {boolean} True if `object` is a ReactElement.\n     * @final\n     */\n\n\n    function isValidElement(object) {\n      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n    }\n\n    var SEPARATOR = '.';\n    var SUBSEPARATOR = ':';\n    /**\n     * Escape and wrap key so it is safe to use as a reactid\n     *\n     * @param {string} key to be escaped.\n     * @return {string} the escaped key.\n     */\n\n    function escape(key) {\n      var escapeRegex = /[=:]/g;\n      var escaperLookup = {\n        '=': '=0',\n        ':': '=2'\n      };\n      var escapedString = key.replace(escapeRegex, function (match) {\n        return escaperLookup[match];\n      });\n      return '$' + escapedString;\n    }\n    /**\n     * TODO: Test that a single child and an array with one item have the same key\n     * pattern.\n     */\n\n\n    var didWarnAboutMaps = false;\n    var userProvidedKeyEscapeRegex = /\\/+/g;\n\n    function escapeUserProvidedKey(text) {\n      return text.replace(userProvidedKeyEscapeRegex, '$&/');\n    }\n    /**\n     * Generate a key string that identifies a element within a set.\n     *\n     * @param {*} element A element that could contain a manual key.\n     * @param {number} index Index that is used if a manual key is not provided.\n     * @return {string}\n     */\n\n\n    function getElementKey(element, index) {\n      // Do some typechecking here since we call this blindly. We want to ensure\n      // that we don't block potential future ES APIs.\n      if (typeof element === 'object' && element !== null && element.key != null) {\n        // Explicit key\n        {\n          checkKeyStringCoercion(element.key);\n        }\n        return escape('' + element.key);\n      } // Implicit key determined by the index in the set\n\n\n      return index.toString(36);\n    }\n\n    function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {\n      var type = typeof children;\n\n      if (type === 'undefined' || type === 'boolean') {\n        // All of the above are perceived as null.\n        children = null;\n      }\n\n      var invokeCallback = false;\n\n      if (children === null) {\n        invokeCallback = true;\n      } else {\n        switch (type) {\n          case 'string':\n          case 'number':\n            invokeCallback = true;\n            break;\n\n          case 'object':\n            switch (children.$$typeof) {\n              case REACT_ELEMENT_TYPE:\n              case REACT_PORTAL_TYPE:\n                invokeCallback = true;\n            }\n\n        }\n      }\n\n      if (invokeCallback) {\n        var _child = children;\n        var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array\n        // so that it's consistent if the number of children grows:\n\n        var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;\n\n        if (isArray(mappedChild)) {\n          var escapedChildKey = '';\n\n          if (childKey != null) {\n            escapedChildKey = escapeUserProvidedKey(childKey) + '/';\n          }\n\n          mapIntoArray(mappedChild, array, escapedChildKey, '', function (c) {\n            return c;\n          });\n        } else if (mappedChild != null) {\n          if (isValidElement(mappedChild)) {\n            {\n              // The `if` statement here prevents auto-disabling of the safe\n              // coercion ESLint rule, so we must manually disable it below.\n              // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key\n              if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {\n                checkKeyStringCoercion(mappedChild.key);\n              }\n            }\n            mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as\n            // traverseAllChildren used to do for objects as children\n            escapedPrefix + ( // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key\n            mappedChild.key && (!_child || _child.key !== mappedChild.key) ? // $FlowFixMe Flow incorrectly thinks existing element's key can be a number\n            // eslint-disable-next-line react-internal/safe-string-coercion\n            escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);\n          }\n\n          array.push(mappedChild);\n        }\n\n        return 1;\n      }\n\n      var child;\n      var nextName;\n      var subtreeCount = 0; // Count of children found in the current subtree.\n\n      var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;\n\n      if (isArray(children)) {\n        for (var i = 0; i < children.length; i++) {\n          child = children[i];\n          nextName = nextNamePrefix + getElementKey(child, i);\n          subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);\n        }\n      } else {\n        var iteratorFn = getIteratorFn(children);\n\n        if (typeof iteratorFn === 'function') {\n          var iterableChildren = children;\n          {\n            // Warn about using Maps as children\n            if (iteratorFn === iterableChildren.entries) {\n              if (!didWarnAboutMaps) {\n                warn('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');\n              }\n\n              didWarnAboutMaps = true;\n            }\n          }\n          var iterator = iteratorFn.call(iterableChildren);\n          var step;\n          var ii = 0;\n\n          while (!(step = iterator.next()).done) {\n            child = step.value;\n            nextName = nextNamePrefix + getElementKey(child, ii++);\n            subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);\n          }\n        } else if (type === 'object') {\n          // eslint-disable-next-line react-internal/safe-string-coercion\n          var childrenString = String(children);\n          throw new Error(\"Objects are not valid as a React child (found: \" + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + \"). \" + 'If you meant to render a collection of children, use an array ' + 'instead.');\n        }\n      }\n\n      return subtreeCount;\n    }\n    /**\n     * Maps children that are typically specified as `props.children`.\n     *\n     * See https://reactjs.org/docs/react-api.html#reactchildrenmap\n     *\n     * The provided mapFunction(child, index) will be called for each\n     * leaf child.\n     *\n     * @param {?*} children Children tree container.\n     * @param {function(*, int)} func The map function.\n     * @param {*} context Context for mapFunction.\n     * @return {object} Object containing the ordered map of results.\n     */\n\n\n    function mapChildren(children, func, context) {\n      if (children == null) {\n        return children;\n      }\n\n      var result = [];\n      var count = 0;\n      mapIntoArray(children, result, '', '', function (child) {\n        return func.call(context, child, count++);\n      });\n      return result;\n    }\n    /**\n     * Count the number of children that are typically specified as\n     * `props.children`.\n     *\n     * See https://reactjs.org/docs/react-api.html#reactchildrencount\n     *\n     * @param {?*} children Children tree container.\n     * @return {number} The number of children.\n     */\n\n\n    function countChildren(children) {\n      var n = 0;\n      mapChildren(children, function () {\n        n++; // Don't return anything\n      });\n      return n;\n    }\n    /**\n     * Iterates through children that are typically specified as `props.children`.\n     *\n     * See https://reactjs.org/docs/react-api.html#reactchildrenforeach\n     *\n     * The provided forEachFunc(child, index) will be called for each\n     * leaf child.\n     *\n     * @param {?*} children Children tree container.\n     * @param {function(*, int)} forEachFunc\n     * @param {*} forEachContext Context for forEachContext.\n     */\n\n\n    function forEachChildren(children, forEachFunc, forEachContext) {\n      mapChildren(children, function () {\n        forEachFunc.apply(this, arguments); // Don't return anything.\n      }, forEachContext);\n    }\n    /**\n     * Flatten a children object (typically specified as `props.children`) and\n     * return an array with appropriately re-keyed children.\n     *\n     * See https://reactjs.org/docs/react-api.html#reactchildrentoarray\n     */\n\n\n    function toArray(children) {\n      return mapChildren(children, function (child) {\n        return child;\n      }) || [];\n    }\n    /**\n     * Returns the first child in a collection of children and verifies that there\n     * is only one child in the collection.\n     *\n     * See https://reactjs.org/docs/react-api.html#reactchildrenonly\n     *\n     * The current implementation of this function assumes that a single child gets\n     * passed without a wrapper, but the purpose of this helper function is to\n     * abstract away the particular structure of children.\n     *\n     * @param {?object} children Child collection structure.\n     * @return {ReactElement} The first and only `ReactElement` contained in the\n     * structure.\n     */\n\n\n    function onlyChild(children) {\n      if (!isValidElement(children)) {\n        throw new Error('React.Children.only expected to receive a single React element child.');\n      }\n\n      return children;\n    }\n\n    function createContext(defaultValue) {\n      // TODO: Second argument used to be an optional `calculateChangedBits`\n      // function. Warn to reserve for future use?\n      var context = {\n        $$typeof: REACT_CONTEXT_TYPE,\n        // As a workaround to support multiple concurrent renderers, we categorize\n        // some renderers as primary and others as secondary. We only expect\n        // there to be two concurrent renderers at most: React Native (primary) and\n        // Fabric (secondary); React DOM (primary) and React ART (secondary).\n        // Secondary renderers store their context values on separate fields.\n        _currentValue: defaultValue,\n        _currentValue2: defaultValue,\n        // Used to track how many concurrent renderers this context currently\n        // supports within in a single renderer. Such as parallel server rendering.\n        _threadCount: 0,\n        // These are circular\n        Provider: null,\n        Consumer: null\n      };\n      context.Provider = {\n        $$typeof: REACT_PROVIDER_TYPE,\n        _context: context\n      };\n      var hasWarnedAboutUsingNestedContextConsumers = false;\n      var hasWarnedAboutUsingConsumerProvider = false;\n      var hasWarnedAboutDisplayNameOnConsumer = false;\n      {\n        // A separate object, but proxies back to the original context object for\n        // backwards compatibility. It has a different $$typeof, so we can properly\n        // warn for the incorrect usage of Context as a Consumer.\n        var Consumer = {\n          $$typeof: REACT_CONTEXT_TYPE,\n          _context: context\n        }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here\n\n        Object.defineProperties(Consumer, {\n          Provider: {\n            get: function () {\n              if (!hasWarnedAboutUsingConsumerProvider) {\n                hasWarnedAboutUsingConsumerProvider = true;\n                error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');\n              }\n\n              return context.Provider;\n            },\n            set: function (_Provider) {\n              context.Provider = _Provider;\n            }\n          },\n          _currentValue: {\n            get: function () {\n              return context._currentValue;\n            },\n            set: function (_currentValue) {\n              context._currentValue = _currentValue;\n            }\n          },\n          _currentValue2: {\n            get: function () {\n              return context._currentValue2;\n            },\n            set: function (_currentValue2) {\n              context._currentValue2 = _currentValue2;\n            }\n          },\n          _threadCount: {\n            get: function () {\n              return context._threadCount;\n            },\n            set: function (_threadCount) {\n              context._threadCount = _threadCount;\n            }\n          },\n          Consumer: {\n            get: function () {\n              if (!hasWarnedAboutUsingNestedContextConsumers) {\n                hasWarnedAboutUsingNestedContextConsumers = true;\n                error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');\n              }\n\n              return context.Consumer;\n            }\n          },\n          displayName: {\n            get: function () {\n              return context.displayName;\n            },\n            set: function (displayName) {\n              if (!hasWarnedAboutDisplayNameOnConsumer) {\n                warn('Setting `displayName` on Context.Consumer has no effect. ' + \"You should set it directly on the context with Context.displayName = '%s'.\", displayName);\n                hasWarnedAboutDisplayNameOnConsumer = true;\n              }\n            }\n          }\n        }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty\n\n        context.Consumer = Consumer;\n      }\n      {\n        context._currentRenderer = null;\n        context._currentRenderer2 = null;\n      }\n      return context;\n    }\n\n    var Uninitialized = -1;\n    var Pending = 0;\n    var Resolved = 1;\n    var Rejected = 2;\n\n    function lazyInitializer(payload) {\n      if (payload._status === Uninitialized) {\n        var ctor = payload._result;\n        var thenable = ctor(); // Transition to the next state.\n        // This might throw either because it's missing or throws. If so, we treat it\n        // as still uninitialized and try again next time. Which is the same as what\n        // happens if the ctor or any wrappers processing the ctor throws. This might\n        // end up fixing it if the resolution was a concurrency bug.\n\n        thenable.then(function (moduleObject) {\n          if (payload._status === Pending || payload._status === Uninitialized) {\n            // Transition to the next state.\n            var resolved = payload;\n            resolved._status = Resolved;\n            resolved._result = moduleObject;\n          }\n        }, function (error) {\n          if (payload._status === Pending || payload._status === Uninitialized) {\n            // Transition to the next state.\n            var rejected = payload;\n            rejected._status = Rejected;\n            rejected._result = error;\n          }\n        });\n\n        if (payload._status === Uninitialized) {\n          // In case, we're still uninitialized, then we're waiting for the thenable\n          // to resolve. Set it as pending in the meantime.\n          var pending = payload;\n          pending._status = Pending;\n          pending._result = thenable;\n        }\n      }\n\n      if (payload._status === Resolved) {\n        var moduleObject = payload._result;\n        {\n          if (moduleObject === undefined) {\n            error('lazy: Expected the result of a dynamic imp' + 'ort() call. ' + 'Instead received: %s\\n\\nYour code should look like: \\n  ' + // Break up imports to avoid accidentally parsing them as dependencies.\n            'const MyComponent = lazy(() => imp' + \"ort('./MyComponent'))\\n\\n\" + 'Did you accidentally put curly braces around the import?', moduleObject);\n          }\n        }\n        {\n          if (!('default' in moduleObject)) {\n            error('lazy: Expected the result of a dynamic imp' + 'ort() call. ' + 'Instead received: %s\\n\\nYour code should look like: \\n  ' + // Break up imports to avoid accidentally parsing them as dependencies.\n            'const MyComponent = lazy(() => imp' + \"ort('./MyComponent'))\", moduleObject);\n          }\n        }\n        return moduleObject.default;\n      } else {\n        throw payload._result;\n      }\n    }\n\n    function lazy(ctor) {\n      var payload = {\n        // We use these fields to store the result.\n        _status: Uninitialized,\n        _result: ctor\n      };\n      var lazyType = {\n        $$typeof: REACT_LAZY_TYPE,\n        _payload: payload,\n        _init: lazyInitializer\n      };\n      {\n        // In production, this would just set it on the object.\n        var defaultProps;\n        var propTypes; // $FlowFixMe\n\n        Object.defineProperties(lazyType, {\n          defaultProps: {\n            configurable: true,\n            get: function () {\n              return defaultProps;\n            },\n            set: function (newDefaultProps) {\n              error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');\n              defaultProps = newDefaultProps; // Match production behavior more closely:\n              // $FlowFixMe\n\n              Object.defineProperty(lazyType, 'defaultProps', {\n                enumerable: true\n              });\n            }\n          },\n          propTypes: {\n            configurable: true,\n            get: function () {\n              return propTypes;\n            },\n            set: function (newPropTypes) {\n              error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');\n              propTypes = newPropTypes; // Match production behavior more closely:\n              // $FlowFixMe\n\n              Object.defineProperty(lazyType, 'propTypes', {\n                enumerable: true\n              });\n            }\n          }\n        });\n      }\n      return lazyType;\n    }\n\n    function forwardRef(render) {\n      {\n        if (render != null && render.$$typeof === REACT_MEMO_TYPE) {\n          error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');\n        } else if (typeof render !== 'function') {\n          error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);\n        } else {\n          if (render.length !== 0 && render.length !== 2) {\n            error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');\n          }\n        }\n\n        if (render != null) {\n          if (render.defaultProps != null || render.propTypes != null) {\n            error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');\n          }\n        }\n      }\n      var elementType = {\n        $$typeof: REACT_FORWARD_REF_TYPE,\n        render: render\n      };\n      {\n        var ownName;\n        Object.defineProperty(elementType, 'displayName', {\n          enumerable: false,\n          configurable: true,\n          get: function () {\n            return ownName;\n          },\n          set: function (name) {\n            ownName = name; // The inner component shouldn't inherit this display name in most cases,\n            // because the component may be used elsewhere.\n            // But it's nice for anonymous functions to inherit the name,\n            // so that our component-stack generation logic will display their frames.\n            // An anonymous function generally suggests a pattern like:\n            //   React.forwardRef((props, ref) => {...});\n            // This kind of inner function is not used elsewhere so the side effect is okay.\n\n            if (!render.name && !render.displayName) {\n              render.displayName = name;\n            }\n          }\n        });\n      }\n      return elementType;\n    } // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.\n\n\n    var enableScopeAPI = false; // Experimental Create Event Handle API.\n\n    var warnOnSubscriptionInsideStartTransition = false;\n    var REACT_MODULE_REFERENCE = 0;\n\n    if (typeof Symbol === 'function') {\n      REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');\n    }\n\n    function isValidElementType(type) {\n      if (typeof type === 'string' || typeof type === 'function') {\n        return true;\n      } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n      if (type === exports.Fragment || type === exports.Profiler || type === exports.unstable_DebugTracingMode || type === exports.StrictMode || type === exports.Suspense || type === exports.SuspenseList || type === exports.unstable_LegacyHidden || type === exports.unstable_Offscreen || enableScopeAPI || type === exports.unstable_Cache) {\n        return true;\n      }\n\n      if (typeof type === 'object' && type !== null) {\n        if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n        // types supported by any Flight configuration anywhere since\n        // we don't know which Flight build this will end up being used\n        // with.\n        type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    function memo(type, compare) {\n      {\n        if (!isValidElementType(type)) {\n          error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);\n        }\n      }\n      var elementType = {\n        $$typeof: REACT_MEMO_TYPE,\n        type: type,\n        compare: compare === undefined ? null : compare\n      };\n      {\n        var ownName;\n        Object.defineProperty(elementType, 'displayName', {\n          enumerable: false,\n          configurable: true,\n          get: function () {\n            return ownName;\n          },\n          set: function (name) {\n            ownName = name; // The inner component shouldn't inherit this display name in most cases,\n            // because the component may be used elsewhere.\n            // But it's nice for anonymous functions to inherit the name,\n            // so that our component-stack generation logic will display their frames.\n            // An anonymous function generally suggests a pattern like:\n            //   React.memo((props) => {...});\n            // This kind of inner function is not used elsewhere so the side effect is okay.\n\n            if (!type.name && !type.displayName) {\n              type.displayName = name;\n            }\n          }\n        });\n      }\n      return elementType;\n    }\n\n    function resolveDispatcher() {\n      var dispatcher = ReactCurrentDispatcher.current;\n      {\n        if (dispatcher === null) {\n          error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\\n' + '2. You might be breaking the Rules of Hooks\\n' + '3. You might have more than one copy of React in the same app\\n' + 'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');\n        }\n      } // Will result in a null access error if accessed outside render phase. We\n      // intentionally don't throw our own error because this is in a hot path.\n      // Also helps ensure this is inlined.\n\n      return dispatcher;\n    }\n\n    function getCacheSignal() {\n      var dispatcher = resolveDispatcher(); // $FlowFixMe This is unstable, thus optional\n\n      return dispatcher.getCacheSignal();\n    }\n\n    function getCacheForType(resourceType) {\n      var dispatcher = resolveDispatcher(); // $FlowFixMe This is unstable, thus optional\n\n      return dispatcher.getCacheForType(resourceType);\n    }\n\n    function useContext(Context) {\n      var dispatcher = resolveDispatcher();\n      {\n        // TODO: add a more generic warning for invalid values.\n        if (Context._context !== undefined) {\n          var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs\n          // and nobody should be using this in existing code.\n\n          if (realContext.Consumer === Context) {\n            error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');\n          } else if (realContext.Provider === Context) {\n            error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');\n          }\n        }\n      }\n      return dispatcher.useContext(Context);\n    }\n\n    function useState(initialState) {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.useState(initialState);\n    }\n\n    function useReducer(reducer, initialArg, init) {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.useReducer(reducer, initialArg, init);\n    }\n\n    function useRef(initialValue) {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.useRef(initialValue);\n    }\n\n    function useEffect(create, deps) {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.useEffect(create, deps);\n    }\n\n    function useInsertionEffect(create, deps) {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.useInsertionEffect(create, deps);\n    }\n\n    function useLayoutEffect(create, deps) {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.useLayoutEffect(create, deps);\n    }\n\n    function useCallback(callback, deps) {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.useCallback(callback, deps);\n    }\n\n    function useMemo(create, deps) {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.useMemo(create, deps);\n    }\n\n    function useImperativeHandle(ref, create, deps) {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.useImperativeHandle(ref, create, deps);\n    }\n\n    function useDebugValue(value, formatterFn) {\n      {\n        var dispatcher = resolveDispatcher();\n        return dispatcher.useDebugValue(value, formatterFn);\n      }\n    }\n\n    function useTransition() {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.useTransition();\n    }\n\n    function useDeferredValue(value) {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.useDeferredValue(value);\n    }\n\n    function useId() {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.useId();\n    }\n\n    function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    }\n\n    function useCacheRefresh() {\n      var dispatcher = resolveDispatcher(); // $FlowFixMe This is unstable, thus optional\n\n      return dispatcher.useCacheRefresh();\n    } // Helpers to patch console.logs to avoid logging during side-effect free\n    // replaying on render function. This currently only patches the object\n    // lazily which won't cover if the log function was extracted eagerly.\n    // We could also eagerly patch the method.\n\n\n    var disabledDepth = 0;\n    var prevLog;\n    var prevInfo;\n    var prevWarn;\n    var prevError;\n    var prevGroup;\n    var prevGroupCollapsed;\n    var prevGroupEnd;\n\n    function disabledLog() {}\n\n    disabledLog.__reactDisabledLog = true;\n\n    function disableLogs() {\n      {\n        if (disabledDepth === 0) {\n          /* eslint-disable react-internal/no-production-logging */\n          prevLog = console.log;\n          prevInfo = console.info;\n          prevWarn = console.warn;\n          prevError = console.error;\n          prevGroup = console.group;\n          prevGroupCollapsed = console.groupCollapsed;\n          prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n          var props = {\n            configurable: true,\n            enumerable: true,\n            value: disabledLog,\n            writable: true\n          }; // $FlowFixMe Flow thinks console is immutable.\n\n          Object.defineProperties(console, {\n            info: props,\n            log: props,\n            warn: props,\n            error: props,\n            group: props,\n            groupCollapsed: props,\n            groupEnd: props\n          });\n          /* eslint-enable react-internal/no-production-logging */\n        }\n\n        disabledDepth++;\n      }\n    }\n\n    function reenableLogs() {\n      {\n        disabledDepth--;\n\n        if (disabledDepth === 0) {\n          /* eslint-disable react-internal/no-production-logging */\n          var props = {\n            configurable: true,\n            enumerable: true,\n            writable: true\n          }; // $FlowFixMe Flow thinks console is immutable.\n\n          Object.defineProperties(console, {\n            log: _assign({}, props, {\n              value: prevLog\n            }),\n            info: _assign({}, props, {\n              value: prevInfo\n            }),\n            warn: _assign({}, props, {\n              value: prevWarn\n            }),\n            error: _assign({}, props, {\n              value: prevError\n            }),\n            group: _assign({}, props, {\n              value: prevGroup\n            }),\n            groupCollapsed: _assign({}, props, {\n              value: prevGroupCollapsed\n            }),\n            groupEnd: _assign({}, props, {\n              value: prevGroupEnd\n            })\n          });\n          /* eslint-enable react-internal/no-production-logging */\n        }\n\n        if (disabledDepth < 0) {\n          error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n        }\n      }\n    }\n\n    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;\n    var prefix;\n\n    function describeBuiltInComponentFrame(name, source, ownerFn) {\n      {\n        if (prefix === undefined) {\n          // Extract the VM specific prefix used by each line.\n          try {\n            throw Error();\n          } catch (x) {\n            var match = x.stack.trim().match(/\\n( *(at )?)/);\n            prefix = match && match[1] || '';\n          }\n        } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n        return '\\n' + prefix + name;\n      }\n    }\n\n    var reentry = false;\n    var componentFrameCache;\n    {\n      var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n      componentFrameCache = new PossiblyWeakMap();\n    }\n\n    function describeNativeComponentFrame(fn, construct) {\n      // If something asked for a stack inside a fake render, it should get ignored.\n      if (!fn || reentry) {\n        return '';\n      }\n\n      {\n        var frame = componentFrameCache.get(fn);\n\n        if (frame !== undefined) {\n          return frame;\n        }\n      }\n      var control;\n      reentry = true;\n      var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.\n\n      Error.prepareStackTrace = undefined;\n      var previousDispatcher;\n      {\n        previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function\n        // for warnings.\n\n        ReactCurrentDispatcher$1.current = null;\n        disableLogs();\n      }\n\n      try {\n        // This should throw.\n        if (construct) {\n          // Something should be setting the props in the constructor.\n          var Fake = function () {\n            throw Error();\n          }; // $FlowFixMe\n\n\n          Object.defineProperty(Fake.prototype, 'props', {\n            set: function () {\n              // We use a throwing setter instead of frozen or non-writable props\n              // because that won't throw in a non-strict mode function.\n              throw Error();\n            }\n          });\n\n          if (typeof Reflect === 'object' && Reflect.construct) {\n            // We construct a different control for this case to include any extra\n            // frames added by the construct call.\n            try {\n              Reflect.construct(Fake, []);\n            } catch (x) {\n              control = x;\n            }\n\n            Reflect.construct(fn, [], Fake);\n          } else {\n            try {\n              Fake.call();\n            } catch (x) {\n              control = x;\n            }\n\n            fn.call(Fake.prototype);\n          }\n        } else {\n          try {\n            throw Error();\n          } catch (x) {\n            control = x;\n          }\n\n          fn();\n        }\n      } catch (sample) {\n        // This is inlined manually because closure doesn't do it for us.\n        if (sample && control && typeof sample.stack === 'string') {\n          // This extracts the first frame from the sample that isn't also in the control.\n          // Skipping one frame that we assume is the frame that calls the two.\n          var sampleLines = sample.stack.split('\\n');\n          var controlLines = control.stack.split('\\n');\n          var s = sampleLines.length - 1;\n          var c = controlLines.length - 1;\n\n          while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n            // We expect at least one stack frame to be shared.\n            // Typically this will be the root most one. However, stack frames may be\n            // cut off due to maximum stack limits. In this case, one maybe cut off\n            // earlier than the other. We assume that the sample is longer or the same\n            // and there for cut off earlier. So we should find the root most frame in\n            // the sample somewhere in the control.\n            c--;\n          }\n\n          for (; s >= 1 && c >= 0; s--, c--) {\n            // Next we find the first one that isn't the same which should be the\n            // frame that called our sample function and the control.\n            if (sampleLines[s] !== controlLines[c]) {\n              // In V8, the first line is describing the message but other VMs don't.\n              // If we're about to return the first line, and the control is also on the same\n              // line, that's a pretty good indicator that our sample threw at same line as\n              // the control. I.e. before we entered the sample frame. So we ignore this result.\n              // This can happen if you passed a class to function component, or non-function.\n              if (s !== 1 || c !== 1) {\n                do {\n                  s--;\n                  c--; // We may still have similar intermediate frames from the construct call.\n                  // The next one that isn't the same should be our match though.\n\n                  if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                    // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                    var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                    // but we have a user-provided \"displayName\"\n                    // splice it in to make the stack more readable.\n\n\n                    if (fn.displayName && _frame.includes('<anonymous>')) {\n                      _frame = _frame.replace('<anonymous>', fn.displayName);\n                    }\n\n                    {\n                      if (typeof fn === 'function') {\n                        componentFrameCache.set(fn, _frame);\n                      }\n                    } // Return the line we found.\n\n                    return _frame;\n                  }\n                } while (s >= 1 && c >= 0);\n              }\n\n              break;\n            }\n          }\n        }\n      } finally {\n        reentry = false;\n        {\n          ReactCurrentDispatcher$1.current = previousDispatcher;\n          reenableLogs();\n        }\n        Error.prepareStackTrace = previousPrepareStackTrace;\n      } // Fallback to just using the name if we couldn't make it throw.\n\n\n      var name = fn ? fn.displayName || fn.name : '';\n      var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n      {\n        if (typeof fn === 'function') {\n          componentFrameCache.set(fn, syntheticFrame);\n        }\n      }\n      return syntheticFrame;\n    }\n\n    function describeFunctionComponentFrame(fn, source, ownerFn) {\n      {\n        return describeNativeComponentFrame(fn, false);\n      }\n    }\n\n    function shouldConstruct(Component) {\n      var prototype = Component.prototype;\n      return !!(prototype && prototype.isReactComponent);\n    }\n\n    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n      if (type == null) {\n        return '';\n      }\n\n      if (typeof type === 'function') {\n        {\n          return describeNativeComponentFrame(type, shouldConstruct(type));\n        }\n      }\n\n      if (typeof type === 'string') {\n        return describeBuiltInComponentFrame(type);\n      }\n\n      switch (type) {\n        case exports.Suspense:\n          return describeBuiltInComponentFrame('Suspense');\n\n        case exports.SuspenseList:\n          return describeBuiltInComponentFrame('SuspenseList');\n      }\n\n      if (typeof type === 'object') {\n        switch (type.$$typeof) {\n          case REACT_FORWARD_REF_TYPE:\n            return describeFunctionComponentFrame(type.render);\n\n          case REACT_MEMO_TYPE:\n            // Memo may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n\n          case REACT_LAZY_TYPE:\n            {\n              var lazyComponent = type;\n              var payload = lazyComponent._payload;\n              var init = lazyComponent._init;\n\n              try {\n                // Lazy may contain any component type so we recursively resolve it.\n                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n              } catch (x) {}\n            }\n        }\n      }\n\n      return '';\n    }\n\n    var loggedTypeFailures = {};\n    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n\n    function setCurrentlyValidatingElement(element) {\n      {\n        if (element) {\n          var owner = element._owner;\n          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n          ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n        } else {\n          ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n        }\n      }\n    }\n\n    function checkPropTypes(typeSpecs, values, location, componentName, element) {\n      {\n        // $FlowFixMe This is okay but Flow doesn't know it.\n        var has = Function.call.bind(hasOwnProperty);\n\n        for (var typeSpecName in typeSpecs) {\n          if (has(typeSpecs, typeSpecName)) {\n            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n            // fail the render phase where it didn't fail before. So we log it.\n            // After these have been cleaned up, we'll let them throw.\n\n            try {\n              // This is intentionally an invariant that gets caught. It's the same\n              // behavior as without this statement except with a better message.\n              if (typeof typeSpecs[typeSpecName] !== 'function') {\n                // eslint-disable-next-line react-internal/prod-error-codes\n                var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n                err.name = 'Invariant Violation';\n                throw err;\n              }\n\n              error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n            } catch (ex) {\n              error$1 = ex;\n            }\n\n            if (error$1 && !(error$1 instanceof Error)) {\n              setCurrentlyValidatingElement(element);\n              error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n              setCurrentlyValidatingElement(null);\n            }\n\n            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n              // Only monitor this failure once because there tends to be a lot of the\n              // same error.\n              loggedTypeFailures[error$1.message] = true;\n              setCurrentlyValidatingElement(element);\n              error('Failed %s type: %s', location, error$1.message);\n              setCurrentlyValidatingElement(null);\n            }\n          }\n        }\n      }\n    }\n\n    function setCurrentlyValidatingElement$1(element) {\n      {\n        if (element) {\n          var owner = element._owner;\n          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n          setExtraStackFrame(stack);\n        } else {\n          setExtraStackFrame(null);\n        }\n      }\n    }\n\n    var propTypesMisspellWarningShown;\n    {\n      propTypesMisspellWarningShown = false;\n    }\n\n    function getDeclarationErrorAddendum() {\n      if (ReactCurrentOwner.current) {\n        var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n        if (name) {\n          return '\\n\\nCheck the render method of `' + name + '`.';\n        }\n      }\n\n      return '';\n    }\n\n    function getSourceInfoErrorAddendum(source) {\n      if (source !== undefined) {\n        var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n        var lineNumber = source.lineNumber;\n        return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n      }\n\n      return '';\n    }\n\n    function getSourceInfoErrorAddendumForProps(elementProps) {\n      if (elementProps !== null && elementProps !== undefined) {\n        return getSourceInfoErrorAddendum(elementProps.__source);\n      }\n\n      return '';\n    }\n    /**\n     * Warn if there's no key explicitly set on dynamic arrays of children or\n     * object keys are not valid. This allows us to keep track of children between\n     * updates.\n     */\n\n\n    var ownerHasKeyUseWarning = {};\n\n    function getCurrentComponentErrorInfo(parentType) {\n      var info = getDeclarationErrorAddendum();\n\n      if (!info) {\n        var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n\n        if (parentName) {\n          info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n        }\n      }\n\n      return info;\n    }\n    /**\n     * Warn if the element doesn't have an explicit key assigned to it.\n     * This element is in an array. The array could grow and shrink or be\n     * reordered. All children that haven't already been validated are required to\n     * have a \"key\" property assigned to it. Error statuses are cached so a warning\n     * will only be shown once.\n     *\n     * @internal\n     * @param {ReactElement} element Element that requires a key.\n     * @param {*} parentType element's parent's type.\n     */\n\n\n    function validateExplicitKey(element, parentType) {\n      if (!element._store || element._store.validated || element.key != null) {\n        return;\n      }\n\n      element._store.validated = true;\n      var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n      if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n        return;\n      }\n\n      ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n      // property, it may be the creator of the child that's responsible for\n      // assigning it a key.\n\n      var childOwner = '';\n\n      if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n        // Give the component that originally created this child.\n        childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n      }\n\n      {\n        setCurrentlyValidatingElement$1(element);\n        error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n        setCurrentlyValidatingElement$1(null);\n      }\n    }\n    /**\n     * Ensure that every element either is passed in a static location, in an\n     * array with an explicit keys property defined, or in an object literal\n     * with valid key property.\n     *\n     * @internal\n     * @param {ReactNode} node Statically passed child of any type.\n     * @param {*} parentType node's parent's type.\n     */\n\n\n    function validateChildKeys(node, parentType) {\n      if (typeof node !== 'object') {\n        return;\n      }\n\n      if (isArray(node)) {\n        for (var i = 0; i < node.length; i++) {\n          var child = node[i];\n\n          if (isValidElement(child)) {\n            validateExplicitKey(child, parentType);\n          }\n        }\n      } else if (isValidElement(node)) {\n        // This element was passed in a valid location.\n        if (node._store) {\n          node._store.validated = true;\n        }\n      } else if (node) {\n        var iteratorFn = getIteratorFn(node);\n\n        if (typeof iteratorFn === 'function') {\n          // Entry iterators used to provide implicit keys,\n          // but now we print a separate warning for them later.\n          if (iteratorFn !== node.entries) {\n            var iterator = iteratorFn.call(node);\n            var step;\n\n            while (!(step = iterator.next()).done) {\n              if (isValidElement(step.value)) {\n                validateExplicitKey(step.value, parentType);\n              }\n            }\n          }\n        }\n      }\n    }\n    /**\n     * Given an element, validate that its props follow the propTypes definition,\n     * provided by the type.\n     *\n     * @param {ReactElement} element\n     */\n\n\n    function validatePropTypes(element) {\n      {\n        var type = element.type;\n\n        if (type === null || type === undefined || typeof type === 'string') {\n          return;\n        }\n\n        var propTypes;\n\n        if (typeof type === 'function') {\n          propTypes = type.propTypes;\n        } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n        // Inner props are checked in the reconciler.\n        type.$$typeof === REACT_MEMO_TYPE)) {\n          propTypes = type.propTypes;\n        } else {\n          return;\n        }\n\n        if (propTypes) {\n          // Intentionally inside to avoid triggering lazy initializers:\n          var name = getComponentNameFromType(type);\n          checkPropTypes(propTypes, element.props, 'prop', name, element);\n        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n          propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n\n          var _name = getComponentNameFromType(type);\n\n          error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');\n        }\n\n        if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {\n          error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\n        }\n      }\n    }\n    /**\n     * Given a fragment, validate that it can only be provided with fragment props\n     * @param {ReactElement} fragment\n     */\n\n\n    function validateFragmentProps(fragment) {\n      {\n        var keys = Object.keys(fragment.props);\n\n        for (var i = 0; i < keys.length; i++) {\n          var key = keys[i];\n\n          if (key !== 'children' && key !== 'key') {\n            setCurrentlyValidatingElement$1(fragment);\n            error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n            setCurrentlyValidatingElement$1(null);\n            break;\n          }\n        }\n\n        if (fragment.ref !== null) {\n          setCurrentlyValidatingElement$1(fragment);\n          error('Invalid attribute `ref` supplied to `React.Fragment`.');\n          setCurrentlyValidatingElement$1(null);\n        }\n      }\n    }\n\n    function createElementWithValidation(type, props, children) {\n      var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n      // succeed and there will likely be errors in render.\n\n      if (!validType) {\n        var info = '';\n\n        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n          info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n        }\n\n        var sourceInfo = getSourceInfoErrorAddendumForProps(props);\n\n        if (sourceInfo) {\n          info += sourceInfo;\n        } else {\n          info += getDeclarationErrorAddendum();\n        }\n\n        var typeString;\n\n        if (type === null) {\n          typeString = 'null';\n        } else if (isArray(type)) {\n          typeString = 'array';\n        } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n          typeString = \"<\" + (getComponentNameFromType(type.type) || 'Unknown') + \" />\";\n          info = ' Did you accidentally export a JSX literal instead of a component?';\n        } else {\n          typeString = typeof type;\n        }\n\n        {\n          error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n        }\n      }\n\n      var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.\n      // TODO: Drop this when these are no longer allowed as the type argument.\n\n      if (element == null) {\n        return element;\n      } // Skip key warning if the type isn't valid since our key validation logic\n      // doesn't expect a non-string/function type and can throw confusing errors.\n      // We don't want exception behavior to differ between dev and prod.\n      // (Rendering will throw with a helpful message and as soon as the type is\n      // fixed, the key warnings will appear.)\n\n\n      if (validType) {\n        for (var i = 2; i < arguments.length; i++) {\n          validateChildKeys(arguments[i], type);\n        }\n      }\n\n      if (type === exports.Fragment) {\n        validateFragmentProps(element);\n      } else {\n        validatePropTypes(element);\n      }\n\n      return element;\n    }\n\n    var didWarnAboutDeprecatedCreateFactory = false;\n\n    function createFactoryWithValidation(type) {\n      var validatedFactory = createElementWithValidation.bind(null, type);\n      validatedFactory.type = type;\n      {\n        if (!didWarnAboutDeprecatedCreateFactory) {\n          didWarnAboutDeprecatedCreateFactory = true;\n          warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');\n        } // Legacy hook: remove it\n\n\n        Object.defineProperty(validatedFactory, 'type', {\n          enumerable: false,\n          get: function () {\n            warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');\n            Object.defineProperty(this, 'type', {\n              value: type\n            });\n            return type;\n          }\n        });\n      }\n      return validatedFactory;\n    }\n\n    function cloneElementWithValidation(element, props, children) {\n      var newElement = cloneElement.apply(this, arguments);\n\n      for (var i = 2; i < arguments.length; i++) {\n        validateChildKeys(arguments[i], newElement.type);\n      }\n\n      validatePropTypes(newElement);\n      return newElement;\n    }\n\n    function createMutableSource(source, getVersion) {\n      var mutableSource = {\n        _getVersion: getVersion,\n        _source: source,\n        _workInProgressVersionPrimary: null,\n        _workInProgressVersionSecondary: null\n      };\n      {\n        mutableSource._currentPrimaryRenderer = null;\n        mutableSource._currentSecondaryRenderer = null; // Used to detect side effects that update a mutable source during render.\n        // See https://github.com/facebook/react/issues/19948\n\n        mutableSource._currentlyRenderingFiber = null;\n        mutableSource._initialVersionAsOfFirstRender = null;\n      }\n      return mutableSource;\n    }\n\n    function startTransition(scope) {\n      var prevTransition = ReactCurrentBatchConfig.transition;\n      ReactCurrentBatchConfig.transition = 1;\n\n      try {\n        scope();\n      } finally {\n        ReactCurrentBatchConfig.transition = prevTransition;\n        {\n          if (prevTransition !== 1 && warnOnSubscriptionInsideStartTransition && ReactCurrentBatchConfig._updatedFibers) {\n            var updatedFibersCount = ReactCurrentBatchConfig._updatedFibers.size;\n\n            if (updatedFibersCount > 10) {\n              warn('Detected a large number of updates inside startTransition. ' + 'If this is due to a subscription please re-write it to use React provided hooks. ' + 'Otherwise concurrent mode guarantees are off the table.');\n            }\n\n            ReactCurrentBatchConfig._updatedFibers.clear();\n          }\n        }\n      }\n    }\n\n    var didWarnAboutMessageChannel = false;\n    var enqueueTaskImpl = null;\n\n    function enqueueTask(task) {\n      if (enqueueTaskImpl === null) {\n        try {\n          // read require off the module object to get around the bundlers.\n          // we don't want them to detect a require and bundle a Node polyfill.\n          var requireString = ('require' + Math.random()).slice(0, 7);\n          var nodeRequire = module && module[requireString]; // assuming we're in node, let's try to get node's\n          // version of setImmediate, bypassing fake timers if any.\n\n          enqueueTaskImpl = nodeRequire.call(module, 'timers').setImmediate;\n        } catch (_err) {\n          // we're in a browser\n          // we can't use regular timers because they may still be faked\n          // so we try MessageChannel+postMessage instead\n          enqueueTaskImpl = function (callback) {\n            {\n              if (didWarnAboutMessageChannel === false) {\n                didWarnAboutMessageChannel = true;\n\n                if (typeof MessageChannel === 'undefined') {\n                  error('This browser does not have a MessageChannel implementation, ' + 'so enqueuing tasks via await act(async () => ...) will fail. ' + 'Please file an issue at https://github.com/facebook/react/issues ' + 'if you encounter this warning.');\n                }\n              }\n            }\n            var channel = new MessageChannel();\n            channel.port1.onmessage = callback;\n            channel.port2.postMessage(undefined);\n          };\n        }\n      }\n\n      return enqueueTaskImpl(task);\n    }\n\n    var actScopeDepth = 0;\n    var didWarnNoAwaitAct = false;\n\n    function act(callback) {\n      {\n        // `act` calls can be nested, so we track the depth. This represents the\n        // number of `act` scopes on the stack.\n        var prevActScopeDepth = actScopeDepth;\n        actScopeDepth++;\n\n        if (ReactCurrentActQueue.current === null) {\n          // This is the outermost `act` scope. Initialize the queue. The reconciler\n          // will detect the queue and use it instead of Scheduler.\n          ReactCurrentActQueue.current = [];\n        }\n\n        var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;\n        var result;\n\n        try {\n          // Used to reproduce behavior of `batchedUpdates` in legacy mode. Only\n          // set to `true` while the given callback is executed, not for updates\n          // triggered during an async event, because this is how the legacy\n          // implementation of `act` behaved.\n          ReactCurrentActQueue.isBatchingLegacy = true;\n          result = callback(); // Replicate behavior of original `act` implementation in legacy mode,\n          // which flushed updates immediately after the scope function exits, even\n          // if it's an async function.\n\n          if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {\n            var queue = ReactCurrentActQueue.current;\n\n            if (queue !== null) {\n              ReactCurrentActQueue.didScheduleLegacyUpdate = false;\n              flushActQueue(queue);\n            }\n          }\n        } catch (error) {\n          popActScope(prevActScopeDepth);\n          throw error;\n        } finally {\n          ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;\n        }\n\n        if (result !== null && typeof result === 'object' && typeof result.then === 'function') {\n          var thenableResult = result; // The callback is an async function (i.e. returned a promise). Wait\n          // for it to resolve before exiting the current scope.\n\n          var wasAwaited = false;\n          var thenable = {\n            then: function (resolve, reject) {\n              wasAwaited = true;\n              thenableResult.then(function (returnValue) {\n                popActScope(prevActScopeDepth);\n\n                if (actScopeDepth === 0) {\n                  // We've exited the outermost act scope. Recursively flush the\n                  // queue until there's no remaining work.\n                  recursivelyFlushAsyncActWork(returnValue, resolve, reject);\n                } else {\n                  resolve(returnValue);\n                }\n              }, function (error) {\n                // The callback threw an error.\n                popActScope(prevActScopeDepth);\n                reject(error);\n              });\n            }\n          };\n          {\n            if (!didWarnNoAwaitAct && typeof Promise !== 'undefined') {\n              // eslint-disable-next-line no-undef\n              Promise.resolve().then(function () {}).then(function () {\n                if (!wasAwaited) {\n                  didWarnNoAwaitAct = true;\n                  error('You called act(async () => ...) without await. ' + 'This could lead to unexpected testing behaviour, ' + 'interleaving multiple act calls and mixing their ' + 'scopes. ' + 'You should - await act(async () => ...);');\n                }\n              });\n            }\n          }\n          return thenable;\n        } else {\n          var returnValue = result; // The callback is not an async function. Exit the current scope\n          // immediately, without awaiting.\n\n          popActScope(prevActScopeDepth);\n\n          if (actScopeDepth === 0) {\n            // Exiting the outermost act scope. Flush the queue.\n            var _queue = ReactCurrentActQueue.current;\n\n            if (_queue !== null) {\n              flushActQueue(_queue);\n              ReactCurrentActQueue.current = null;\n            } // Return a thenable. If the user awaits it, we'll flush again in\n            // case additional work was scheduled by a microtask.\n\n\n            var _thenable = {\n              then: function (resolve, reject) {\n                // Confirm we haven't re-entered another `act` scope, in case\n                // the user does something weird like await the thenable\n                // multiple times.\n                if (ReactCurrentActQueue.current === null) {\n                  // Recursively flush the queue until there's no remaining work.\n                  ReactCurrentActQueue.current = [];\n                  recursivelyFlushAsyncActWork(returnValue, resolve, reject);\n                } else {\n                  resolve(returnValue);\n                }\n              }\n            };\n            return _thenable;\n          } else {\n            // Since we're inside a nested `act` scope, the returned thenable\n            // immediately resolves. The outer scope will flush the queue.\n            var _thenable2 = {\n              then: function (resolve, reject) {\n                resolve(returnValue);\n              }\n            };\n            return _thenable2;\n          }\n        }\n      }\n    }\n\n    function popActScope(prevActScopeDepth) {\n      {\n        if (prevActScopeDepth !== actScopeDepth - 1) {\n          error('You seem to have overlapping act() calls, this is not supported. ' + 'Be sure to await previous act() calls before making a new one. ');\n        }\n\n        actScopeDepth = prevActScopeDepth;\n      }\n    }\n\n    function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {\n      {\n        var queue = ReactCurrentActQueue.current;\n\n        if (queue !== null) {\n          try {\n            flushActQueue(queue);\n            enqueueTask(function () {\n              if (queue.length === 0) {\n                // No additional work was scheduled. Finish.\n                ReactCurrentActQueue.current = null;\n                resolve(returnValue);\n              } else {\n                // Keep flushing work until there's none left.\n                recursivelyFlushAsyncActWork(returnValue, resolve, reject);\n              }\n            });\n          } catch (error) {\n            reject(error);\n          }\n        } else {\n          resolve(returnValue);\n        }\n      }\n    }\n\n    var isFlushing = false;\n\n    function flushActQueue(queue) {\n      {\n        if (!isFlushing) {\n          // Prevent re-entrance.\n          isFlushing = true;\n          var i = 0;\n\n          try {\n            for (; i < queue.length; i++) {\n              var callback = queue[i];\n\n              do {\n                callback = callback(true);\n              } while (callback !== null);\n            }\n\n            queue.length = 0;\n          } catch (error) {\n            // If something throws, leave the remaining callbacks on the queue.\n            queue = queue.slice(i + 1);\n            throw error;\n          } finally {\n            isFlushing = false;\n          }\n        }\n      }\n    }\n\n    var createElement$1 = createElementWithValidation;\n    var cloneElement$1 = cloneElementWithValidation;\n    var createFactory = createFactoryWithValidation;\n    var Children = {\n      map: mapChildren,\n      forEach: forEachChildren,\n      count: countChildren,\n      toArray: toArray,\n      only: onlyChild\n    };\n    exports.Children = Children;\n    exports.Component = Component;\n    exports.PureComponent = PureComponent;\n    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;\n    exports.cloneElement = cloneElement$1;\n    exports.createContext = createContext;\n    exports.createElement = createElement$1;\n    exports.createFactory = createFactory;\n    exports.createRef = createRef;\n    exports.forwardRef = forwardRef;\n    exports.isValidElement = isValidElement;\n    exports.lazy = lazy;\n    exports.memo = memo;\n    exports.startTransition = startTransition;\n    exports.unstable_act = act;\n    exports.unstable_createMutableSource = createMutableSource;\n    exports.unstable_getCacheForType = getCacheForType;\n    exports.unstable_getCacheSignal = getCacheSignal;\n    exports.unstable_useCacheRefresh = useCacheRefresh;\n    exports.useCallback = useCallback;\n    exports.useContext = useContext;\n    exports.useDebugValue = useDebugValue;\n    exports.useDeferredValue = useDeferredValue;\n    exports.useEffect = useEffect;\n    exports.useId = useId;\n    exports.useImperativeHandle = useImperativeHandle;\n    exports.useInsertionEffect = useInsertionEffect;\n    exports.useLayoutEffect = useLayoutEffect;\n    exports.useMemo = useMemo;\n    exports.useReducer = useReducer;\n    exports.useRef = useRef;\n    exports.useState = useState;\n    exports.useSyncExternalStore = useSyncExternalStore;\n    exports.useTransition = useTransition;\n    exports.version = ReactVersion;\n    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n\n    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === 'function') {\n      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());\n    }\n  })();\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../node_modules/webpack/buildin/module.js */ \"../../node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../build/oss-experimental/react/cjs/react.development.js\n");

/***/ }),

/***/ "../../build/oss-experimental/react/index.js":
/*!**********************************************************************!*\
  !*** /home/pomber/p/dev/react/build/oss-experimental/react/index.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react.development.js */ \"../../build/oss-experimental/react/cjs/react.development.js\");\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vYnVpbGQvb3NzLWV4cGVyaW1lbnRhbC9yZWFjdC9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8vaG9tZS9wb21iZXIvcC9kZXYvcmVhY3QvYnVpbGQvb3NzLWV4cGVyaW1lbnRhbC9yZWFjdC9pbmRleC5qcz84YTA0Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0EsYUFFQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../build/oss-experimental/react/index.js\n");

/***/ }),

/***/ "../../node_modules/clipboard-js/clipboard.js":
/*!***********************************************************************!*\
  !*** /home/pomber/p/dev/react/node_modules/clipboard-js/clipboard.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("//  Import support https://stackoverflow.com/questions/13673346/supporting-both-commonjs-and-amd\n(function (name, definition) {\n  if (true) {\n    module.exports = definition();\n  } else {}\n})(\"clipboard\", function () {\n  if (typeof document === 'undefined' || !document.addEventListener) {\n    return null;\n  }\n\n  var clipboard = {};\n\n  clipboard.copy = function () {\n    var _intercept = false;\n    var _data = null; // Map from data type (e.g. \"text/html\") to value.\n\n    var _bogusSelection = false;\n\n    function cleanup() {\n      _intercept = false;\n      _data = null;\n\n      if (_bogusSelection) {\n        window.getSelection().removeAllRanges();\n      }\n\n      _bogusSelection = false;\n    }\n\n    document.addEventListener(\"copy\", function (e) {\n      if (_intercept) {\n        for (var key in _data) {\n          e.clipboardData.setData(key, _data[key]);\n        }\n\n        e.preventDefault();\n      }\n    }); // Workaround for Safari: https://bugs.webkit.org/show_bug.cgi?id=156529\n\n    function bogusSelect() {\n      var sel = document.getSelection(); // If \"nothing\" is selected...\n\n      if (!document.queryCommandEnabled(\"copy\") && sel.isCollapsed) {\n        // ... temporarily select the entire body.\n        //\n        // We select the entire body because:\n        // - it's guaranteed to exist,\n        // - it works (unlike, say, document.head, or phantom element that is\n        //   not inserted into the DOM),\n        // - it doesn't seem to flicker (due to the synchronous copy event), and\n        // - it avoids modifying the DOM (can trigger mutation observers).\n        //\n        // Because we can't do proper feature detection (we already checked\n        // document.queryCommandEnabled(\"copy\") , which actually gives a false\n        // negative for Blink when nothing is selected) and UA sniffing is not\n        // reliable (a lot of UA strings contain \"Safari\"), this will also\n        // happen for some browsers other than Safari. :-()\n        var range = document.createRange();\n        range.selectNodeContents(document.body);\n        sel.removeAllRanges();\n        sel.addRange(range);\n        _bogusSelection = true;\n      }\n    }\n\n    ;\n    return function (data) {\n      return new Promise(function (resolve, reject) {\n        _intercept = true;\n\n        if (typeof data === \"string\") {\n          _data = {\n            \"text/plain\": data\n          };\n        } else if (data instanceof Node) {\n          _data = {\n            \"text/html\": new XMLSerializer().serializeToString(data)\n          };\n        } else if (data instanceof Object) {\n          _data = data;\n        } else {\n          reject(\"Invalid data type. Must be string, DOM node, or an object mapping MIME types to strings.\");\n        }\n\n        function triggerCopy(tryBogusSelect) {\n          try {\n            if (document.execCommand(\"copy\")) {\n              // document.execCommand is synchronous: http://www.w3.org/TR/2015/WD-clipboard-apis-20150421/#integration-with-rich-text-editing-apis\n              // So we can call resolve() back here.\n              cleanup();\n              resolve();\n            } else {\n              if (!tryBogusSelect) {\n                bogusSelect();\n                triggerCopy(true);\n              } else {\n                cleanup();\n                throw new Error(\"Unable to copy. Perhaps it's not available in your browser?\");\n              }\n            }\n          } catch (e) {\n            cleanup();\n            reject(e);\n          }\n        }\n\n        triggerCopy(false);\n      });\n    };\n  }();\n\n  clipboard.paste = function () {\n    var _intercept = false;\n\n    var _resolve;\n\n    var _dataType;\n\n    document.addEventListener(\"paste\", function (e) {\n      if (_intercept) {\n        _intercept = false;\n        e.preventDefault();\n        var resolve = _resolve;\n        _resolve = null;\n        resolve(e.clipboardData.getData(_dataType));\n      }\n    });\n    return function (dataType) {\n      return new Promise(function (resolve, reject) {\n        _intercept = true;\n        _resolve = resolve;\n        _dataType = dataType || \"text/plain\";\n\n        try {\n          if (!document.execCommand(\"paste\")) {\n            _intercept = false;\n            reject(new Error(\"Unable to paste. Pasting only works in Internet Explorer at the moment.\"));\n          }\n        } catch (e) {\n          _intercept = false;\n          reject(new Error(e));\n        }\n      });\n    };\n  }(); // Handle IE behaviour.\n\n\n  if (typeof ClipboardEvent === \"undefined\" && typeof window.clipboardData !== \"undefined\" && typeof window.clipboardData.setData !== \"undefined\") {\n    /*! promise-polyfill 2.0.1 */\n    (function (a) {\n      function b(a, b) {\n        return function () {\n          a.apply(b, arguments);\n        };\n      }\n\n      function c(a) {\n        if (\"object\" != typeof this) throw new TypeError(\"Promises must be constructed via new\");\n        if (\"function\" != typeof a) throw new TypeError(\"not a function\");\n        this._state = null, this._value = null, this._deferreds = [], i(a, b(e, this), b(f, this));\n      }\n\n      function d(a) {\n        var b = this;\n        return null === this._state ? void this._deferreds.push(a) : void j(function () {\n          var c = b._state ? a.onFulfilled : a.onRejected;\n          if (null === c) return void (b._state ? a.resolve : a.reject)(b._value);\n          var d;\n\n          try {\n            d = c(b._value);\n          } catch (e) {\n            return void a.reject(e);\n          }\n\n          a.resolve(d);\n        });\n      }\n\n      function e(a) {\n        try {\n          if (a === this) throw new TypeError(\"A promise cannot be resolved with itself.\");\n\n          if (a && (\"object\" == typeof a || \"function\" == typeof a)) {\n            var c = a.then;\n            if (\"function\" == typeof c) return void i(b(c, a), b(e, this), b(f, this));\n          }\n\n          this._state = !0, this._value = a, g.call(this);\n        } catch (d) {\n          f.call(this, d);\n        }\n      }\n\n      function f(a) {\n        this._state = !1, this._value = a, g.call(this);\n      }\n\n      function g() {\n        for (var a = 0, b = this._deferreds.length; b > a; a++) d.call(this, this._deferreds[a]);\n\n        this._deferreds = null;\n      }\n\n      function h(a, b, c, d) {\n        this.onFulfilled = \"function\" == typeof a ? a : null, this.onRejected = \"function\" == typeof b ? b : null, this.resolve = c, this.reject = d;\n      }\n\n      function i(a, b, c) {\n        var d = !1;\n\n        try {\n          a(function (a) {\n            d || (d = !0, b(a));\n          }, function (a) {\n            d || (d = !0, c(a));\n          });\n        } catch (e) {\n          if (d) return;\n          d = !0, c(e);\n        }\n      }\n\n      var j = c.immediateFn || \"function\" == typeof setImmediate && setImmediate || function (a) {\n        setTimeout(a, 1);\n      },\n          k = Array.isArray || function (a) {\n        return \"[object Array]\" === Object.prototype.toString.call(a);\n      };\n\n      c.prototype[\"catch\"] = function (a) {\n        return this.then(null, a);\n      }, c.prototype.then = function (a, b) {\n        var e = this;\n        return new c(function (c, f) {\n          d.call(e, new h(a, b, c, f));\n        });\n      }, c.all = function () {\n        var a = Array.prototype.slice.call(1 === arguments.length && k(arguments[0]) ? arguments[0] : arguments);\n        return new c(function (b, c) {\n          function d(f, g) {\n            try {\n              if (g && (\"object\" == typeof g || \"function\" == typeof g)) {\n                var h = g.then;\n                if (\"function\" == typeof h) return void h.call(g, function (a) {\n                  d(f, a);\n                }, c);\n              }\n\n              a[f] = g, 0 === --e && b(a);\n            } catch (i) {\n              c(i);\n            }\n          }\n\n          if (0 === a.length) return b([]);\n\n          for (var e = a.length, f = 0; f < a.length; f++) d(f, a[f]);\n        });\n      }, c.resolve = function (a) {\n        return a && \"object\" == typeof a && a.constructor === c ? a : new c(function (b) {\n          b(a);\n        });\n      }, c.reject = function (a) {\n        return new c(function (b, c) {\n          c(a);\n        });\n      }, c.race = function (a) {\n        return new c(function (b, c) {\n          for (var d = 0, e = a.length; e > d; d++) a[d].then(b, c);\n        });\n      },  true && module.exports ? module.exports = c : a.Promise || (a.Promise = c);\n    })(this);\n\n    clipboard.copy = function (data) {\n      return new Promise(function (resolve, reject) {\n        // IE supports string and URL types: https://msdn.microsoft.com/en-us/library/ms536744(v=vs.85).aspx\n        // We only support the string type for now.\n        if (typeof data !== \"string\" && !(\"text/plain\" in data)) {\n          throw new Error(\"You must provide a text/plain type.\");\n        }\n\n        var strData = typeof data === \"string\" ? data : data[\"text/plain\"];\n        var copySucceeded = window.clipboardData.setData(\"Text\", strData);\n\n        if (copySucceeded) {\n          resolve();\n        } else {\n          reject(new Error(\"Copying was rejected.\"));\n        }\n      });\n    };\n\n    clipboard.paste = function () {\n      return new Promise(function (resolve, reject) {\n        var strData = window.clipboardData.getData(\"Text\");\n\n        if (strData) {\n          resolve(strData);\n        } else {\n          // The user rejected the paste request.\n          reject(new Error(\"Pasting was rejected.\"));\n        }\n      });\n    };\n  }\n\n  return clipboard;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/clipboard-js/clipboard.js\n");

/***/ }),

/***/ "../../node_modules/error-stack-parser/error-stack-parser.js":
/*!**************************************************************************************!*\
  !*** /home/pomber/p/dev/react/node_modules/error-stack-parser/error-stack-parser.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {\n  'use strict'; // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.\n\n  /* istanbul ignore next */\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! stackframe */ \"../../node_modules/stackframe/stackframe.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(this, function ErrorStackParser(StackFrame) {\n  'use strict';\n\n  var FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\\S+:\\d+/;\n  var CHROME_IE_STACK_REGEXP = /^\\s*at .*(\\S+:\\d+|\\(native\\))/m;\n  var SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\\[native code])?$/;\n  return {\n    /**\n     * Given an Error object, extract the most information from it.\n     *\n     * @param {Error} error object\n     * @return {Array} of StackFrames\n     */\n    parse: function ErrorStackParser$$parse(error) {\n      if (typeof error.stacktrace !== 'undefined' || typeof error['opera#sourceloc'] !== 'undefined') {\n        return this.parseOpera(error);\n      } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {\n        return this.parseV8OrIE(error);\n      } else if (error.stack) {\n        return this.parseFFOrSafari(error);\n      } else {\n        throw new Error('Cannot parse given Error object');\n      }\n    },\n    // Separate line and column numbers from a string of the form: (URI:Line:Column)\n    extractLocation: function ErrorStackParser$$extractLocation(urlLike) {\n      // Fail-fast but return locations like \"(native)\"\n      if (urlLike.indexOf(':') === -1) {\n        return [urlLike];\n      }\n\n      var regExp = /(.+?)(?::(\\d+))?(?::(\\d+))?$/;\n      var parts = regExp.exec(urlLike.replace(/[()]/g, ''));\n      return [parts[1], parts[2] || undefined, parts[3] || undefined];\n    },\n    parseV8OrIE: function ErrorStackParser$$parseV8OrIE(error) {\n      var filtered = error.stack.split('\\n').filter(function (line) {\n        return !!line.match(CHROME_IE_STACK_REGEXP);\n      }, this);\n      return filtered.map(function (line) {\n        if (line.indexOf('(eval ') > -1) {\n          // Throw away eval information until we implement stacktrace.js/stackframe#8\n          line = line.replace(/eval code/g, 'eval').replace(/(\\(eval at [^()]*)|(\\),.*$)/g, '');\n        }\n\n        var sanitizedLine = line.replace(/^\\s+/, '').replace(/\\(eval code/g, '('); // capture and preseve the parenthesized location \"(/foo/my bar.js:12:87)\" in\n        // case it has spaces in it, as the string is split on \\s+ later on\n\n        var location = sanitizedLine.match(/ (\\((.+):(\\d+):(\\d+)\\)$)/); // remove the parenthesized location from the line, if it was matched\n\n        sanitizedLine = location ? sanitizedLine.replace(location[0], '') : sanitizedLine;\n        var tokens = sanitizedLine.split(/\\s+/).slice(1); // if a location was matched, pass it to extractLocation() otherwise pop the last token\n\n        var locationParts = this.extractLocation(location ? location[1] : tokens.pop());\n        var functionName = tokens.join(' ') || undefined;\n        var fileName = ['eval', '<anonymous>'].indexOf(locationParts[0]) > -1 ? undefined : locationParts[0];\n        return new StackFrame({\n          functionName: functionName,\n          fileName: fileName,\n          lineNumber: locationParts[1],\n          columnNumber: locationParts[2],\n          source: line\n        });\n      }, this);\n    },\n    parseFFOrSafari: function ErrorStackParser$$parseFFOrSafari(error) {\n      var filtered = error.stack.split('\\n').filter(function (line) {\n        return !line.match(SAFARI_NATIVE_CODE_REGEXP);\n      }, this);\n      return filtered.map(function (line) {\n        // Throw away eval information until we implement stacktrace.js/stackframe#8\n        if (line.indexOf(' > eval') > -1) {\n          line = line.replace(/ line (\\d+)(?: > eval line \\d+)* > eval:\\d+:\\d+/g, ':$1');\n        }\n\n        if (line.indexOf('@') === -1 && line.indexOf(':') === -1) {\n          // Safari eval frames only have function names and nothing else\n          return new StackFrame({\n            functionName: line\n          });\n        } else {\n          var functionNameRegex = /((.*\".+\"[^@]*)?[^@]*)(?:@)/;\n          var matches = line.match(functionNameRegex);\n          var functionName = matches && matches[1] ? matches[1] : undefined;\n          var locationParts = this.extractLocation(line.replace(functionNameRegex, ''));\n          return new StackFrame({\n            functionName: functionName,\n            fileName: locationParts[0],\n            lineNumber: locationParts[1],\n            columnNumber: locationParts[2],\n            source: line\n          });\n        }\n      }, this);\n    },\n    parseOpera: function ErrorStackParser$$parseOpera(e) {\n      if (!e.stacktrace || e.message.indexOf('\\n') > -1 && e.message.split('\\n').length > e.stacktrace.split('\\n').length) {\n        return this.parseOpera9(e);\n      } else if (!e.stack) {\n        return this.parseOpera10(e);\n      } else {\n        return this.parseOpera11(e);\n      }\n    },\n    parseOpera9: function ErrorStackParser$$parseOpera9(e) {\n      var lineRE = /Line (\\d+).*script (?:in )?(\\S+)/i;\n      var lines = e.message.split('\\n');\n      var result = [];\n\n      for (var i = 2, len = lines.length; i < len; i += 2) {\n        var match = lineRE.exec(lines[i]);\n\n        if (match) {\n          result.push(new StackFrame({\n            fileName: match[2],\n            lineNumber: match[1],\n            source: lines[i]\n          }));\n        }\n      }\n\n      return result;\n    },\n    parseOpera10: function ErrorStackParser$$parseOpera10(e) {\n      var lineRE = /Line (\\d+).*script (?:in )?(\\S+)(?:: In function (\\S+))?$/i;\n      var lines = e.stacktrace.split('\\n');\n      var result = [];\n\n      for (var i = 0, len = lines.length; i < len; i += 2) {\n        var match = lineRE.exec(lines[i]);\n\n        if (match) {\n          result.push(new StackFrame({\n            functionName: match[3] || undefined,\n            fileName: match[2],\n            lineNumber: match[1],\n            source: lines[i]\n          }));\n        }\n      }\n\n      return result;\n    },\n    // Opera 10.65+ Error.stack very similar to FF/Safari\n    parseOpera11: function ErrorStackParser$$parseOpera11(error) {\n      var filtered = error.stack.split('\\n').filter(function (line) {\n        return !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/);\n      }, this);\n      return filtered.map(function (line) {\n        var tokens = line.split('@');\n        var locationParts = this.extractLocation(tokens.pop());\n        var functionCall = tokens.shift() || '';\n        var functionName = functionCall.replace(/<anonymous function(: (\\w+))?>/, '$2').replace(/\\([^)]*\\)/g, '') || undefined;\n        var argsRaw;\n\n        if (functionCall.match(/\\(([^)]*)\\)/)) {\n          argsRaw = functionCall.replace(/^[^(]+\\(([^)]*)\\)$/, '$1');\n        }\n\n        var args = argsRaw === undefined || argsRaw === '[arguments not available]' ? undefined : argsRaw.split(',');\n        return new StackFrame({\n          functionName: functionName,\n          args: args,\n          fileName: locationParts[0],\n          lineNumber: locationParts[1],\n          columnNumber: locationParts[2],\n          source: line\n        });\n      }, this);\n    }\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/error-stack-parser/error-stack-parser.js\n");

/***/ }),

/***/ "../../node_modules/lru-cache/index.js":
/*!****************************************************************!*\
  !*** /home/pomber/p/dev/react/node_modules/lru-cache/index.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // A linked list to keep track of recently-used-ness\n\nconst Yallist = __webpack_require__(/*! yallist */ \"../../node_modules/lru-cache/node_modules/yallist/yallist.js\");\n\nconst MAX = Symbol('max');\nconst LENGTH = Symbol('length');\nconst LENGTH_CALCULATOR = Symbol('lengthCalculator');\nconst ALLOW_STALE = Symbol('allowStale');\nconst MAX_AGE = Symbol('maxAge');\nconst DISPOSE = Symbol('dispose');\nconst NO_DISPOSE_ON_SET = Symbol('noDisposeOnSet');\nconst LRU_LIST = Symbol('lruList');\nconst CACHE = Symbol('cache');\nconst UPDATE_AGE_ON_GET = Symbol('updateAgeOnGet');\n\nconst naiveLength = () => 1; // lruList is a yallist where the head is the youngest\n// item, and the tail is the oldest.  the list contains the Hit\n// objects as the entries.\n// Each Hit object has a reference to its Yallist.Node.  This\n// never changes.\n//\n// cache is a Map (or PseudoMap) that matches the keys to\n// the Yallist.Node object.\n\n\nclass LRUCache {\n  constructor(options) {\n    if (typeof options === 'number') options = {\n      max: options\n    };\n    if (!options) options = {};\n    if (options.max && (typeof options.max !== 'number' || options.max < 0)) throw new TypeError('max must be a non-negative number'); // Kind of weird to have a default max of Infinity, but oh well.\n\n    const max = this[MAX] = options.max || Infinity;\n    const lc = options.length || naiveLength;\n    this[LENGTH_CALCULATOR] = typeof lc !== 'function' ? naiveLength : lc;\n    this[ALLOW_STALE] = options.stale || false;\n    if (options.maxAge && typeof options.maxAge !== 'number') throw new TypeError('maxAge must be a number');\n    this[MAX_AGE] = options.maxAge || 0;\n    this[DISPOSE] = options.dispose;\n    this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;\n    this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;\n    this.reset();\n  } // resize the cache when the max changes.\n\n\n  set max(mL) {\n    if (typeof mL !== 'number' || mL < 0) throw new TypeError('max must be a non-negative number');\n    this[MAX] = mL || Infinity;\n    trim(this);\n  }\n\n  get max() {\n    return this[MAX];\n  }\n\n  set allowStale(allowStale) {\n    this[ALLOW_STALE] = !!allowStale;\n  }\n\n  get allowStale() {\n    return this[ALLOW_STALE];\n  }\n\n  set maxAge(mA) {\n    if (typeof mA !== 'number') throw new TypeError('maxAge must be a non-negative number');\n    this[MAX_AGE] = mA;\n    trim(this);\n  }\n\n  get maxAge() {\n    return this[MAX_AGE];\n  } // resize the cache when the lengthCalculator changes.\n\n\n  set lengthCalculator(lC) {\n    if (typeof lC !== 'function') lC = naiveLength;\n\n    if (lC !== this[LENGTH_CALCULATOR]) {\n      this[LENGTH_CALCULATOR] = lC;\n      this[LENGTH] = 0;\n      this[LRU_LIST].forEach(hit => {\n        hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key);\n        this[LENGTH] += hit.length;\n      });\n    }\n\n    trim(this);\n  }\n\n  get lengthCalculator() {\n    return this[LENGTH_CALCULATOR];\n  }\n\n  get length() {\n    return this[LENGTH];\n  }\n\n  get itemCount() {\n    return this[LRU_LIST].length;\n  }\n\n  rforEach(fn, thisp) {\n    thisp = thisp || this;\n\n    for (let walker = this[LRU_LIST].tail; walker !== null;) {\n      const prev = walker.prev;\n      forEachStep(this, fn, walker, thisp);\n      walker = prev;\n    }\n  }\n\n  forEach(fn, thisp) {\n    thisp = thisp || this;\n\n    for (let walker = this[LRU_LIST].head; walker !== null;) {\n      const next = walker.next;\n      forEachStep(this, fn, walker, thisp);\n      walker = next;\n    }\n  }\n\n  keys() {\n    return this[LRU_LIST].toArray().map(k => k.key);\n  }\n\n  values() {\n    return this[LRU_LIST].toArray().map(k => k.value);\n  }\n\n  reset() {\n    if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) {\n      this[LRU_LIST].forEach(hit => this[DISPOSE](hit.key, hit.value));\n    }\n\n    this[CACHE] = new Map(); // hash of items by key\n\n    this[LRU_LIST] = new Yallist(); // list of items in order of use recency\n\n    this[LENGTH] = 0; // length of items in the list\n  }\n\n  dump() {\n    return this[LRU_LIST].map(hit => isStale(this, hit) ? false : {\n      k: hit.key,\n      v: hit.value,\n      e: hit.now + (hit.maxAge || 0)\n    }).toArray().filter(h => h);\n  }\n\n  dumpLru() {\n    return this[LRU_LIST];\n  }\n\n  set(key, value, maxAge) {\n    maxAge = maxAge || this[MAX_AGE];\n    if (maxAge && typeof maxAge !== 'number') throw new TypeError('maxAge must be a number');\n    const now = maxAge ? Date.now() : 0;\n    const len = this[LENGTH_CALCULATOR](value, key);\n\n    if (this[CACHE].has(key)) {\n      if (len > this[MAX]) {\n        del(this, this[CACHE].get(key));\n        return false;\n      }\n\n      const node = this[CACHE].get(key);\n      const item = node.value; // dispose of the old one before overwriting\n      // split out into 2 ifs for better coverage tracking\n\n      if (this[DISPOSE]) {\n        if (!this[NO_DISPOSE_ON_SET]) this[DISPOSE](key, item.value);\n      }\n\n      item.now = now;\n      item.maxAge = maxAge;\n      item.value = value;\n      this[LENGTH] += len - item.length;\n      item.length = len;\n      this.get(key);\n      trim(this);\n      return true;\n    }\n\n    const hit = new Entry(key, value, len, now, maxAge); // oversized objects fall out of cache automatically.\n\n    if (hit.length > this[MAX]) {\n      if (this[DISPOSE]) this[DISPOSE](key, value);\n      return false;\n    }\n\n    this[LENGTH] += hit.length;\n    this[LRU_LIST].unshift(hit);\n    this[CACHE].set(key, this[LRU_LIST].head);\n    trim(this);\n    return true;\n  }\n\n  has(key) {\n    if (!this[CACHE].has(key)) return false;\n    const hit = this[CACHE].get(key).value;\n    return !isStale(this, hit);\n  }\n\n  get(key) {\n    return get(this, key, true);\n  }\n\n  peek(key) {\n    return get(this, key, false);\n  }\n\n  pop() {\n    const node = this[LRU_LIST].tail;\n    if (!node) return null;\n    del(this, node);\n    return node.value;\n  }\n\n  del(key) {\n    del(this, this[CACHE].get(key));\n  }\n\n  load(arr) {\n    // reset the cache\n    this.reset();\n    const now = Date.now(); // A previous serialized cache has the most recent items first\n\n    for (let l = arr.length - 1; l >= 0; l--) {\n      const hit = arr[l];\n      const expiresAt = hit.e || 0;\n      if (expiresAt === 0) // the item was created without expiration in a non aged cache\n        this.set(hit.k, hit.v);else {\n        const maxAge = expiresAt - now; // dont add already expired items\n\n        if (maxAge > 0) {\n          this.set(hit.k, hit.v, maxAge);\n        }\n      }\n    }\n  }\n\n  prune() {\n    this[CACHE].forEach((value, key) => get(this, key, false));\n  }\n\n}\n\nconst get = (self, key, doUse) => {\n  const node = self[CACHE].get(key);\n\n  if (node) {\n    const hit = node.value;\n\n    if (isStale(self, hit)) {\n      del(self, node);\n      if (!self[ALLOW_STALE]) return undefined;\n    } else {\n      if (doUse) {\n        if (self[UPDATE_AGE_ON_GET]) node.value.now = Date.now();\n        self[LRU_LIST].unshiftNode(node);\n      }\n    }\n\n    return hit.value;\n  }\n};\n\nconst isStale = (self, hit) => {\n  if (!hit || !hit.maxAge && !self[MAX_AGE]) return false;\n  const diff = Date.now() - hit.now;\n  return hit.maxAge ? diff > hit.maxAge : self[MAX_AGE] && diff > self[MAX_AGE];\n};\n\nconst trim = self => {\n  if (self[LENGTH] > self[MAX]) {\n    for (let walker = self[LRU_LIST].tail; self[LENGTH] > self[MAX] && walker !== null;) {\n      // We know that we're about to delete this one, and also\n      // what the next least recently used key will be, so just\n      // go ahead and set it now.\n      const prev = walker.prev;\n      del(self, walker);\n      walker = prev;\n    }\n  }\n};\n\nconst del = (self, node) => {\n  if (node) {\n    const hit = node.value;\n    if (self[DISPOSE]) self[DISPOSE](hit.key, hit.value);\n    self[LENGTH] -= hit.length;\n    self[CACHE].delete(hit.key);\n    self[LRU_LIST].removeNode(node);\n  }\n};\n\nclass Entry {\n  constructor(key, value, length, now, maxAge) {\n    this.key = key;\n    this.value = value;\n    this.length = length;\n    this.now = now;\n    this.maxAge = maxAge || 0;\n  }\n\n}\n\nconst forEachStep = (self, fn, node, thisp) => {\n  let hit = node.value;\n\n  if (isStale(self, hit)) {\n    del(self, node);\n    if (!self[ALLOW_STALE]) hit = undefined;\n  }\n\n  if (hit) fn.call(thisp, hit.value, hit.key, self);\n};\n\nmodule.exports = LRUCache;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/lru-cache/index.js\n");

/***/ }),

/***/ "../../node_modules/lru-cache/node_modules/yallist/iterator.js":
/*!****************************************************************************************!*\
  !*** /home/pomber/p/dev/react/node_modules/lru-cache/node_modules/yallist/iterator.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = function (Yallist) {\n  Yallist.prototype[Symbol.iterator] = function* () {\n    for (let walker = this.head; walker; walker = walker.next) {\n      yield walker.value;\n    }\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL2xydS1jYWNoZS9ub2RlX21vZHVsZXMveWFsbGlzdC9pdGVyYXRvci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8vaG9tZS9wb21iZXIvcC9kZXYvcmVhY3Qvbm9kZV9tb2R1bGVzL2xydS1jYWNoZS9ub2RlX21vZHVsZXMveWFsbGlzdC9pdGVyYXRvci5qcz8wNjJhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoWWFsbGlzdCkge1xuICBZYWxsaXN0LnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24qICgpIHtcbiAgICBmb3IgKGxldCB3YWxrZXIgPSB0aGlzLmhlYWQ7IHdhbGtlcjsgd2Fsa2VyID0gd2Fsa2VyLm5leHQpIHtcbiAgICAgIHlpZWxkIHdhbGtlci52YWx1ZVxuICAgIH1cbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/lru-cache/node_modules/yallist/iterator.js\n");

/***/ }),

/***/ "../../node_modules/lru-cache/node_modules/yallist/yallist.js":
/*!***************************************************************************************!*\
  !*** /home/pomber/p/dev/react/node_modules/lru-cache/node_modules/yallist/yallist.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = Yallist;\nYallist.Node = Node;\nYallist.create = Yallist;\n\nfunction Yallist(list) {\n  var self = this;\n\n  if (!(self instanceof Yallist)) {\n    self = new Yallist();\n  }\n\n  self.tail = null;\n  self.head = null;\n  self.length = 0;\n\n  if (list && typeof list.forEach === 'function') {\n    list.forEach(function (item) {\n      self.push(item);\n    });\n  } else if (arguments.length > 0) {\n    for (var i = 0, l = arguments.length; i < l; i++) {\n      self.push(arguments[i]);\n    }\n  }\n\n  return self;\n}\n\nYallist.prototype.removeNode = function (node) {\n  if (node.list !== this) {\n    throw new Error('removing node which does not belong to this list');\n  }\n\n  var next = node.next;\n  var prev = node.prev;\n\n  if (next) {\n    next.prev = prev;\n  }\n\n  if (prev) {\n    prev.next = next;\n  }\n\n  if (node === this.head) {\n    this.head = next;\n  }\n\n  if (node === this.tail) {\n    this.tail = prev;\n  }\n\n  node.list.length--;\n  node.next = null;\n  node.prev = null;\n  node.list = null;\n  return next;\n};\n\nYallist.prototype.unshiftNode = function (node) {\n  if (node === this.head) {\n    return;\n  }\n\n  if (node.list) {\n    node.list.removeNode(node);\n  }\n\n  var head = this.head;\n  node.list = this;\n  node.next = head;\n\n  if (head) {\n    head.prev = node;\n  }\n\n  this.head = node;\n\n  if (!this.tail) {\n    this.tail = node;\n  }\n\n  this.length++;\n};\n\nYallist.prototype.pushNode = function (node) {\n  if (node === this.tail) {\n    return;\n  }\n\n  if (node.list) {\n    node.list.removeNode(node);\n  }\n\n  var tail = this.tail;\n  node.list = this;\n  node.prev = tail;\n\n  if (tail) {\n    tail.next = node;\n  }\n\n  this.tail = node;\n\n  if (!this.head) {\n    this.head = node;\n  }\n\n  this.length++;\n};\n\nYallist.prototype.push = function () {\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    push(this, arguments[i]);\n  }\n\n  return this.length;\n};\n\nYallist.prototype.unshift = function () {\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    unshift(this, arguments[i]);\n  }\n\n  return this.length;\n};\n\nYallist.prototype.pop = function () {\n  if (!this.tail) {\n    return undefined;\n  }\n\n  var res = this.tail.value;\n  this.tail = this.tail.prev;\n\n  if (this.tail) {\n    this.tail.next = null;\n  } else {\n    this.head = null;\n  }\n\n  this.length--;\n  return res;\n};\n\nYallist.prototype.shift = function () {\n  if (!this.head) {\n    return undefined;\n  }\n\n  var res = this.head.value;\n  this.head = this.head.next;\n\n  if (this.head) {\n    this.head.prev = null;\n  } else {\n    this.tail = null;\n  }\n\n  this.length--;\n  return res;\n};\n\nYallist.prototype.forEach = function (fn, thisp) {\n  thisp = thisp || this;\n\n  for (var walker = this.head, i = 0; walker !== null; i++) {\n    fn.call(thisp, walker.value, i, this);\n    walker = walker.next;\n  }\n};\n\nYallist.prototype.forEachReverse = function (fn, thisp) {\n  thisp = thisp || this;\n\n  for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {\n    fn.call(thisp, walker.value, i, this);\n    walker = walker.prev;\n  }\n};\n\nYallist.prototype.get = function (n) {\n  for (var i = 0, walker = this.head; walker !== null && i < n; i++) {\n    // abort out of the list early if we hit a cycle\n    walker = walker.next;\n  }\n\n  if (i === n && walker !== null) {\n    return walker.value;\n  }\n};\n\nYallist.prototype.getReverse = function (n) {\n  for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {\n    // abort out of the list early if we hit a cycle\n    walker = walker.prev;\n  }\n\n  if (i === n && walker !== null) {\n    return walker.value;\n  }\n};\n\nYallist.prototype.map = function (fn, thisp) {\n  thisp = thisp || this;\n  var res = new Yallist();\n\n  for (var walker = this.head; walker !== null;) {\n    res.push(fn.call(thisp, walker.value, this));\n    walker = walker.next;\n  }\n\n  return res;\n};\n\nYallist.prototype.mapReverse = function (fn, thisp) {\n  thisp = thisp || this;\n  var res = new Yallist();\n\n  for (var walker = this.tail; walker !== null;) {\n    res.push(fn.call(thisp, walker.value, this));\n    walker = walker.prev;\n  }\n\n  return res;\n};\n\nYallist.prototype.reduce = function (fn, initial) {\n  var acc;\n  var walker = this.head;\n\n  if (arguments.length > 1) {\n    acc = initial;\n  } else if (this.head) {\n    walker = this.head.next;\n    acc = this.head.value;\n  } else {\n    throw new TypeError('Reduce of empty list with no initial value');\n  }\n\n  for (var i = 0; walker !== null; i++) {\n    acc = fn(acc, walker.value, i);\n    walker = walker.next;\n  }\n\n  return acc;\n};\n\nYallist.prototype.reduceReverse = function (fn, initial) {\n  var acc;\n  var walker = this.tail;\n\n  if (arguments.length > 1) {\n    acc = initial;\n  } else if (this.tail) {\n    walker = this.tail.prev;\n    acc = this.tail.value;\n  } else {\n    throw new TypeError('Reduce of empty list with no initial value');\n  }\n\n  for (var i = this.length - 1; walker !== null; i--) {\n    acc = fn(acc, walker.value, i);\n    walker = walker.prev;\n  }\n\n  return acc;\n};\n\nYallist.prototype.toArray = function () {\n  var arr = new Array(this.length);\n\n  for (var i = 0, walker = this.head; walker !== null; i++) {\n    arr[i] = walker.value;\n    walker = walker.next;\n  }\n\n  return arr;\n};\n\nYallist.prototype.toArrayReverse = function () {\n  var arr = new Array(this.length);\n\n  for (var i = 0, walker = this.tail; walker !== null; i++) {\n    arr[i] = walker.value;\n    walker = walker.prev;\n  }\n\n  return arr;\n};\n\nYallist.prototype.slice = function (from, to) {\n  to = to || this.length;\n\n  if (to < 0) {\n    to += this.length;\n  }\n\n  from = from || 0;\n\n  if (from < 0) {\n    from += this.length;\n  }\n\n  var ret = new Yallist();\n\n  if (to < from || to < 0) {\n    return ret;\n  }\n\n  if (from < 0) {\n    from = 0;\n  }\n\n  if (to > this.length) {\n    to = this.length;\n  }\n\n  for (var i = 0, walker = this.head; walker !== null && i < from; i++) {\n    walker = walker.next;\n  }\n\n  for (; walker !== null && i < to; i++, walker = walker.next) {\n    ret.push(walker.value);\n  }\n\n  return ret;\n};\n\nYallist.prototype.sliceReverse = function (from, to) {\n  to = to || this.length;\n\n  if (to < 0) {\n    to += this.length;\n  }\n\n  from = from || 0;\n\n  if (from < 0) {\n    from += this.length;\n  }\n\n  var ret = new Yallist();\n\n  if (to < from || to < 0) {\n    return ret;\n  }\n\n  if (from < 0) {\n    from = 0;\n  }\n\n  if (to > this.length) {\n    to = this.length;\n  }\n\n  for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {\n    walker = walker.prev;\n  }\n\n  for (; walker !== null && i > from; i--, walker = walker.prev) {\n    ret.push(walker.value);\n  }\n\n  return ret;\n};\n\nYallist.prototype.splice = function (start, deleteCount\n/*, ...nodes */\n) {\n  if (start > this.length) {\n    start = this.length - 1;\n  }\n\n  if (start < 0) {\n    start = this.length + start;\n  }\n\n  for (var i = 0, walker = this.head; walker !== null && i < start; i++) {\n    walker = walker.next;\n  }\n\n  var ret = [];\n\n  for (var i = 0; walker && i < deleteCount; i++) {\n    ret.push(walker.value);\n    walker = this.removeNode(walker);\n  }\n\n  if (walker === null) {\n    walker = this.tail;\n  }\n\n  if (walker !== this.head && walker !== this.tail) {\n    walker = walker.prev;\n  }\n\n  for (var i = 2; i < arguments.length; i++) {\n    walker = insert(this, walker, arguments[i]);\n  }\n\n  return ret;\n};\n\nYallist.prototype.reverse = function () {\n  var head = this.head;\n  var tail = this.tail;\n\n  for (var walker = head; walker !== null; walker = walker.prev) {\n    var p = walker.prev;\n    walker.prev = walker.next;\n    walker.next = p;\n  }\n\n  this.head = tail;\n  this.tail = head;\n  return this;\n};\n\nfunction insert(self, node, value) {\n  var inserted = node === self.head ? new Node(value, null, node, self) : new Node(value, node, node.next, self);\n\n  if (inserted.next === null) {\n    self.tail = inserted;\n  }\n\n  if (inserted.prev === null) {\n    self.head = inserted;\n  }\n\n  self.length++;\n  return inserted;\n}\n\nfunction push(self, item) {\n  self.tail = new Node(item, self.tail, null, self);\n\n  if (!self.head) {\n    self.head = self.tail;\n  }\n\n  self.length++;\n}\n\nfunction unshift(self, item) {\n  self.head = new Node(item, null, self.head, self);\n\n  if (!self.tail) {\n    self.tail = self.head;\n  }\n\n  self.length++;\n}\n\nfunction Node(value, prev, next, list) {\n  if (!(this instanceof Node)) {\n    return new Node(value, prev, next, list);\n  }\n\n  this.list = list;\n  this.value = value;\n\n  if (prev) {\n    prev.next = this;\n    this.prev = prev;\n  } else {\n    this.prev = null;\n  }\n\n  if (next) {\n    next.prev = this;\n    this.next = next;\n  } else {\n    this.next = null;\n  }\n}\n\ntry {\n  // add if support for Symbol.iterator is present\n  __webpack_require__(/*! ./iterator.js */ \"../../node_modules/lru-cache/node_modules/yallist/iterator.js\")(Yallist);\n} catch (er) {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/lru-cache/node_modules/yallist/yallist.js\n");

/***/ }),

/***/ "../../node_modules/object-assign/index.js":
/*!********************************************************************!*\
  !*** /home/pomber/p/dev/react/node_modules/object-assign/index.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n/* eslint-disable no-unused-vars */\n\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n  if (val === null || val === undefined) {\n    throw new TypeError('Object.assign cannot be called with null or undefined');\n  }\n\n  return Object(val);\n}\n\nfunction shouldUseNative() {\n  try {\n    if (!Object.assign) {\n      return false;\n    } // Detect buggy property enumeration order in older V8 versions.\n    // https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\n\n    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers\n\n    test1[5] = 'de';\n\n    if (Object.getOwnPropertyNames(test1)[0] === '5') {\n      return false;\n    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\n\n    var test2 = {};\n\n    for (var i = 0; i < 10; i++) {\n      test2['_' + String.fromCharCode(i)] = i;\n    }\n\n    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n      return test2[n];\n    });\n\n    if (order2.join('') !== '0123456789') {\n      return false;\n    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\n\n    var test3 = {};\n    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n      test3[letter] = letter;\n    });\n\n    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {\n      return false;\n    }\n\n    return true;\n  } catch (err) {\n    // We don't expect any of the above to throw, but better to be safe.\n    return false;\n  }\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n  var from;\n  var to = toObject(target);\n  var symbols;\n\n  for (var s = 1; s < arguments.length; s++) {\n    from = Object(arguments[s]);\n\n    for (var key in from) {\n      if (hasOwnProperty.call(from, key)) {\n        to[key] = from[key];\n      }\n    }\n\n    if (getOwnPropertySymbols) {\n      symbols = getOwnPropertySymbols(from);\n\n      for (var i = 0; i < symbols.length; i++) {\n        if (propIsEnumerable.call(from, symbols[i])) {\n          to[symbols[i]] = from[symbols[i]];\n        }\n      }\n    }\n  }\n\n  return to;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvcG9tYmVyL3AvZGV2L3JlYWN0L25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzP2E0NTIiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQURBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/object-assign/index.js\n");

/***/ }),

/***/ "../../node_modules/process/browser.js":
/*!****************************************************************!*\
  !*** /home/pomber/p/dev/react/node_modules/process/browser.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {}; // cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n  throw new Error('setTimeout has not been defined');\n}\n\nfunction defaultClearTimeout() {\n  throw new Error('clearTimeout has not been defined');\n}\n\n(function () {\n  try {\n    if (typeof setTimeout === 'function') {\n      cachedSetTimeout = setTimeout;\n    } else {\n      cachedSetTimeout = defaultSetTimout;\n    }\n  } catch (e) {\n    cachedSetTimeout = defaultSetTimout;\n  }\n\n  try {\n    if (typeof clearTimeout === 'function') {\n      cachedClearTimeout = clearTimeout;\n    } else {\n      cachedClearTimeout = defaultClearTimeout;\n    }\n  } catch (e) {\n    cachedClearTimeout = defaultClearTimeout;\n  }\n})();\n\nfunction runTimeout(fun) {\n  if (cachedSetTimeout === setTimeout) {\n    //normal enviroments in sane situations\n    return setTimeout(fun, 0);\n  } // if setTimeout wasn't available but was latter defined\n\n\n  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n    cachedSetTimeout = setTimeout;\n    return setTimeout(fun, 0);\n  }\n\n  try {\n    // when when somebody has screwed with setTimeout but no I.E. maddness\n    return cachedSetTimeout(fun, 0);\n  } catch (e) {\n    try {\n      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n      return cachedSetTimeout.call(null, fun, 0);\n    } catch (e) {\n      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n      return cachedSetTimeout.call(this, fun, 0);\n    }\n  }\n}\n\nfunction runClearTimeout(marker) {\n  if (cachedClearTimeout === clearTimeout) {\n    //normal enviroments in sane situations\n    return clearTimeout(marker);\n  } // if clearTimeout wasn't available but was latter defined\n\n\n  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n    cachedClearTimeout = clearTimeout;\n    return clearTimeout(marker);\n  }\n\n  try {\n    // when when somebody has screwed with setTimeout but no I.E. maddness\n    return cachedClearTimeout(marker);\n  } catch (e) {\n    try {\n      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n      return cachedClearTimeout.call(null, marker);\n    } catch (e) {\n      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n      // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n      return cachedClearTimeout.call(this, marker);\n    }\n  }\n}\n\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n  if (!draining || !currentQueue) {\n    return;\n  }\n\n  draining = false;\n\n  if (currentQueue.length) {\n    queue = currentQueue.concat(queue);\n  } else {\n    queueIndex = -1;\n  }\n\n  if (queue.length) {\n    drainQueue();\n  }\n}\n\nfunction drainQueue() {\n  if (draining) {\n    return;\n  }\n\n  var timeout = runTimeout(cleanUpNextTick);\n  draining = true;\n  var len = queue.length;\n\n  while (len) {\n    currentQueue = queue;\n    queue = [];\n\n    while (++queueIndex < len) {\n      if (currentQueue) {\n        currentQueue[queueIndex].run();\n      }\n    }\n\n    queueIndex = -1;\n    len = queue.length;\n  }\n\n  currentQueue = null;\n  draining = false;\n  runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n  var args = new Array(arguments.length - 1);\n\n  if (arguments.length > 1) {\n    for (var i = 1; i < arguments.length; i++) {\n      args[i - 1] = arguments[i];\n    }\n  }\n\n  queue.push(new Item(fun, args));\n\n  if (queue.length === 1 && !draining) {\n    runTimeout(drainQueue);\n  }\n}; // v8 likes predictible objects\n\n\nfunction Item(fun, array) {\n  this.fun = fun;\n  this.array = array;\n}\n\nItem.prototype.run = function () {\n  this.fun.apply(null, this.array);\n};\n\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\n\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) {\n  return [];\n};\n\nprocess.binding = function (name) {\n  throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () {\n  return '/';\n};\n\nprocess.chdir = function (dir) {\n  throw new Error('process.chdir is not supported');\n};\n\nprocess.umask = function () {\n  return 0;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/process/browser.js\n");

/***/ }),

/***/ "../../node_modules/stackframe/stackframe.js":
/*!**********************************************************************!*\
  !*** /home/pomber/p/dev/react/node_modules/stackframe/stackframe.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {\n  'use strict'; // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.\n\n  /* istanbul ignore next */\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(this, function () {\n  'use strict';\n\n  function _isNumber(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function _capitalize(str) {\n    return str.charAt(0).toUpperCase() + str.substring(1);\n  }\n\n  function _getter(p) {\n    return function () {\n      return this[p];\n    };\n  }\n\n  var booleanProps = ['isConstructor', 'isEval', 'isNative', 'isToplevel'];\n  var numericProps = ['columnNumber', 'lineNumber'];\n  var stringProps = ['fileName', 'functionName', 'source'];\n  var arrayProps = ['args'];\n  var props = booleanProps.concat(numericProps, stringProps, arrayProps);\n\n  function StackFrame(obj) {\n    if (!obj) return;\n\n    for (var i = 0; i < props.length; i++) {\n      if (obj[props[i]] !== undefined) {\n        this['set' + _capitalize(props[i])](obj[props[i]]);\n      }\n    }\n  }\n\n  StackFrame.prototype = {\n    getArgs: function () {\n      return this.args;\n    },\n    setArgs: function (v) {\n      if (Object.prototype.toString.call(v) !== '[object Array]') {\n        throw new TypeError('Args must be an Array');\n      }\n\n      this.args = v;\n    },\n    getEvalOrigin: function () {\n      return this.evalOrigin;\n    },\n    setEvalOrigin: function (v) {\n      if (v instanceof StackFrame) {\n        this.evalOrigin = v;\n      } else if (v instanceof Object) {\n        this.evalOrigin = new StackFrame(v);\n      } else {\n        throw new TypeError('Eval Origin must be an Object or StackFrame');\n      }\n    },\n    toString: function () {\n      var fileName = this.getFileName() || '';\n      var lineNumber = this.getLineNumber() || '';\n      var columnNumber = this.getColumnNumber() || '';\n      var functionName = this.getFunctionName() || '';\n\n      if (this.getIsEval()) {\n        if (fileName) {\n          return '[eval] (' + fileName + ':' + lineNumber + ':' + columnNumber + ')';\n        }\n\n        return '[eval]:' + lineNumber + ':' + columnNumber;\n      }\n\n      if (functionName) {\n        return functionName + ' (' + fileName + ':' + lineNumber + ':' + columnNumber + ')';\n      }\n\n      return fileName + ':' + lineNumber + ':' + columnNumber;\n    }\n  };\n\n  StackFrame.fromString = function StackFrame$$fromString(str) {\n    var argsStartIndex = str.indexOf('(');\n    var argsEndIndex = str.lastIndexOf(')');\n    var functionName = str.substring(0, argsStartIndex);\n    var args = str.substring(argsStartIndex + 1, argsEndIndex).split(',');\n    var locationString = str.substring(argsEndIndex + 1);\n\n    if (locationString.indexOf('@') === 0) {\n      var parts = /@(.+?)(?::(\\d+))?(?::(\\d+))?$/.exec(locationString, '');\n      var fileName = parts[1];\n      var lineNumber = parts[2];\n      var columnNumber = parts[3];\n    }\n\n    return new StackFrame({\n      functionName: functionName,\n      args: args || undefined,\n      fileName: fileName,\n      lineNumber: lineNumber || undefined,\n      columnNumber: columnNumber || undefined\n    });\n  };\n\n  for (var i = 0; i < booleanProps.length; i++) {\n    StackFrame.prototype['get' + _capitalize(booleanProps[i])] = _getter(booleanProps[i]);\n\n    StackFrame.prototype['set' + _capitalize(booleanProps[i])] = function (p) {\n      return function (v) {\n        this[p] = Boolean(v);\n      };\n    }(booleanProps[i]);\n  }\n\n  for (var j = 0; j < numericProps.length; j++) {\n    StackFrame.prototype['get' + _capitalize(numericProps[j])] = _getter(numericProps[j]);\n\n    StackFrame.prototype['set' + _capitalize(numericProps[j])] = function (p) {\n      return function (v) {\n        if (!_isNumber(v)) {\n          throw new TypeError(p + ' must be a Number');\n        }\n\n        this[p] = Number(v);\n      };\n    }(numericProps[j]);\n  }\n\n  for (var k = 0; k < stringProps.length; k++) {\n    StackFrame.prototype['get' + _capitalize(stringProps[k])] = _getter(stringProps[k]);\n\n    StackFrame.prototype['set' + _capitalize(stringProps[k])] = function (p) {\n      return function (v) {\n        this[p] = String(v);\n      };\n    }(stringProps[k]);\n  }\n\n  return StackFrame;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL3N0YWNrZnJhbWUvc3RhY2tmcmFtZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8vaG9tZS9wb21iZXIvcC9kZXYvcmVhY3Qvbm9kZV9tb2R1bGVzL3N0YWNrZnJhbWUvc3RhY2tmcmFtZS5qcz8yOWZhIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbihyb290LCBmYWN0b3J5KSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIC8vIFVuaXZlcnNhbCBNb2R1bGUgRGVmaW5pdGlvbiAoVU1EKSB0byBzdXBwb3J0IEFNRCwgQ29tbW9uSlMvTm9kZS5qcywgUmhpbm8sIGFuZCBicm93c2Vycy5cblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICBkZWZpbmUoJ3N0YWNrZnJhbWUnLCBbXSwgZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcm9vdC5TdGFja0ZyYW1lID0gZmFjdG9yeSgpO1xuICAgIH1cbn0odGhpcywgZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGZ1bmN0aW9uIF9pc051bWJlcihuKSB7XG4gICAgICAgIHJldHVybiAhaXNOYU4ocGFyc2VGbG9hdChuKSkgJiYgaXNGaW5pdGUobik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX2NhcGl0YWxpemUoc3RyKSB7XG4gICAgICAgIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc3Vic3RyaW5nKDEpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9nZXR0ZXIocCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpc1twXTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgYm9vbGVhblByb3BzID0gWydpc0NvbnN0cnVjdG9yJywgJ2lzRXZhbCcsICdpc05hdGl2ZScsICdpc1RvcGxldmVsJ107XG4gICAgdmFyIG51bWVyaWNQcm9wcyA9IFsnY29sdW1uTnVtYmVyJywgJ2xpbmVOdW1iZXInXTtcbiAgICB2YXIgc3RyaW5nUHJvcHMgPSBbJ2ZpbGVOYW1lJywgJ2Z1bmN0aW9uTmFtZScsICdzb3VyY2UnXTtcbiAgICB2YXIgYXJyYXlQcm9wcyA9IFsnYXJncyddO1xuXG4gICAgdmFyIHByb3BzID0gYm9vbGVhblByb3BzLmNvbmNhdChudW1lcmljUHJvcHMsIHN0cmluZ1Byb3BzLCBhcnJheVByb3BzKTtcblxuICAgIGZ1bmN0aW9uIFN0YWNrRnJhbWUob2JqKSB7XG4gICAgICAgIGlmICghb2JqKSByZXR1cm47XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChvYmpbcHJvcHNbaV1dICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzWydzZXQnICsgX2NhcGl0YWxpemUocHJvcHNbaV0pXShvYmpbcHJvcHNbaV1dKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIFN0YWNrRnJhbWUucHJvdG90eXBlID0ge1xuICAgICAgICBnZXRBcmdzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFyZ3M7XG4gICAgICAgIH0sXG4gICAgICAgIHNldEFyZ3M6IGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodikgIT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmdzIG11c3QgYmUgYW4gQXJyYXknKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYXJncyA9IHY7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0RXZhbE9yaWdpbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ldmFsT3JpZ2luO1xuICAgICAgICB9LFxuICAgICAgICBzZXRFdmFsT3JpZ2luOiBmdW5jdGlvbih2KSB7XG4gICAgICAgICAgICBpZiAodiBpbnN0YW5jZW9mIFN0YWNrRnJhbWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmV2YWxPcmlnaW4gPSB2O1xuICAgICAgICAgICAgfSBlbHNlIGlmICh2IGluc3RhbmNlb2YgT2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ldmFsT3JpZ2luID0gbmV3IFN0YWNrRnJhbWUodik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V2YWwgT3JpZ2luIG11c3QgYmUgYW4gT2JqZWN0IG9yIFN0YWNrRnJhbWUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgZmlsZU5hbWUgPSB0aGlzLmdldEZpbGVOYW1lKCkgfHwgJyc7XG4gICAgICAgICAgICB2YXIgbGluZU51bWJlciA9IHRoaXMuZ2V0TGluZU51bWJlcigpIHx8ICcnO1xuICAgICAgICAgICAgdmFyIGNvbHVtbk51bWJlciA9IHRoaXMuZ2V0Q29sdW1uTnVtYmVyKCkgfHwgJyc7XG4gICAgICAgICAgICB2YXIgZnVuY3Rpb25OYW1lID0gdGhpcy5nZXRGdW5jdGlvbk5hbWUoKSB8fCAnJztcbiAgICAgICAgICAgIGlmICh0aGlzLmdldElzRXZhbCgpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZpbGVOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW2V2YWxdICgnICsgZmlsZU5hbWUgKyAnOicgKyBsaW5lTnVtYmVyICsgJzonICsgY29sdW1uTnVtYmVyICsgJyknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gJ1tldmFsXTonICsgbGluZU51bWJlciArICc6JyArIGNvbHVtbk51bWJlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChmdW5jdGlvbk5hbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb25OYW1lICsgJyAoJyArIGZpbGVOYW1lICsgJzonICsgbGluZU51bWJlciArICc6JyArIGNvbHVtbk51bWJlciArICcpJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmaWxlTmFtZSArICc6JyArIGxpbmVOdW1iZXIgKyAnOicgKyBjb2x1bW5OdW1iZXI7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgU3RhY2tGcmFtZS5mcm9tU3RyaW5nID0gZnVuY3Rpb24gU3RhY2tGcmFtZSQkZnJvbVN0cmluZyhzdHIpIHtcbiAgICAgICAgdmFyIGFyZ3NTdGFydEluZGV4ID0gc3RyLmluZGV4T2YoJygnKTtcbiAgICAgICAgdmFyIGFyZ3NFbmRJbmRleCA9IHN0ci5sYXN0SW5kZXhPZignKScpO1xuXG4gICAgICAgIHZhciBmdW5jdGlvbk5hbWUgPSBzdHIuc3Vic3RyaW5nKDAsIGFyZ3NTdGFydEluZGV4KTtcbiAgICAgICAgdmFyIGFyZ3MgPSBzdHIuc3Vic3RyaW5nKGFyZ3NTdGFydEluZGV4ICsgMSwgYXJnc0VuZEluZGV4KS5zcGxpdCgnLCcpO1xuICAgICAgICB2YXIgbG9jYXRpb25TdHJpbmcgPSBzdHIuc3Vic3RyaW5nKGFyZ3NFbmRJbmRleCArIDEpO1xuXG4gICAgICAgIGlmIChsb2NhdGlvblN0cmluZy5pbmRleE9mKCdAJykgPT09IDApIHtcbiAgICAgICAgICAgIHZhciBwYXJ0cyA9IC9AKC4rPykoPzo6KFxcZCspKT8oPzo6KFxcZCspKT8kLy5leGVjKGxvY2F0aW9uU3RyaW5nLCAnJyk7XG4gICAgICAgICAgICB2YXIgZmlsZU5hbWUgPSBwYXJ0c1sxXTtcbiAgICAgICAgICAgIHZhciBsaW5lTnVtYmVyID0gcGFydHNbMl07XG4gICAgICAgICAgICB2YXIgY29sdW1uTnVtYmVyID0gcGFydHNbM107XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IFN0YWNrRnJhbWUoe1xuICAgICAgICAgICAgZnVuY3Rpb25OYW1lOiBmdW5jdGlvbk5hbWUsXG4gICAgICAgICAgICBhcmdzOiBhcmdzIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGZpbGVOYW1lOiBmaWxlTmFtZSxcbiAgICAgICAgICAgIGxpbmVOdW1iZXI6IGxpbmVOdW1iZXIgfHwgdW5kZWZpbmVkLFxuICAgICAgICAgICAgY29sdW1uTnVtYmVyOiBjb2x1bW5OdW1iZXIgfHwgdW5kZWZpbmVkXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvb2xlYW5Qcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBTdGFja0ZyYW1lLnByb3RvdHlwZVsnZ2V0JyArIF9jYXBpdGFsaXplKGJvb2xlYW5Qcm9wc1tpXSldID0gX2dldHRlcihib29sZWFuUHJvcHNbaV0pO1xuICAgICAgICBTdGFja0ZyYW1lLnByb3RvdHlwZVsnc2V0JyArIF9jYXBpdGFsaXplKGJvb2xlYW5Qcm9wc1tpXSldID0gKGZ1bmN0aW9uKHApIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbih2KSB7XG4gICAgICAgICAgICAgICAgdGhpc1twXSA9IEJvb2xlYW4odik7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KShib29sZWFuUHJvcHNbaV0pO1xuICAgIH1cblxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgbnVtZXJpY1Byb3BzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIFN0YWNrRnJhbWUucHJvdG90eXBlWydnZXQnICsgX2NhcGl0YWxpemUobnVtZXJpY1Byb3BzW2pdKV0gPSBfZ2V0dGVyKG51bWVyaWNQcm9wc1tqXSk7XG4gICAgICAgIFN0YWNrRnJhbWUucHJvdG90eXBlWydzZXQnICsgX2NhcGl0YWxpemUobnVtZXJpY1Byb3BzW2pdKV0gPSAoZnVuY3Rpb24ocCkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgICAgICAgICBpZiAoIV9pc051bWJlcih2KSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHAgKyAnIG11c3QgYmUgYSBOdW1iZXInKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpc1twXSA9IE51bWJlcih2KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pKG51bWVyaWNQcm9wc1tqXSk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgayA9IDA7IGsgPCBzdHJpbmdQcm9wcy5sZW5ndGg7IGsrKykge1xuICAgICAgICBTdGFja0ZyYW1lLnByb3RvdHlwZVsnZ2V0JyArIF9jYXBpdGFsaXplKHN0cmluZ1Byb3BzW2tdKV0gPSBfZ2V0dGVyKHN0cmluZ1Byb3BzW2tdKTtcbiAgICAgICAgU3RhY2tGcmFtZS5wcm90b3R5cGVbJ3NldCcgKyBfY2FwaXRhbGl6ZShzdHJpbmdQcm9wc1trXSldID0gKGZ1bmN0aW9uKHApIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbih2KSB7XG4gICAgICAgICAgICAgICAgdGhpc1twXSA9IFN0cmluZyh2KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pKHN0cmluZ1Byb3BzW2tdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gU3RhY2tGcmFtZTtcbn0pKTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQSxXQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUF2Q0E7QUFDQTtBQXlDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTEE7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/stackframe/stackframe.js\n");

/***/ }),

/***/ "../../node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g; // This works in non-strict mode\n\ng = function () {\n  return this;\n}();\n\ntry {\n  // This works if eval is allowed (see CSP)\n  g = g || new Function(\"return this\")();\n} catch (e) {\n  // This works if the window reference is available\n  if (typeof window === \"object\") g = window;\n} // g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\n\nmodule.exports = g;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzP2NkMDAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/webpack/buildin/global.js\n");

/***/ }),

/***/ "../../node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function (module) {\n  if (!module.webpackPolyfill) {\n    module.deprecate = function () {};\n\n    module.paths = []; // module.parent = undefined by default\n\n    if (!module.children) module.children = [];\n    Object.defineProperty(module, \"loaded\", {\n      enumerable: true,\n      get: function () {\n        return module.l;\n      }\n    });\n    Object.defineProperty(module, \"id\", {\n      enumerable: true,\n      get: function () {\n        return module.i;\n      }\n    });\n    module.webpackPolyfill = 1;\n  }\n\n  return module;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9tb2R1bGUuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2NlZDIiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQU1BO0FBQ0E7QUFDQTtBQUFBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/webpack/buildin/module.js\n");

/***/ }),

/***/ "../react-devtools-shared/node_modules/semver/semver.js":
/*!**************************************************************!*\
  !*** ../react-devtools-shared/node_modules/semver/semver.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {exports = module.exports = SemVer;\nvar debug;\n/* istanbul ignore next */\n\nif (typeof process === 'object' && process.env && process.env.NODE_DEBUG && /\\bsemver\\b/i.test(process.env.NODE_DEBUG)) {\n  debug = function () {\n    var args = Array.prototype.slice.call(arguments, 0);\n    args.unshift('SEMVER');\n    console.log.apply(console, args);\n  };\n} else {\n  debug = function () {};\n} // Note: this is the semver.org version of the spec that it implements\n// Not necessarily the package version of this code.\n\n\nexports.SEMVER_SPEC_VERSION = '2.0.0';\nvar MAX_LENGTH = 256;\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||\n/* istanbul ignore next */\n9007199254740991; // Max safe segment length for coercion.\n\nvar MAX_SAFE_COMPONENT_LENGTH = 16; // The actual regexps go on exports.re\n\nvar re = exports.re = [];\nvar src = exports.src = [];\nvar t = exports.tokens = {};\nvar R = 0;\n\nfunction tok(n) {\n  t[n] = R++;\n} // The following Regular Expressions can be used for tokenizing,\n// validating, and parsing SemVer version strings.\n// ## Numeric Identifier\n// A single `0`, or a non-zero digit followed by zero or more digits.\n\n\ntok('NUMERICIDENTIFIER');\nsrc[t.NUMERICIDENTIFIER] = '0|[1-9]\\\\d*';\ntok('NUMERICIDENTIFIERLOOSE');\nsrc[t.NUMERICIDENTIFIERLOOSE] = '[0-9]+'; // ## Non-numeric Identifier\n// Zero or more digits, followed by a letter or hyphen, and then zero or\n// more letters, digits, or hyphens.\n\ntok('NONNUMERICIDENTIFIER');\nsrc[t.NONNUMERICIDENTIFIER] = '\\\\d*[a-zA-Z-][a-zA-Z0-9-]*'; // ## Main Version\n// Three dot-separated numeric identifiers.\n\ntok('MAINVERSION');\nsrc[t.MAINVERSION] = '(' + src[t.NUMERICIDENTIFIER] + ')\\\\.' + '(' + src[t.NUMERICIDENTIFIER] + ')\\\\.' + '(' + src[t.NUMERICIDENTIFIER] + ')';\ntok('MAINVERSIONLOOSE');\nsrc[t.MAINVERSIONLOOSE] = '(' + src[t.NUMERICIDENTIFIERLOOSE] + ')\\\\.' + '(' + src[t.NUMERICIDENTIFIERLOOSE] + ')\\\\.' + '(' + src[t.NUMERICIDENTIFIERLOOSE] + ')'; // ## Pre-release Version Identifier\n// A numeric identifier, or a non-numeric identifier.\n\ntok('PRERELEASEIDENTIFIER');\nsrc[t.PRERELEASEIDENTIFIER] = '(?:' + src[t.NUMERICIDENTIFIER] + '|' + src[t.NONNUMERICIDENTIFIER] + ')';\ntok('PRERELEASEIDENTIFIERLOOSE');\nsrc[t.PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[t.NUMERICIDENTIFIERLOOSE] + '|' + src[t.NONNUMERICIDENTIFIER] + ')'; // ## Pre-release Version\n// Hyphen, followed by one or more dot-separated pre-release version\n// identifiers.\n\ntok('PRERELEASE');\nsrc[t.PRERELEASE] = '(?:-(' + src[t.PRERELEASEIDENTIFIER] + '(?:\\\\.' + src[t.PRERELEASEIDENTIFIER] + ')*))';\ntok('PRERELEASELOOSE');\nsrc[t.PRERELEASELOOSE] = '(?:-?(' + src[t.PRERELEASEIDENTIFIERLOOSE] + '(?:\\\\.' + src[t.PRERELEASEIDENTIFIERLOOSE] + ')*))'; // ## Build Metadata Identifier\n// Any combination of digits, letters, or hyphens.\n\ntok('BUILDIDENTIFIER');\nsrc[t.BUILDIDENTIFIER] = '[0-9A-Za-z-]+'; // ## Build Metadata\n// Plus sign, followed by one or more period-separated build metadata\n// identifiers.\n\ntok('BUILD');\nsrc[t.BUILD] = '(?:\\\\+(' + src[t.BUILDIDENTIFIER] + '(?:\\\\.' + src[t.BUILDIDENTIFIER] + ')*))'; // ## Full Version String\n// A main version, followed optionally by a pre-release version and\n// build metadata.\n// Note that the only major, minor, patch, and pre-release sections of\n// the version string are capturing groups.  The build metadata is not a\n// capturing group, because it should not ever be used in version\n// comparison.\n\ntok('FULL');\ntok('FULLPLAIN');\nsrc[t.FULLPLAIN] = 'v?' + src[t.MAINVERSION] + src[t.PRERELEASE] + '?' + src[t.BUILD] + '?';\nsrc[t.FULL] = '^' + src[t.FULLPLAIN] + '$'; // like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\n// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\n// common in the npm registry.\n\ntok('LOOSEPLAIN');\nsrc[t.LOOSEPLAIN] = '[v=\\\\s]*' + src[t.MAINVERSIONLOOSE] + src[t.PRERELEASELOOSE] + '?' + src[t.BUILD] + '?';\ntok('LOOSE');\nsrc[t.LOOSE] = '^' + src[t.LOOSEPLAIN] + '$';\ntok('GTLT');\nsrc[t.GTLT] = '((?:<|>)?=?)'; // Something like \"2.*\" or \"1.2.x\".\n// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\n// Only the first item is strictly required.\n\ntok('XRANGEIDENTIFIERLOOSE');\nsrc[t.XRANGEIDENTIFIERLOOSE] = src[t.NUMERICIDENTIFIERLOOSE] + '|x|X|\\\\*';\ntok('XRANGEIDENTIFIER');\nsrc[t.XRANGEIDENTIFIER] = src[t.NUMERICIDENTIFIER] + '|x|X|\\\\*';\ntok('XRANGEPLAIN');\nsrc[t.XRANGEPLAIN] = '[v=\\\\s]*(' + src[t.XRANGEIDENTIFIER] + ')' + '(?:\\\\.(' + src[t.XRANGEIDENTIFIER] + ')' + '(?:\\\\.(' + src[t.XRANGEIDENTIFIER] + ')' + '(?:' + src[t.PRERELEASE] + ')?' + src[t.BUILD] + '?' + ')?)?';\ntok('XRANGEPLAINLOOSE');\nsrc[t.XRANGEPLAINLOOSE] = '[v=\\\\s]*(' + src[t.XRANGEIDENTIFIERLOOSE] + ')' + '(?:\\\\.(' + src[t.XRANGEIDENTIFIERLOOSE] + ')' + '(?:\\\\.(' + src[t.XRANGEIDENTIFIERLOOSE] + ')' + '(?:' + src[t.PRERELEASELOOSE] + ')?' + src[t.BUILD] + '?' + ')?)?';\ntok('XRANGE');\nsrc[t.XRANGE] = '^' + src[t.GTLT] + '\\\\s*' + src[t.XRANGEPLAIN] + '$';\ntok('XRANGELOOSE');\nsrc[t.XRANGELOOSE] = '^' + src[t.GTLT] + '\\\\s*' + src[t.XRANGEPLAINLOOSE] + '$'; // Coercion.\n// Extract anything that could conceivably be a part of a valid semver\n\ntok('COERCE');\nsrc[t.COERCE] = '(^|[^\\\\d])' + '(\\\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '})' + '(?:\\\\.(\\\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' + '(?:\\\\.(\\\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' + '(?:$|[^\\\\d])';\ntok('COERCERTL');\nre[t.COERCERTL] = new RegExp(src[t.COERCE], 'g'); // Tilde ranges.\n// Meaning is \"reasonably at or greater than\"\n\ntok('LONETILDE');\nsrc[t.LONETILDE] = '(?:~>?)';\ntok('TILDETRIM');\nsrc[t.TILDETRIM] = '(\\\\s*)' + src[t.LONETILDE] + '\\\\s+';\nre[t.TILDETRIM] = new RegExp(src[t.TILDETRIM], 'g');\nvar tildeTrimReplace = '$1~';\ntok('TILDE');\nsrc[t.TILDE] = '^' + src[t.LONETILDE] + src[t.XRANGEPLAIN] + '$';\ntok('TILDELOOSE');\nsrc[t.TILDELOOSE] = '^' + src[t.LONETILDE] + src[t.XRANGEPLAINLOOSE] + '$'; // Caret ranges.\n// Meaning is \"at least and backwards compatible with\"\n\ntok('LONECARET');\nsrc[t.LONECARET] = '(?:\\\\^)';\ntok('CARETTRIM');\nsrc[t.CARETTRIM] = '(\\\\s*)' + src[t.LONECARET] + '\\\\s+';\nre[t.CARETTRIM] = new RegExp(src[t.CARETTRIM], 'g');\nvar caretTrimReplace = '$1^';\ntok('CARET');\nsrc[t.CARET] = '^' + src[t.LONECARET] + src[t.XRANGEPLAIN] + '$';\ntok('CARETLOOSE');\nsrc[t.CARETLOOSE] = '^' + src[t.LONECARET] + src[t.XRANGEPLAINLOOSE] + '$'; // A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\n\ntok('COMPARATORLOOSE');\nsrc[t.COMPARATORLOOSE] = '^' + src[t.GTLT] + '\\\\s*(' + src[t.LOOSEPLAIN] + ')$|^$';\ntok('COMPARATOR');\nsrc[t.COMPARATOR] = '^' + src[t.GTLT] + '\\\\s*(' + src[t.FULLPLAIN] + ')$|^$'; // An expression to strip any whitespace between the gtlt and the thing\n// it modifies, so that `> 1.2.3` ==> `>1.2.3`\n\ntok('COMPARATORTRIM');\nsrc[t.COMPARATORTRIM] = '(\\\\s*)' + src[t.GTLT] + '\\\\s*(' + src[t.LOOSEPLAIN] + '|' + src[t.XRANGEPLAIN] + ')'; // this one has to use the /g flag\n\nre[t.COMPARATORTRIM] = new RegExp(src[t.COMPARATORTRIM], 'g');\nvar comparatorTrimReplace = '$1$2$3'; // Something like `1.2.3 - 1.2.4`\n// Note that these all use the loose form, because they'll be\n// checked against either the strict or loose comparator form\n// later.\n\ntok('HYPHENRANGE');\nsrc[t.HYPHENRANGE] = '^\\\\s*(' + src[t.XRANGEPLAIN] + ')' + '\\\\s+-\\\\s+' + '(' + src[t.XRANGEPLAIN] + ')' + '\\\\s*$';\ntok('HYPHENRANGELOOSE');\nsrc[t.HYPHENRANGELOOSE] = '^\\\\s*(' + src[t.XRANGEPLAINLOOSE] + ')' + '\\\\s+-\\\\s+' + '(' + src[t.XRANGEPLAINLOOSE] + ')' + '\\\\s*$'; // Star ranges basically just allow anything at all.\n\ntok('STAR');\nsrc[t.STAR] = '(<|>)?=?\\\\s*\\\\*'; // Compile to actual regexp objects.\n// All are flag-free, unless they were created above with a flag.\n\nfor (var i = 0; i < R; i++) {\n  debug(i, src[i]);\n\n  if (!re[i]) {\n    re[i] = new RegExp(src[i]);\n  }\n}\n\nexports.parse = parse;\n\nfunction parse(version, options) {\n  if (!options || typeof options !== 'object') {\n    options = {\n      loose: !!options,\n      includePrerelease: false\n    };\n  }\n\n  if (version instanceof SemVer) {\n    return version;\n  }\n\n  if (typeof version !== 'string') {\n    return null;\n  }\n\n  if (version.length > MAX_LENGTH) {\n    return null;\n  }\n\n  var r = options.loose ? re[t.LOOSE] : re[t.FULL];\n\n  if (!r.test(version)) {\n    return null;\n  }\n\n  try {\n    return new SemVer(version, options);\n  } catch (er) {\n    return null;\n  }\n}\n\nexports.valid = valid;\n\nfunction valid(version, options) {\n  var v = parse(version, options);\n  return v ? v.version : null;\n}\n\nexports.clean = clean;\n\nfunction clean(version, options) {\n  var s = parse(version.trim().replace(/^[=v]+/, ''), options);\n  return s ? s.version : null;\n}\n\nexports.SemVer = SemVer;\n\nfunction SemVer(version, options) {\n  if (!options || typeof options !== 'object') {\n    options = {\n      loose: !!options,\n      includePrerelease: false\n    };\n  }\n\n  if (version instanceof SemVer) {\n    if (version.loose === options.loose) {\n      return version;\n    } else {\n      version = version.version;\n    }\n  } else if (typeof version !== 'string') {\n    throw new TypeError('Invalid Version: ' + version);\n  }\n\n  if (version.length > MAX_LENGTH) {\n    throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters');\n  }\n\n  if (!(this instanceof SemVer)) {\n    return new SemVer(version, options);\n  }\n\n  debug('SemVer', version, options);\n  this.options = options;\n  this.loose = !!options.loose;\n  var m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL]);\n\n  if (!m) {\n    throw new TypeError('Invalid Version: ' + version);\n  }\n\n  this.raw = version; // these are actually numbers\n\n  this.major = +m[1];\n  this.minor = +m[2];\n  this.patch = +m[3];\n\n  if (this.major > MAX_SAFE_INTEGER || this.major < 0) {\n    throw new TypeError('Invalid major version');\n  }\n\n  if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {\n    throw new TypeError('Invalid minor version');\n  }\n\n  if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {\n    throw new TypeError('Invalid patch version');\n  } // numberify any prerelease numeric ids\n\n\n  if (!m[4]) {\n    this.prerelease = [];\n  } else {\n    this.prerelease = m[4].split('.').map(function (id) {\n      if (/^[0-9]+$/.test(id)) {\n        var num = +id;\n\n        if (num >= 0 && num < MAX_SAFE_INTEGER) {\n          return num;\n        }\n      }\n\n      return id;\n    });\n  }\n\n  this.build = m[5] ? m[5].split('.') : [];\n  this.format();\n}\n\nSemVer.prototype.format = function () {\n  this.version = this.major + '.' + this.minor + '.' + this.patch;\n\n  if (this.prerelease.length) {\n    this.version += '-' + this.prerelease.join('.');\n  }\n\n  return this.version;\n};\n\nSemVer.prototype.toString = function () {\n  return this.version;\n};\n\nSemVer.prototype.compare = function (other) {\n  debug('SemVer.compare', this.version, this.options, other);\n\n  if (!(other instanceof SemVer)) {\n    other = new SemVer(other, this.options);\n  }\n\n  return this.compareMain(other) || this.comparePre(other);\n};\n\nSemVer.prototype.compareMain = function (other) {\n  if (!(other instanceof SemVer)) {\n    other = new SemVer(other, this.options);\n  }\n\n  return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);\n};\n\nSemVer.prototype.comparePre = function (other) {\n  if (!(other instanceof SemVer)) {\n    other = new SemVer(other, this.options);\n  } // NOT having a prerelease is > having one\n\n\n  if (this.prerelease.length && !other.prerelease.length) {\n    return -1;\n  } else if (!this.prerelease.length && other.prerelease.length) {\n    return 1;\n  } else if (!this.prerelease.length && !other.prerelease.length) {\n    return 0;\n  }\n\n  var i = 0;\n\n  do {\n    var a = this.prerelease[i];\n    var b = other.prerelease[i];\n    debug('prerelease compare', i, a, b);\n\n    if (a === undefined && b === undefined) {\n      return 0;\n    } else if (b === undefined) {\n      return 1;\n    } else if (a === undefined) {\n      return -1;\n    } else if (a === b) {\n      continue;\n    } else {\n      return compareIdentifiers(a, b);\n    }\n  } while (++i);\n};\n\nSemVer.prototype.compareBuild = function (other) {\n  if (!(other instanceof SemVer)) {\n    other = new SemVer(other, this.options);\n  }\n\n  var i = 0;\n\n  do {\n    var a = this.build[i];\n    var b = other.build[i];\n    debug('prerelease compare', i, a, b);\n\n    if (a === undefined && b === undefined) {\n      return 0;\n    } else if (b === undefined) {\n      return 1;\n    } else if (a === undefined) {\n      return -1;\n    } else if (a === b) {\n      continue;\n    } else {\n      return compareIdentifiers(a, b);\n    }\n  } while (++i);\n}; // preminor will bump the version up to the next minor release, and immediately\n// down to pre-release. premajor and prepatch work the same way.\n\n\nSemVer.prototype.inc = function (release, identifier) {\n  switch (release) {\n    case 'premajor':\n      this.prerelease.length = 0;\n      this.patch = 0;\n      this.minor = 0;\n      this.major++;\n      this.inc('pre', identifier);\n      break;\n\n    case 'preminor':\n      this.prerelease.length = 0;\n      this.patch = 0;\n      this.minor++;\n      this.inc('pre', identifier);\n      break;\n\n    case 'prepatch':\n      // If this is already a prerelease, it will bump to the next version\n      // drop any prereleases that might already exist, since they are not\n      // relevant at this point.\n      this.prerelease.length = 0;\n      this.inc('patch', identifier);\n      this.inc('pre', identifier);\n      break;\n    // If the input is a non-prerelease version, this acts the same as\n    // prepatch.\n\n    case 'prerelease':\n      if (this.prerelease.length === 0) {\n        this.inc('patch', identifier);\n      }\n\n      this.inc('pre', identifier);\n      break;\n\n    case 'major':\n      // If this is a pre-major version, bump up to the same major version.\n      // Otherwise increment major.\n      // 1.0.0-5 bumps to 1.0.0\n      // 1.1.0 bumps to 2.0.0\n      if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {\n        this.major++;\n      }\n\n      this.minor = 0;\n      this.patch = 0;\n      this.prerelease = [];\n      break;\n\n    case 'minor':\n      // If this is a pre-minor version, bump up to the same minor version.\n      // Otherwise increment minor.\n      // 1.2.0-5 bumps to 1.2.0\n      // 1.2.1 bumps to 1.3.0\n      if (this.patch !== 0 || this.prerelease.length === 0) {\n        this.minor++;\n      }\n\n      this.patch = 0;\n      this.prerelease = [];\n      break;\n\n    case 'patch':\n      // If this is not a pre-release version, it will increment the patch.\n      // If it is a pre-release it will bump up to the same patch version.\n      // 1.2.0-5 patches to 1.2.0\n      // 1.2.0 patches to 1.2.1\n      if (this.prerelease.length === 0) {\n        this.patch++;\n      }\n\n      this.prerelease = [];\n      break;\n    // This probably shouldn't be used publicly.\n    // 1.0.0 \"pre\" would become 1.0.0-0 which is the wrong direction.\n\n    case 'pre':\n      if (this.prerelease.length === 0) {\n        this.prerelease = [0];\n      } else {\n        var i = this.prerelease.length;\n\n        while (--i >= 0) {\n          if (typeof this.prerelease[i] === 'number') {\n            this.prerelease[i]++;\n            i = -2;\n          }\n        }\n\n        if (i === -1) {\n          // didn't increment anything\n          this.prerelease.push(0);\n        }\n      }\n\n      if (identifier) {\n        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,\n        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0\n        if (this.prerelease[0] === identifier) {\n          if (isNaN(this.prerelease[1])) {\n            this.prerelease = [identifier, 0];\n          }\n        } else {\n          this.prerelease = [identifier, 0];\n        }\n      }\n\n      break;\n\n    default:\n      throw new Error('invalid increment argument: ' + release);\n  }\n\n  this.format();\n  this.raw = this.version;\n  return this;\n};\n\nexports.inc = inc;\n\nfunction inc(version, release, loose, identifier) {\n  if (typeof loose === 'string') {\n    identifier = loose;\n    loose = undefined;\n  }\n\n  try {\n    return new SemVer(version, loose).inc(release, identifier).version;\n  } catch (er) {\n    return null;\n  }\n}\n\nexports.diff = diff;\n\nfunction diff(version1, version2) {\n  if (eq(version1, version2)) {\n    return null;\n  } else {\n    var v1 = parse(version1);\n    var v2 = parse(version2);\n    var prefix = '';\n\n    if (v1.prerelease.length || v2.prerelease.length) {\n      prefix = 'pre';\n      var defaultResult = 'prerelease';\n    }\n\n    for (var key in v1) {\n      if (key === 'major' || key === 'minor' || key === 'patch') {\n        if (v1[key] !== v2[key]) {\n          return prefix + key;\n        }\n      }\n    }\n\n    return defaultResult; // may be undefined\n  }\n}\n\nexports.compareIdentifiers = compareIdentifiers;\nvar numeric = /^[0-9]+$/;\n\nfunction compareIdentifiers(a, b) {\n  var anum = numeric.test(a);\n  var bnum = numeric.test(b);\n\n  if (anum && bnum) {\n    a = +a;\n    b = +b;\n  }\n\n  return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;\n}\n\nexports.rcompareIdentifiers = rcompareIdentifiers;\n\nfunction rcompareIdentifiers(a, b) {\n  return compareIdentifiers(b, a);\n}\n\nexports.major = major;\n\nfunction major(a, loose) {\n  return new SemVer(a, loose).major;\n}\n\nexports.minor = minor;\n\nfunction minor(a, loose) {\n  return new SemVer(a, loose).minor;\n}\n\nexports.patch = patch;\n\nfunction patch(a, loose) {\n  return new SemVer(a, loose).patch;\n}\n\nexports.compare = compare;\n\nfunction compare(a, b, loose) {\n  return new SemVer(a, loose).compare(new SemVer(b, loose));\n}\n\nexports.compareLoose = compareLoose;\n\nfunction compareLoose(a, b) {\n  return compare(a, b, true);\n}\n\nexports.compareBuild = compareBuild;\n\nfunction compareBuild(a, b, loose) {\n  var versionA = new SemVer(a, loose);\n  var versionB = new SemVer(b, loose);\n  return versionA.compare(versionB) || versionA.compareBuild(versionB);\n}\n\nexports.rcompare = rcompare;\n\nfunction rcompare(a, b, loose) {\n  return compare(b, a, loose);\n}\n\nexports.sort = sort;\n\nfunction sort(list, loose) {\n  return list.sort(function (a, b) {\n    return exports.compareBuild(a, b, loose);\n  });\n}\n\nexports.rsort = rsort;\n\nfunction rsort(list, loose) {\n  return list.sort(function (a, b) {\n    return exports.compareBuild(b, a, loose);\n  });\n}\n\nexports.gt = gt;\n\nfunction gt(a, b, loose) {\n  return compare(a, b, loose) > 0;\n}\n\nexports.lt = lt;\n\nfunction lt(a, b, loose) {\n  return compare(a, b, loose) < 0;\n}\n\nexports.eq = eq;\n\nfunction eq(a, b, loose) {\n  return compare(a, b, loose) === 0;\n}\n\nexports.neq = neq;\n\nfunction neq(a, b, loose) {\n  return compare(a, b, loose) !== 0;\n}\n\nexports.gte = gte;\n\nfunction gte(a, b, loose) {\n  return compare(a, b, loose) >= 0;\n}\n\nexports.lte = lte;\n\nfunction lte(a, b, loose) {\n  return compare(a, b, loose) <= 0;\n}\n\nexports.cmp = cmp;\n\nfunction cmp(a, op, b, loose) {\n  switch (op) {\n    case '===':\n      if (typeof a === 'object') a = a.version;\n      if (typeof b === 'object') b = b.version;\n      return a === b;\n\n    case '!==':\n      if (typeof a === 'object') a = a.version;\n      if (typeof b === 'object') b = b.version;\n      return a !== b;\n\n    case '':\n    case '=':\n    case '==':\n      return eq(a, b, loose);\n\n    case '!=':\n      return neq(a, b, loose);\n\n    case '>':\n      return gt(a, b, loose);\n\n    case '>=':\n      return gte(a, b, loose);\n\n    case '<':\n      return lt(a, b, loose);\n\n    case '<=':\n      return lte(a, b, loose);\n\n    default:\n      throw new TypeError('Invalid operator: ' + op);\n  }\n}\n\nexports.Comparator = Comparator;\n\nfunction Comparator(comp, options) {\n  if (!options || typeof options !== 'object') {\n    options = {\n      loose: !!options,\n      includePrerelease: false\n    };\n  }\n\n  if (comp instanceof Comparator) {\n    if (comp.loose === !!options.loose) {\n      return comp;\n    } else {\n      comp = comp.value;\n    }\n  }\n\n  if (!(this instanceof Comparator)) {\n    return new Comparator(comp, options);\n  }\n\n  debug('comparator', comp, options);\n  this.options = options;\n  this.loose = !!options.loose;\n  this.parse(comp);\n\n  if (this.semver === ANY) {\n    this.value = '';\n  } else {\n    this.value = this.operator + this.semver.version;\n  }\n\n  debug('comp', this);\n}\n\nvar ANY = {};\n\nComparator.prototype.parse = function (comp) {\n  var r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];\n  var m = comp.match(r);\n\n  if (!m) {\n    throw new TypeError('Invalid comparator: ' + comp);\n  }\n\n  this.operator = m[1] !== undefined ? m[1] : '';\n\n  if (this.operator === '=') {\n    this.operator = '';\n  } // if it literally is just '>' or '' then allow anything.\n\n\n  if (!m[2]) {\n    this.semver = ANY;\n  } else {\n    this.semver = new SemVer(m[2], this.options.loose);\n  }\n};\n\nComparator.prototype.toString = function () {\n  return this.value;\n};\n\nComparator.prototype.test = function (version) {\n  debug('Comparator.test', version, this.options.loose);\n\n  if (this.semver === ANY || version === ANY) {\n    return true;\n  }\n\n  if (typeof version === 'string') {\n    try {\n      version = new SemVer(version, this.options);\n    } catch (er) {\n      return false;\n    }\n  }\n\n  return cmp(version, this.operator, this.semver, this.options);\n};\n\nComparator.prototype.intersects = function (comp, options) {\n  if (!(comp instanceof Comparator)) {\n    throw new TypeError('a Comparator is required');\n  }\n\n  if (!options || typeof options !== 'object') {\n    options = {\n      loose: !!options,\n      includePrerelease: false\n    };\n  }\n\n  var rangeTmp;\n\n  if (this.operator === '') {\n    if (this.value === '') {\n      return true;\n    }\n\n    rangeTmp = new Range(comp.value, options);\n    return satisfies(this.value, rangeTmp, options);\n  } else if (comp.operator === '') {\n    if (comp.value === '') {\n      return true;\n    }\n\n    rangeTmp = new Range(this.value, options);\n    return satisfies(comp.semver, rangeTmp, options);\n  }\n\n  var sameDirectionIncreasing = (this.operator === '>=' || this.operator === '>') && (comp.operator === '>=' || comp.operator === '>');\n  var sameDirectionDecreasing = (this.operator === '<=' || this.operator === '<') && (comp.operator === '<=' || comp.operator === '<');\n  var sameSemVer = this.semver.version === comp.semver.version;\n  var differentDirectionsInclusive = (this.operator === '>=' || this.operator === '<=') && (comp.operator === '>=' || comp.operator === '<=');\n  var oppositeDirectionsLessThan = cmp(this.semver, '<', comp.semver, options) && (this.operator === '>=' || this.operator === '>') && (comp.operator === '<=' || comp.operator === '<');\n  var oppositeDirectionsGreaterThan = cmp(this.semver, '>', comp.semver, options) && (this.operator === '<=' || this.operator === '<') && (comp.operator === '>=' || comp.operator === '>');\n  return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;\n};\n\nexports.Range = Range;\n\nfunction Range(range, options) {\n  if (!options || typeof options !== 'object') {\n    options = {\n      loose: !!options,\n      includePrerelease: false\n    };\n  }\n\n  if (range instanceof Range) {\n    if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {\n      return range;\n    } else {\n      return new Range(range.raw, options);\n    }\n  }\n\n  if (range instanceof Comparator) {\n    return new Range(range.value, options);\n  }\n\n  if (!(this instanceof Range)) {\n    return new Range(range, options);\n  }\n\n  this.options = options;\n  this.loose = !!options.loose;\n  this.includePrerelease = !!options.includePrerelease; // First, split based on boolean or ||\n\n  this.raw = range;\n  this.set = range.split(/\\s*\\|\\|\\s*/).map(function (range) {\n    return this.parseRange(range.trim());\n  }, this).filter(function (c) {\n    // throw out any that are not relevant for whatever reason\n    return c.length;\n  });\n\n  if (!this.set.length) {\n    throw new TypeError('Invalid SemVer Range: ' + range);\n  }\n\n  this.format();\n}\n\nRange.prototype.format = function () {\n  this.range = this.set.map(function (comps) {\n    return comps.join(' ').trim();\n  }).join('||').trim();\n  return this.range;\n};\n\nRange.prototype.toString = function () {\n  return this.range;\n};\n\nRange.prototype.parseRange = function (range) {\n  var loose = this.options.loose;\n  range = range.trim(); // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\n\n  var hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];\n  range = range.replace(hr, hyphenReplace);\n  debug('hyphen replace', range); // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\n\n  range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);\n  debug('comparator trim', range, re[t.COMPARATORTRIM]); // `~ 1.2.3` => `~1.2.3`\n\n  range = range.replace(re[t.TILDETRIM], tildeTrimReplace); // `^ 1.2.3` => `^1.2.3`\n\n  range = range.replace(re[t.CARETTRIM], caretTrimReplace); // normalize spaces\n\n  range = range.split(/\\s+/).join(' '); // At this point, the range is completely trimmed and\n  // ready to be split into comparators.\n\n  var compRe = loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];\n  var set = range.split(' ').map(function (comp) {\n    return parseComparator(comp, this.options);\n  }, this).join(' ').split(/\\s+/);\n\n  if (this.options.loose) {\n    // in loose mode, throw out any that are not valid comparators\n    set = set.filter(function (comp) {\n      return !!comp.match(compRe);\n    });\n  }\n\n  set = set.map(function (comp) {\n    return new Comparator(comp, this.options);\n  }, this);\n  return set;\n};\n\nRange.prototype.intersects = function (range, options) {\n  if (!(range instanceof Range)) {\n    throw new TypeError('a Range is required');\n  }\n\n  return this.set.some(function (thisComparators) {\n    return isSatisfiable(thisComparators, options) && range.set.some(function (rangeComparators) {\n      return isSatisfiable(rangeComparators, options) && thisComparators.every(function (thisComparator) {\n        return rangeComparators.every(function (rangeComparator) {\n          return thisComparator.intersects(rangeComparator, options);\n        });\n      });\n    });\n  });\n}; // take a set of comparators and determine whether there\n// exists a version which can satisfy it\n\n\nfunction isSatisfiable(comparators, options) {\n  var result = true;\n  var remainingComparators = comparators.slice();\n  var testComparator = remainingComparators.pop();\n\n  while (result && remainingComparators.length) {\n    result = remainingComparators.every(function (otherComparator) {\n      return testComparator.intersects(otherComparator, options);\n    });\n    testComparator = remainingComparators.pop();\n  }\n\n  return result;\n} // Mostly just for testing and legacy API reasons\n\n\nexports.toComparators = toComparators;\n\nfunction toComparators(range, options) {\n  return new Range(range, options).set.map(function (comp) {\n    return comp.map(function (c) {\n      return c.value;\n    }).join(' ').trim().split(' ');\n  });\n} // comprised of xranges, tildes, stars, and gtlt's at this point.\n// already replaced the hyphen ranges\n// turn into a set of JUST comparators.\n\n\nfunction parseComparator(comp, options) {\n  debug('comp', comp, options);\n  comp = replaceCarets(comp, options);\n  debug('caret', comp);\n  comp = replaceTildes(comp, options);\n  debug('tildes', comp);\n  comp = replaceXRanges(comp, options);\n  debug('xrange', comp);\n  comp = replaceStars(comp, options);\n  debug('stars', comp);\n  return comp;\n}\n\nfunction isX(id) {\n  return !id || id.toLowerCase() === 'x' || id === '*';\n} // ~, ~> --> * (any, kinda silly)\n// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0\n// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0\n// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0\n// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0\n// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0\n\n\nfunction replaceTildes(comp, options) {\n  return comp.trim().split(/\\s+/).map(function (comp) {\n    return replaceTilde(comp, options);\n  }).join(' ');\n}\n\nfunction replaceTilde(comp, options) {\n  var r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];\n  return comp.replace(r, function (_, M, m, p, pr) {\n    debug('tilde', comp, _, M, m, p, pr);\n    var ret;\n\n    if (isX(M)) {\n      ret = '';\n    } else if (isX(m)) {\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';\n    } else if (isX(p)) {\n      // ~1.2 == >=1.2.0 <1.3.0\n      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';\n    } else if (pr) {\n      debug('replaceTilde pr', pr);\n      ret = '>=' + M + '.' + m + '.' + p + '-' + pr + ' <' + M + '.' + (+m + 1) + '.0';\n    } else {\n      // ~1.2.3 == >=1.2.3 <1.3.0\n      ret = '>=' + M + '.' + m + '.' + p + ' <' + M + '.' + (+m + 1) + '.0';\n    }\n\n    debug('tilde return', ret);\n    return ret;\n  });\n} // ^ --> * (any, kinda silly)\n// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0\n// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0\n// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0\n// ^1.2.3 --> >=1.2.3 <2.0.0\n// ^1.2.0 --> >=1.2.0 <2.0.0\n\n\nfunction replaceCarets(comp, options) {\n  return comp.trim().split(/\\s+/).map(function (comp) {\n    return replaceCaret(comp, options);\n  }).join(' ');\n}\n\nfunction replaceCaret(comp, options) {\n  debug('caret', comp, options);\n  var r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];\n  return comp.replace(r, function (_, M, m, p, pr) {\n    debug('caret', comp, _, M, m, p, pr);\n    var ret;\n\n    if (isX(M)) {\n      ret = '';\n    } else if (isX(m)) {\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';\n    } else if (isX(p)) {\n      if (M === '0') {\n        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';\n      } else {\n        ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0';\n      }\n    } else if (pr) {\n      debug('replaceCaret pr', pr);\n\n      if (M === '0') {\n        if (m === '0') {\n          ret = '>=' + M + '.' + m + '.' + p + '-' + pr + ' <' + M + '.' + m + '.' + (+p + 1);\n        } else {\n          ret = '>=' + M + '.' + m + '.' + p + '-' + pr + ' <' + M + '.' + (+m + 1) + '.0';\n        }\n      } else {\n        ret = '>=' + M + '.' + m + '.' + p + '-' + pr + ' <' + (+M + 1) + '.0.0';\n      }\n    } else {\n      debug('no pr');\n\n      if (M === '0') {\n        if (m === '0') {\n          ret = '>=' + M + '.' + m + '.' + p + ' <' + M + '.' + m + '.' + (+p + 1);\n        } else {\n          ret = '>=' + M + '.' + m + '.' + p + ' <' + M + '.' + (+m + 1) + '.0';\n        }\n      } else {\n        ret = '>=' + M + '.' + m + '.' + p + ' <' + (+M + 1) + '.0.0';\n      }\n    }\n\n    debug('caret return', ret);\n    return ret;\n  });\n}\n\nfunction replaceXRanges(comp, options) {\n  debug('replaceXRanges', comp, options);\n  return comp.split(/\\s+/).map(function (comp) {\n    return replaceXRange(comp, options);\n  }).join(' ');\n}\n\nfunction replaceXRange(comp, options) {\n  comp = comp.trim();\n  var r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];\n  return comp.replace(r, function (ret, gtlt, M, m, p, pr) {\n    debug('xRange', comp, ret, gtlt, M, m, p, pr);\n    var xM = isX(M);\n    var xm = xM || isX(m);\n    var xp = xm || isX(p);\n    var anyX = xp;\n\n    if (gtlt === '=' && anyX) {\n      gtlt = '';\n    } // if we're including prereleases in the match, then we need\n    // to fix this to -0, the lowest possible prerelease value\n\n\n    pr = options.includePrerelease ? '-0' : '';\n\n    if (xM) {\n      if (gtlt === '>' || gtlt === '<') {\n        // nothing is allowed\n        ret = '<0.0.0-0';\n      } else {\n        // nothing is forbidden\n        ret = '*';\n      }\n    } else if (gtlt && anyX) {\n      // we know patch is an x, because we have any x at all.\n      // replace X with 0\n      if (xm) {\n        m = 0;\n      }\n\n      p = 0;\n\n      if (gtlt === '>') {\n        // >1 => >=2.0.0\n        // >1.2 => >=1.3.0\n        // >1.2.3 => >= 1.2.4\n        gtlt = '>=';\n\n        if (xm) {\n          M = +M + 1;\n          m = 0;\n          p = 0;\n        } else {\n          m = +m + 1;\n          p = 0;\n        }\n      } else if (gtlt === '<=') {\n        // <=0.7.x is actually <0.8.0, since any 0.7.x should\n        // pass.  Similarly, <=7.x is actually <8.0.0, etc.\n        gtlt = '<';\n\n        if (xm) {\n          M = +M + 1;\n        } else {\n          m = +m + 1;\n        }\n      }\n\n      ret = gtlt + M + '.' + m + '.' + p + pr;\n    } else if (xm) {\n      ret = '>=' + M + '.0.0' + pr + ' <' + (+M + 1) + '.0.0' + pr;\n    } else if (xp) {\n      ret = '>=' + M + '.' + m + '.0' + pr + ' <' + M + '.' + (+m + 1) + '.0' + pr;\n    }\n\n    debug('xRange return', ret);\n    return ret;\n  });\n} // Because * is AND-ed with everything else in the comparator,\n// and '' means \"any version\", just remove the *s entirely.\n\n\nfunction replaceStars(comp, options) {\n  debug('replaceStars', comp, options); // Looseness is ignored here.  star is always as loose as it gets!\n\n  return comp.trim().replace(re[t.STAR], '');\n} // This function is passed to string.replace(re[t.HYPHENRANGE])\n// M, m, patch, prerelease, build\n// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5\n// 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do\n// 1.2 - 3.4 => >=1.2.0 <3.5.0\n\n\nfunction hyphenReplace($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) {\n  if (isX(fM)) {\n    from = '';\n  } else if (isX(fm)) {\n    from = '>=' + fM + '.0.0';\n  } else if (isX(fp)) {\n    from = '>=' + fM + '.' + fm + '.0';\n  } else {\n    from = '>=' + from;\n  }\n\n  if (isX(tM)) {\n    to = '';\n  } else if (isX(tm)) {\n    to = '<' + (+tM + 1) + '.0.0';\n  } else if (isX(tp)) {\n    to = '<' + tM + '.' + (+tm + 1) + '.0';\n  } else if (tpr) {\n    to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr;\n  } else {\n    to = '<=' + to;\n  }\n\n  return (from + ' ' + to).trim();\n} // if ANY of the sets match ALL of its comparators, then pass\n\n\nRange.prototype.test = function (version) {\n  if (!version) {\n    return false;\n  }\n\n  if (typeof version === 'string') {\n    try {\n      version = new SemVer(version, this.options);\n    } catch (er) {\n      return false;\n    }\n  }\n\n  for (var i = 0; i < this.set.length; i++) {\n    if (testSet(this.set[i], version, this.options)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nfunction testSet(set, version, options) {\n  for (var i = 0; i < set.length; i++) {\n    if (!set[i].test(version)) {\n      return false;\n    }\n  }\n\n  if (version.prerelease.length && !options.includePrerelease) {\n    // Find the set of versions that are allowed to have prereleases\n    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0\n    // That should allow `1.2.3-pr.2` to pass.\n    // However, `1.2.4-alpha.notready` should NOT be allowed,\n    // even though it's within the range set by the comparators.\n    for (i = 0; i < set.length; i++) {\n      debug(set[i].semver);\n\n      if (set[i].semver === ANY) {\n        continue;\n      }\n\n      if (set[i].semver.prerelease.length > 0) {\n        var allowed = set[i].semver;\n\n        if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) {\n          return true;\n        }\n      }\n    } // Version has a -pre, but it's not one of the ones we like.\n\n\n    return false;\n  }\n\n  return true;\n}\n\nexports.satisfies = satisfies;\n\nfunction satisfies(version, range, options) {\n  try {\n    range = new Range(range, options);\n  } catch (er) {\n    return false;\n  }\n\n  return range.test(version);\n}\n\nexports.maxSatisfying = maxSatisfying;\n\nfunction maxSatisfying(versions, range, options) {\n  var max = null;\n  var maxSV = null;\n\n  try {\n    var rangeObj = new Range(range, options);\n  } catch (er) {\n    return null;\n  }\n\n  versions.forEach(function (v) {\n    if (rangeObj.test(v)) {\n      // satisfies(v, range, options)\n      if (!max || maxSV.compare(v) === -1) {\n        // compare(max, v, true)\n        max = v;\n        maxSV = new SemVer(max, options);\n      }\n    }\n  });\n  return max;\n}\n\nexports.minSatisfying = minSatisfying;\n\nfunction minSatisfying(versions, range, options) {\n  var min = null;\n  var minSV = null;\n\n  try {\n    var rangeObj = new Range(range, options);\n  } catch (er) {\n    return null;\n  }\n\n  versions.forEach(function (v) {\n    if (rangeObj.test(v)) {\n      // satisfies(v, range, options)\n      if (!min || minSV.compare(v) === 1) {\n        // compare(min, v, true)\n        min = v;\n        minSV = new SemVer(min, options);\n      }\n    }\n  });\n  return min;\n}\n\nexports.minVersion = minVersion;\n\nfunction minVersion(range, loose) {\n  range = new Range(range, loose);\n  var minver = new SemVer('0.0.0');\n\n  if (range.test(minver)) {\n    return minver;\n  }\n\n  minver = new SemVer('0.0.0-0');\n\n  if (range.test(minver)) {\n    return minver;\n  }\n\n  minver = null;\n\n  for (var i = 0; i < range.set.length; ++i) {\n    var comparators = range.set[i];\n    comparators.forEach(function (comparator) {\n      // Clone to avoid manipulating the comparator's semver object.\n      var compver = new SemVer(comparator.semver.version);\n\n      switch (comparator.operator) {\n        case '>':\n          if (compver.prerelease.length === 0) {\n            compver.patch++;\n          } else {\n            compver.prerelease.push(0);\n          }\n\n          compver.raw = compver.format();\n\n        /* fallthrough */\n\n        case '':\n        case '>=':\n          if (!minver || gt(minver, compver)) {\n            minver = compver;\n          }\n\n          break;\n\n        case '<':\n        case '<=':\n          /* Ignore maximum versions */\n          break;\n\n        /* istanbul ignore next */\n\n        default:\n          throw new Error('Unexpected operation: ' + comparator.operator);\n      }\n    });\n  }\n\n  if (minver && range.test(minver)) {\n    return minver;\n  }\n\n  return null;\n}\n\nexports.validRange = validRange;\n\nfunction validRange(range, options) {\n  try {\n    // Return '*' instead of '' so that truthiness works.\n    // This will throw if it's invalid anyway\n    return new Range(range, options).range || '*';\n  } catch (er) {\n    return null;\n  }\n} // Determine if version is less than all the versions possible in the range\n\n\nexports.ltr = ltr;\n\nfunction ltr(version, range, options) {\n  return outside(version, range, '<', options);\n} // Determine if version is greater than all the versions possible in the range.\n\n\nexports.gtr = gtr;\n\nfunction gtr(version, range, options) {\n  return outside(version, range, '>', options);\n}\n\nexports.outside = outside;\n\nfunction outside(version, range, hilo, options) {\n  version = new SemVer(version, options);\n  range = new Range(range, options);\n  var gtfn, ltefn, ltfn, comp, ecomp;\n\n  switch (hilo) {\n    case '>':\n      gtfn = gt;\n      ltefn = lte;\n      ltfn = lt;\n      comp = '>';\n      ecomp = '>=';\n      break;\n\n    case '<':\n      gtfn = lt;\n      ltefn = gte;\n      ltfn = gt;\n      comp = '<';\n      ecomp = '<=';\n      break;\n\n    default:\n      throw new TypeError('Must provide a hilo val of \"<\" or \">\"');\n  } // If it satisifes the range it is not outside\n\n\n  if (satisfies(version, range, options)) {\n    return false;\n  } // From now on, variable terms are as if we're in \"gtr\" mode.\n  // but note that everything is flipped for the \"ltr\" function.\n\n\n  for (var i = 0; i < range.set.length; ++i) {\n    var comparators = range.set[i];\n    var high = null;\n    var low = null;\n    comparators.forEach(function (comparator) {\n      if (comparator.semver === ANY) {\n        comparator = new Comparator('>=0.0.0');\n      }\n\n      high = high || comparator;\n      low = low || comparator;\n\n      if (gtfn(comparator.semver, high.semver, options)) {\n        high = comparator;\n      } else if (ltfn(comparator.semver, low.semver, options)) {\n        low = comparator;\n      }\n    }); // If the edge version comparator has a operator then our version\n    // isn't outside it\n\n    if (high.operator === comp || high.operator === ecomp) {\n      return false;\n    } // If the lowest version comparator has an operator and our version\n    // is less than it then it isn't higher than the range\n\n\n    if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {\n      return false;\n    } else if (low.operator === ecomp && ltfn(version, low.semver)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexports.prerelease = prerelease;\n\nfunction prerelease(version, options) {\n  var parsed = parse(version, options);\n  return parsed && parsed.prerelease.length ? parsed.prerelease : null;\n}\n\nexports.intersects = intersects;\n\nfunction intersects(r1, r2, options) {\n  r1 = new Range(r1, options);\n  r2 = new Range(r2, options);\n  return r1.intersects(r2);\n}\n\nexports.coerce = coerce;\n\nfunction coerce(version, options) {\n  if (version instanceof SemVer) {\n    return version;\n  }\n\n  if (typeof version === 'number') {\n    version = String(version);\n  }\n\n  if (typeof version !== 'string') {\n    return null;\n  }\n\n  options = options || {};\n  var match = null;\n\n  if (!options.rtl) {\n    match = version.match(re[t.COERCE]);\n  } else {\n    // Find the right-most coercible string that does not share\n    // a terminus with a more left-ward coercible string.\n    // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'\n    //\n    // Walk through the string checking with a /g regexp\n    // Manually set the index so as to pick up overlapping matches.\n    // Stop when we get a match that ends at the string end, since no\n    // coercible string can be more right-ward without the same terminus.\n    var next;\n\n    while ((next = re[t.COERCERTL].exec(version)) && (!match || match.index + match[0].length !== version.length)) {\n      if (!match || next.index + next[0].length !== match.index + match[0].length) {\n        match = next;\n      }\n\n      re[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;\n    } // leave it in a clean state\n\n\n    re[t.COERCERTL].lastIndex = -1;\n  }\n\n  if (match === null) {\n    return null;\n  }\n\n  return parse(match[2] + '.' + (match[3] || '0') + '.' + (match[4] || '0'), options);\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../node_modules/process/browser.js */ \"../../node_modules/process/browser.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../react-devtools-shared/node_modules/semver/semver.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/backend/DevToolsComponentStackFrame.js":
/*!***************************************************************************!*\
  !*** ../react-devtools-shared/src/backend/DevToolsComponentStackFrame.js ***!
  \***************************************************************************/
/*! exports provided: describeBuiltInComponentFrame, describeNativeComponentFrame, describeClassComponentFrame, describeFunctionComponentFrame, describeUnknownElementTypeFrameInDEV */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"describeBuiltInComponentFrame\", function() { return describeBuiltInComponentFrame; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"describeNativeComponentFrame\", function() { return describeNativeComponentFrame; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"describeClassComponentFrame\", function() { return describeClassComponentFrame; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"describeFunctionComponentFrame\", function() { return describeFunctionComponentFrame; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"describeUnknownElementTypeFrameInDEV\", function() { return describeUnknownElementTypeFrameInDEV; });\n/* harmony import */ var _ReactSymbols__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ReactSymbols */ \"../react-devtools-shared/src/backend/ReactSymbols.js\");\n/* harmony import */ var _DevToolsConsolePatching__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DevToolsConsolePatching */ \"../react-devtools-shared/src/backend/DevToolsConsolePatching.js\");\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n// This is a DevTools fork of ReactComponentStackFrame.\n// This fork enables DevTools to use the same \"native\" component stack format,\n// while still maintaining support for multiple renderer versions\n// (which use different values for ReactTypeOfWork).\n // The shared console patching code is DEV-only.\n// We can't use it since DevTools only ships production builds.\n\n\nlet prefix;\nfunction describeBuiltInComponentFrame(name, source, ownerFn) {\n  if (prefix === undefined) {\n    // Extract the VM specific prefix used by each line.\n    try {\n      throw Error();\n    } catch (x) {\n      const match = x.stack.trim().match(/\\n( *(at )?)/);\n      prefix = match && match[1] || '';\n    }\n  } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n  return '\\n' + prefix + name;\n}\nlet reentry = false;\nlet componentFrameCache;\n\nif (true) {\n  const PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nfunction describeNativeComponentFrame(fn, construct, currentDispatcherRef) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (!fn || reentry) {\n    return '';\n  }\n\n  if (true) {\n    const frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  let control;\n  const previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  reentry = true; // Override the dispatcher so effects scheduled by this shallow render are thrown away.\n  //\n  // Note that unlike the code this was forked from (in ReactComponentStackFrame)\n  // DevTools should override the dispatcher even when DevTools is compiled in production mode,\n  // because the app itself may be in development mode and log errors/warnings.\n\n  const previousDispatcher = currentDispatcherRef.current;\n  currentDispatcherRef.current = null;\n  Object(_DevToolsConsolePatching__WEBPACK_IMPORTED_MODULE_1__[\"disableLogs\"])();\n\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      const Fake = function () {\n        throw Error();\n      }; // $FlowFixMe\n\n\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function () {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        }\n      });\n\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        }\n\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      }\n\n      fn();\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      const sampleLines = sample.stack.split('\\n');\n      const controlLines = control.stack.split('\\n');\n      let s = sampleLines.length - 1;\n      let c = controlLines.length - 1;\n\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                const frame = '\\n' + sampleLines[s].replace(' at new ', ' at ');\n\n                if (true) {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, frame);\n                  }\n                } // Return the line we found.\n\n\n                return frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n    Error.prepareStackTrace = previousPrepareStackTrace;\n    currentDispatcherRef.current = previousDispatcher;\n    Object(_DevToolsConsolePatching__WEBPACK_IMPORTED_MODULE_1__[\"reenableLogs\"])();\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  const name = fn ? fn.displayName || fn.name : '';\n  const syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  if (true) {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeClassComponentFrame(ctor, source, ownerFn, currentDispatcherRef) {\n  return describeNativeComponentFrame(ctor, true, currentDispatcherRef);\n}\nfunction describeFunctionComponentFrame(fn, source, ownerFn, currentDispatcherRef) {\n  return describeNativeComponentFrame(fn, false, currentDispatcherRef);\n}\n\nfunction shouldConstruct(Component) {\n  const prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn, currentDispatcherRef) {\n  if (false) {}\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    return describeNativeComponentFrame(type, shouldConstruct(type), currentDispatcherRef);\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type, source, ownerFn);\n  }\n\n  switch (type) {\n    case _ReactSymbols__WEBPACK_IMPORTED_MODULE_0__[\"SUSPENSE_NUMBER\"]:\n    case _ReactSymbols__WEBPACK_IMPORTED_MODULE_0__[\"SUSPENSE_SYMBOL_STRING\"]:\n      return describeBuiltInComponentFrame('Suspense', source, ownerFn);\n\n    case _ReactSymbols__WEBPACK_IMPORTED_MODULE_0__[\"SUSPENSE_LIST_NUMBER\"]:\n    case _ReactSymbols__WEBPACK_IMPORTED_MODULE_0__[\"SUSPENSE_LIST_SYMBOL_STRING\"]:\n      return describeBuiltInComponentFrame('SuspenseList', source, ownerFn);\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case _ReactSymbols__WEBPACK_IMPORTED_MODULE_0__[\"FORWARD_REF_NUMBER\"]:\n      case _ReactSymbols__WEBPACK_IMPORTED_MODULE_0__[\"FORWARD_REF_SYMBOL_STRING\"]:\n        return describeFunctionComponentFrame(type.render, source, ownerFn, currentDispatcherRef);\n\n      case _ReactSymbols__WEBPACK_IMPORTED_MODULE_0__[\"MEMO_NUMBER\"]:\n      case _ReactSymbols__WEBPACK_IMPORTED_MODULE_0__[\"MEMO_SYMBOL_STRING\"]:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn, currentDispatcherRef);\n\n      case _ReactSymbols__WEBPACK_IMPORTED_MODULE_0__[\"LAZY_NUMBER\"]:\n      case _ReactSymbols__WEBPACK_IMPORTED_MODULE_0__[\"LAZY_SYMBOL_STRING\"]:\n        {\n          const lazyComponent = type;\n          const payload = lazyComponent._payload;\n          const init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn, currentDispatcherRef);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/backend/DevToolsComponentStackFrame.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/backend/DevToolsConsolePatching.js":
/*!***********************************************************************!*\
  !*** ../react-devtools-shared/src/backend/DevToolsConsolePatching.js ***!
  \***********************************************************************/
/*! exports provided: disableLogs, reenableLogs */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"disableLogs\", function() { return disableLogs; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"reenableLogs\", function() { return reenableLogs; });\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n// This is a DevTools fork of shared/ConsolePatchingDev.\n// The shared console patching code is DEV-only.\n// We can't use it since DevTools only ships production builds.\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nlet disabledDepth = 0;\nlet prevLog;\nlet prevInfo;\nlet prevWarn;\nlet prevError;\nlet prevGroup;\nlet prevGroupCollapsed;\nlet prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  if (disabledDepth === 0) {\n    /* eslint-disable react-internal/no-production-logging */\n    prevLog = console.log;\n    prevInfo = console.info;\n    prevWarn = console.warn;\n    prevError = console.error;\n    prevGroup = console.group;\n    prevGroupCollapsed = console.groupCollapsed;\n    prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n    const props = {\n      configurable: true,\n      enumerable: true,\n      value: disabledLog,\n      writable: true\n    }; // $FlowFixMe Flow thinks console is immutable.\n\n    Object.defineProperties(console, {\n      info: props,\n      log: props,\n      warn: props,\n      error: props,\n      group: props,\n      groupCollapsed: props,\n      groupEnd: props\n    });\n    /* eslint-enable react-internal/no-production-logging */\n  }\n\n  disabledDepth++;\n}\nfunction reenableLogs() {\n  disabledDepth--;\n\n  if (disabledDepth === 0) {\n    /* eslint-disable react-internal/no-production-logging */\n    const props = {\n      configurable: true,\n      enumerable: true,\n      writable: true\n    }; // $FlowFixMe Flow thinks console is immutable.\n\n    Object.defineProperties(console, {\n      log: { ...props,\n        value: prevLog\n      },\n      info: { ...props,\n        value: prevInfo\n      },\n      warn: { ...props,\n        value: prevWarn\n      },\n      error: { ...props,\n        value: prevError\n      },\n      group: { ...props,\n        value: prevGroup\n      },\n      groupCollapsed: { ...props,\n        value: prevGroupCollapsed\n      },\n      groupEnd: { ...props,\n        value: prevGroupEnd\n      }\n    });\n    /* eslint-enable react-internal/no-production-logging */\n  }\n\n  if (disabledDepth < 0) {\n    console.error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vcmVhY3QtZGV2dG9vbHMtc2hhcmVkL3NyYy9iYWNrZW5kL0RldlRvb2xzQ29uc29sZVBhdGNoaW5nLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL3JlYWN0LWRldnRvb2xzLXNoYXJlZC9zcmMvYmFja2VuZC9EZXZUb29sc0NvbnNvbGVQYXRjaGluZy5qcz9kODhlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG4vLyBUaGlzIGlzIGEgRGV2VG9vbHMgZm9yayBvZiBzaGFyZWQvQ29uc29sZVBhdGNoaW5nRGV2LlxuLy8gVGhlIHNoYXJlZCBjb25zb2xlIHBhdGNoaW5nIGNvZGUgaXMgREVWLW9ubHkuXG4vLyBXZSBjYW4ndCB1c2UgaXQgc2luY2UgRGV2VG9vbHMgb25seSBzaGlwcyBwcm9kdWN0aW9uIGJ1aWxkcy5cblxuLy8gSGVscGVycyB0byBwYXRjaCBjb25zb2xlLmxvZ3MgdG8gYXZvaWQgbG9nZ2luZyBkdXJpbmcgc2lkZS1lZmZlY3QgZnJlZVxuLy8gcmVwbGF5aW5nIG9uIHJlbmRlciBmdW5jdGlvbi4gVGhpcyBjdXJyZW50bHkgb25seSBwYXRjaGVzIHRoZSBvYmplY3Rcbi8vIGxhemlseSB3aGljaCB3b24ndCBjb3ZlciBpZiB0aGUgbG9nIGZ1bmN0aW9uIHdhcyBleHRyYWN0ZWQgZWFnZXJseS5cbi8vIFdlIGNvdWxkIGFsc28gZWFnZXJseSBwYXRjaCB0aGUgbWV0aG9kLlxuXG5sZXQgZGlzYWJsZWREZXB0aCA9IDA7XG5sZXQgcHJldkxvZztcbmxldCBwcmV2SW5mbztcbmxldCBwcmV2V2FybjtcbmxldCBwcmV2RXJyb3I7XG5sZXQgcHJldkdyb3VwO1xubGV0IHByZXZHcm91cENvbGxhcHNlZDtcbmxldCBwcmV2R3JvdXBFbmQ7XG5cbmZ1bmN0aW9uIGRpc2FibGVkTG9nKCkge31cbmRpc2FibGVkTG9nLl9fcmVhY3REaXNhYmxlZExvZyA9IHRydWU7XG5cbmV4cG9ydCBmdW5jdGlvbiBkaXNhYmxlTG9ncygpOiB2b2lkIHtcbiAgaWYgKGRpc2FibGVkRGVwdGggPT09IDApIHtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC1pbnRlcm5hbC9uby1wcm9kdWN0aW9uLWxvZ2dpbmcgKi9cbiAgICBwcmV2TG9nID0gY29uc29sZS5sb2c7XG4gICAgcHJldkluZm8gPSBjb25zb2xlLmluZm87XG4gICAgcHJldldhcm4gPSBjb25zb2xlLndhcm47XG4gICAgcHJldkVycm9yID0gY29uc29sZS5lcnJvcjtcbiAgICBwcmV2R3JvdXAgPSBjb25zb2xlLmdyb3VwO1xuICAgIHByZXZHcm91cENvbGxhcHNlZCA9IGNvbnNvbGUuZ3JvdXBDb2xsYXBzZWQ7XG4gICAgcHJldkdyb3VwRW5kID0gY29uc29sZS5ncm91cEVuZDtcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzE5MDk5XG4gICAgY29uc3QgcHJvcHMgPSB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IGRpc2FibGVkTG9nLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgfTtcbiAgICAvLyAkRmxvd0ZpeE1lIEZsb3cgdGhpbmtzIGNvbnNvbGUgaXMgaW1tdXRhYmxlLlxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGNvbnNvbGUsIHtcbiAgICAgIGluZm86IHByb3BzLFxuICAgICAgbG9nOiBwcm9wcyxcbiAgICAgIHdhcm46IHByb3BzLFxuICAgICAgZXJyb3I6IHByb3BzLFxuICAgICAgZ3JvdXA6IHByb3BzLFxuICAgICAgZ3JvdXBDb2xsYXBzZWQ6IHByb3BzLFxuICAgICAgZ3JvdXBFbmQ6IHByb3BzLFxuICAgIH0pO1xuICAgIC8qIGVzbGludC1lbmFibGUgcmVhY3QtaW50ZXJuYWwvbm8tcHJvZHVjdGlvbi1sb2dnaW5nICovXG4gIH1cbiAgZGlzYWJsZWREZXB0aCsrO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVlbmFibGVMb2dzKCk6IHZvaWQge1xuICBkaXNhYmxlZERlcHRoLS07XG4gIGlmIChkaXNhYmxlZERlcHRoID09PSAwKSB7XG4gICAgLyogZXNsaW50LWRpc2FibGUgcmVhY3QtaW50ZXJuYWwvbm8tcHJvZHVjdGlvbi1sb2dnaW5nICovXG4gICAgY29uc3QgcHJvcHMgPSB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgfTtcbiAgICAvLyAkRmxvd0ZpeE1lIEZsb3cgdGhpbmtzIGNvbnNvbGUgaXMgaW1tdXRhYmxlLlxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGNvbnNvbGUsIHtcbiAgICAgIGxvZzogey4uLnByb3BzLCB2YWx1ZTogcHJldkxvZ30sXG4gICAgICBpbmZvOiB7Li4ucHJvcHMsIHZhbHVlOiBwcmV2SW5mb30sXG4gICAgICB3YXJuOiB7Li4ucHJvcHMsIHZhbHVlOiBwcmV2V2Fybn0sXG4gICAgICBlcnJvcjogey4uLnByb3BzLCB2YWx1ZTogcHJldkVycm9yfSxcbiAgICAgIGdyb3VwOiB7Li4ucHJvcHMsIHZhbHVlOiBwcmV2R3JvdXB9LFxuICAgICAgZ3JvdXBDb2xsYXBzZWQ6IHsuLi5wcm9wcywgdmFsdWU6IHByZXZHcm91cENvbGxhcHNlZH0sXG4gICAgICBncm91cEVuZDogey4uLnByb3BzLCB2YWx1ZTogcHJldkdyb3VwRW5kfSxcbiAgICB9KTtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIHJlYWN0LWludGVybmFsL25vLXByb2R1Y3Rpb24tbG9nZ2luZyAqL1xuICB9XG4gIGlmIChkaXNhYmxlZERlcHRoIDwgMCkge1xuICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAnZGlzYWJsZWREZXB0aCBmZWxsIGJlbG93IHplcm8uICcgK1xuICAgICAgICAnVGhpcyBpcyBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJyxcbiAgICApO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBOzs7Ozs7OztBQVNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQUNBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVBBO0FBU0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBQ0E7QUFLQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQVBBO0FBU0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUlBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/backend/DevToolsConsolePatching.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/backend/DevToolsFiberComponentStack.js":
/*!***************************************************************************!*\
  !*** ../react-devtools-shared/src/backend/DevToolsFiberComponentStack.js ***!
  \***************************************************************************/
/*! exports provided: getStackByFiberInDevAndProd */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getStackByFiberInDevAndProd\", function() { return getStackByFiberInDevAndProd; });\n/* harmony import */ var _DevToolsComponentStackFrame__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DevToolsComponentStackFrame */ \"../react-devtools-shared/src/backend/DevToolsComponentStackFrame.js\");\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n// This is a DevTools fork of ReactFiberComponentStack.\n// This fork enables DevTools to use the same \"native\" component stack format,\n// while still maintaining support for multiple renderer versions\n// (which use different values for ReactTypeOfWork).\n\n\nfunction describeFiber(workTagMap, workInProgress, currentDispatcherRef) {\n  const {\n    HostComponent,\n    LazyComponent,\n    SuspenseComponent,\n    SuspenseListComponent,\n    FunctionComponent,\n    IndeterminateComponent,\n    SimpleMemoComponent,\n    ForwardRef,\n    ClassComponent\n  } = workTagMap;\n  const owner =  true ? workInProgress._debugOwner ? workInProgress._debugOwner.type : null : undefined;\n  const source =  true ? workInProgress._debugSource : undefined;\n\n  switch (workInProgress.tag) {\n    case HostComponent:\n      return Object(_DevToolsComponentStackFrame__WEBPACK_IMPORTED_MODULE_0__[\"describeBuiltInComponentFrame\"])(workInProgress.type, source, owner);\n\n    case LazyComponent:\n      return Object(_DevToolsComponentStackFrame__WEBPACK_IMPORTED_MODULE_0__[\"describeBuiltInComponentFrame\"])('Lazy', source, owner);\n\n    case SuspenseComponent:\n      return Object(_DevToolsComponentStackFrame__WEBPACK_IMPORTED_MODULE_0__[\"describeBuiltInComponentFrame\"])('Suspense', source, owner);\n\n    case SuspenseListComponent:\n      return Object(_DevToolsComponentStackFrame__WEBPACK_IMPORTED_MODULE_0__[\"describeBuiltInComponentFrame\"])('SuspenseList', source, owner);\n\n    case FunctionComponent:\n    case IndeterminateComponent:\n    case SimpleMemoComponent:\n      return Object(_DevToolsComponentStackFrame__WEBPACK_IMPORTED_MODULE_0__[\"describeFunctionComponentFrame\"])(workInProgress.type, source, owner, currentDispatcherRef);\n\n    case ForwardRef:\n      return Object(_DevToolsComponentStackFrame__WEBPACK_IMPORTED_MODULE_0__[\"describeFunctionComponentFrame\"])(workInProgress.type.render, source, owner, currentDispatcherRef);\n\n    case ClassComponent:\n      return Object(_DevToolsComponentStackFrame__WEBPACK_IMPORTED_MODULE_0__[\"describeClassComponentFrame\"])(workInProgress.type, source, owner, currentDispatcherRef);\n\n    default:\n      return '';\n  }\n}\n\nfunction getStackByFiberInDevAndProd(workTagMap, workInProgress, currentDispatcherRef) {\n  try {\n    let info = '';\n    let node = workInProgress;\n\n    do {\n      info += describeFiber(workTagMap, node, currentDispatcherRef);\n      node = node.return;\n    } while (node);\n\n    return info;\n  } catch (x) {\n    return '\\nError generating stack: ' + x.message + '\\n' + x.stack;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vcmVhY3QtZGV2dG9vbHMtc2hhcmVkL3NyYy9iYWNrZW5kL0RldlRvb2xzRmliZXJDb21wb25lbnRTdGFjay5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9yZWFjdC1kZXZ0b29scy1zaGFyZWQvc3JjL2JhY2tlbmQvRGV2VG9vbHNGaWJlckNvbXBvbmVudFN0YWNrLmpzPzE4ZTEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbi8vIFRoaXMgaXMgYSBEZXZUb29scyBmb3JrIG9mIFJlYWN0RmliZXJDb21wb25lbnRTdGFjay5cbi8vIFRoaXMgZm9yayBlbmFibGVzIERldlRvb2xzIHRvIHVzZSB0aGUgc2FtZSBcIm5hdGl2ZVwiIGNvbXBvbmVudCBzdGFjayBmb3JtYXQsXG4vLyB3aGlsZSBzdGlsbCBtYWludGFpbmluZyBzdXBwb3J0IGZvciBtdWx0aXBsZSByZW5kZXJlciB2ZXJzaW9uc1xuLy8gKHdoaWNoIHVzZSBkaWZmZXJlbnQgdmFsdWVzIGZvciBSZWFjdFR5cGVPZldvcmspLlxuXG5pbXBvcnQgdHlwZSB7RmliZXJ9IGZyb20gJ3JlYWN0LXJlY29uY2lsZXIvc3JjL1JlYWN0SW50ZXJuYWxUeXBlcyc7XG5pbXBvcnQgdHlwZSB7Q3VycmVudERpc3BhdGNoZXJSZWYsIFdvcmtUYWdNYXB9IGZyb20gJy4vdHlwZXMnO1xuXG5pbXBvcnQge1xuICBkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZSxcbiAgZGVzY3JpYmVGdW5jdGlvbkNvbXBvbmVudEZyYW1lLFxuICBkZXNjcmliZUNsYXNzQ29tcG9uZW50RnJhbWUsXG59IGZyb20gJy4vRGV2VG9vbHNDb21wb25lbnRTdGFja0ZyYW1lJztcblxuZnVuY3Rpb24gZGVzY3JpYmVGaWJlcihcbiAgd29ya1RhZ01hcDogV29ya1RhZ01hcCxcbiAgd29ya0luUHJvZ3Jlc3M6IEZpYmVyLFxuICBjdXJyZW50RGlzcGF0Y2hlclJlZjogQ3VycmVudERpc3BhdGNoZXJSZWYsXG4pOiBzdHJpbmcge1xuICBjb25zdCB7XG4gICAgSG9zdENvbXBvbmVudCxcbiAgICBMYXp5Q29tcG9uZW50LFxuICAgIFN1c3BlbnNlQ29tcG9uZW50LFxuICAgIFN1c3BlbnNlTGlzdENvbXBvbmVudCxcbiAgICBGdW5jdGlvbkNvbXBvbmVudCxcbiAgICBJbmRldGVybWluYXRlQ29tcG9uZW50LFxuICAgIFNpbXBsZU1lbW9Db21wb25lbnQsXG4gICAgRm9yd2FyZFJlZixcbiAgICBDbGFzc0NvbXBvbmVudCxcbiAgfSA9IHdvcmtUYWdNYXA7XG5cbiAgY29uc3Qgb3duZXI6IG51bGwgfCBGdW5jdGlvbiA9IF9fREVWX19cbiAgICA/IHdvcmtJblByb2dyZXNzLl9kZWJ1Z093bmVyXG4gICAgICA/IHdvcmtJblByb2dyZXNzLl9kZWJ1Z093bmVyLnR5cGVcbiAgICAgIDogbnVsbFxuICAgIDogbnVsbDtcbiAgY29uc3Qgc291cmNlID0gX19ERVZfXyA/IHdvcmtJblByb2dyZXNzLl9kZWJ1Z1NvdXJjZSA6IG51bGw7XG4gIHN3aXRjaCAod29ya0luUHJvZ3Jlc3MudGFnKSB7XG4gICAgY2FzZSBIb3N0Q29tcG9uZW50OlxuICAgICAgcmV0dXJuIGRlc2NyaWJlQnVpbHRJbkNvbXBvbmVudEZyYW1lKHdvcmtJblByb2dyZXNzLnR5cGUsIHNvdXJjZSwgb3duZXIpO1xuICAgIGNhc2UgTGF6eUNvbXBvbmVudDpcbiAgICAgIHJldHVybiBkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZSgnTGF6eScsIHNvdXJjZSwgb3duZXIpO1xuICAgIGNhc2UgU3VzcGVuc2VDb21wb25lbnQ6XG4gICAgICByZXR1cm4gZGVzY3JpYmVCdWlsdEluQ29tcG9uZW50RnJhbWUoJ1N1c3BlbnNlJywgc291cmNlLCBvd25lcik7XG4gICAgY2FzZSBTdXNwZW5zZUxpc3RDb21wb25lbnQ6XG4gICAgICByZXR1cm4gZGVzY3JpYmVCdWlsdEluQ29tcG9uZW50RnJhbWUoJ1N1c3BlbnNlTGlzdCcsIHNvdXJjZSwgb3duZXIpO1xuICAgIGNhc2UgRnVuY3Rpb25Db21wb25lbnQ6XG4gICAgY2FzZSBJbmRldGVybWluYXRlQ29tcG9uZW50OlxuICAgIGNhc2UgU2ltcGxlTWVtb0NvbXBvbmVudDpcbiAgICAgIHJldHVybiBkZXNjcmliZUZ1bmN0aW9uQ29tcG9uZW50RnJhbWUoXG4gICAgICAgIHdvcmtJblByb2dyZXNzLnR5cGUsXG4gICAgICAgIHNvdXJjZSxcbiAgICAgICAgb3duZXIsXG4gICAgICAgIGN1cnJlbnREaXNwYXRjaGVyUmVmLFxuICAgICAgKTtcbiAgICBjYXNlIEZvcndhcmRSZWY6XG4gICAgICByZXR1cm4gZGVzY3JpYmVGdW5jdGlvbkNvbXBvbmVudEZyYW1lKFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy50eXBlLnJlbmRlcixcbiAgICAgICAgc291cmNlLFxuICAgICAgICBvd25lcixcbiAgICAgICAgY3VycmVudERpc3BhdGNoZXJSZWYsXG4gICAgICApO1xuICAgIGNhc2UgQ2xhc3NDb21wb25lbnQ6XG4gICAgICByZXR1cm4gZGVzY3JpYmVDbGFzc0NvbXBvbmVudEZyYW1lKFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy50eXBlLFxuICAgICAgICBzb3VyY2UsXG4gICAgICAgIG93bmVyLFxuICAgICAgICBjdXJyZW50RGlzcGF0Y2hlclJlZixcbiAgICAgICk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAnJztcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3RhY2tCeUZpYmVySW5EZXZBbmRQcm9kKFxuICB3b3JrVGFnTWFwOiBXb3JrVGFnTWFwLFxuICB3b3JrSW5Qcm9ncmVzczogRmliZXIsXG4gIGN1cnJlbnREaXNwYXRjaGVyUmVmOiBDdXJyZW50RGlzcGF0Y2hlclJlZixcbik6IHN0cmluZyB7XG4gIHRyeSB7XG4gICAgbGV0IGluZm8gPSAnJztcbiAgICBsZXQgbm9kZSA9IHdvcmtJblByb2dyZXNzO1xuICAgIGRvIHtcbiAgICAgIGluZm8gKz0gZGVzY3JpYmVGaWJlcih3b3JrVGFnTWFwLCBub2RlLCBjdXJyZW50RGlzcGF0Y2hlclJlZik7XG4gICAgICBub2RlID0gbm9kZS5yZXR1cm47XG4gICAgfSB3aGlsZSAobm9kZSk7XG4gICAgcmV0dXJuIGluZm87XG4gIH0gY2F0Y2ggKHgpIHtcbiAgICByZXR1cm4gJ1xcbkVycm9yIGdlbmVyYXRpbmcgc3RhY2s6ICcgKyB4Lm1lc3NhZ2UgKyAnXFxuJyArIHguc3RhY2s7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7Ozs7O0FBU0E7QUFDQTtBQUNBO0FBQ0E7QUFLQTtBQUNBO0FBS0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVRBO0FBWUE7QUFLQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBS0E7QUFDQTtBQWpDQTtBQW1DQTtBQUNBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/backend/DevToolsFiberComponentStack.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/backend/ReactSymbols.js":
/*!************************************************************!*\
  !*** ../react-devtools-shared/src/backend/ReactSymbols.js ***!
  \************************************************************/
/*! exports provided: CONCURRENT_MODE_NUMBER, CONCURRENT_MODE_SYMBOL_STRING, CONTEXT_NUMBER, CONTEXT_SYMBOL_STRING, DEPRECATED_ASYNC_MODE_SYMBOL_STRING, ELEMENT_NUMBER, ELEMENT_SYMBOL_STRING, DEBUG_TRACING_MODE_NUMBER, DEBUG_TRACING_MODE_SYMBOL_STRING, FORWARD_REF_NUMBER, FORWARD_REF_SYMBOL_STRING, FRAGMENT_NUMBER, FRAGMENT_SYMBOL_STRING, LAZY_NUMBER, LAZY_SYMBOL_STRING, MEMO_NUMBER, MEMO_SYMBOL_STRING, PORTAL_NUMBER, PORTAL_SYMBOL_STRING, PROFILER_NUMBER, PROFILER_SYMBOL_STRING, PROVIDER_NUMBER, PROVIDER_SYMBOL_STRING, SCOPE_NUMBER, SCOPE_SYMBOL_STRING, STRICT_MODE_NUMBER, STRICT_MODE_SYMBOL_STRING, SUSPENSE_NUMBER, SUSPENSE_SYMBOL_STRING, SUSPENSE_LIST_NUMBER, SUSPENSE_LIST_SYMBOL_STRING */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CONCURRENT_MODE_NUMBER\", function() { return CONCURRENT_MODE_NUMBER; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CONCURRENT_MODE_SYMBOL_STRING\", function() { return CONCURRENT_MODE_SYMBOL_STRING; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CONTEXT_NUMBER\", function() { return CONTEXT_NUMBER; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CONTEXT_SYMBOL_STRING\", function() { return CONTEXT_SYMBOL_STRING; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DEPRECATED_ASYNC_MODE_SYMBOL_STRING\", function() { return DEPRECATED_ASYNC_MODE_SYMBOL_STRING; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ELEMENT_NUMBER\", function() { return ELEMENT_NUMBER; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ELEMENT_SYMBOL_STRING\", function() { return ELEMENT_SYMBOL_STRING; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DEBUG_TRACING_MODE_NUMBER\", function() { return DEBUG_TRACING_MODE_NUMBER; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DEBUG_TRACING_MODE_SYMBOL_STRING\", function() { return DEBUG_TRACING_MODE_SYMBOL_STRING; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FORWARD_REF_NUMBER\", function() { return FORWARD_REF_NUMBER; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FORWARD_REF_SYMBOL_STRING\", function() { return FORWARD_REF_SYMBOL_STRING; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FRAGMENT_NUMBER\", function() { return FRAGMENT_NUMBER; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FRAGMENT_SYMBOL_STRING\", function() { return FRAGMENT_SYMBOL_STRING; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LAZY_NUMBER\", function() { return LAZY_NUMBER; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LAZY_SYMBOL_STRING\", function() { return LAZY_SYMBOL_STRING; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MEMO_NUMBER\", function() { return MEMO_NUMBER; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MEMO_SYMBOL_STRING\", function() { return MEMO_SYMBOL_STRING; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PORTAL_NUMBER\", function() { return PORTAL_NUMBER; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PORTAL_SYMBOL_STRING\", function() { return PORTAL_SYMBOL_STRING; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PROFILER_NUMBER\", function() { return PROFILER_NUMBER; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PROFILER_SYMBOL_STRING\", function() { return PROFILER_SYMBOL_STRING; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PROVIDER_NUMBER\", function() { return PROVIDER_NUMBER; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PROVIDER_SYMBOL_STRING\", function() { return PROVIDER_SYMBOL_STRING; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SCOPE_NUMBER\", function() { return SCOPE_NUMBER; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SCOPE_SYMBOL_STRING\", function() { return SCOPE_SYMBOL_STRING; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"STRICT_MODE_NUMBER\", function() { return STRICT_MODE_NUMBER; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"STRICT_MODE_SYMBOL_STRING\", function() { return STRICT_MODE_SYMBOL_STRING; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SUSPENSE_NUMBER\", function() { return SUSPENSE_NUMBER; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SUSPENSE_SYMBOL_STRING\", function() { return SUSPENSE_SYMBOL_STRING; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SUSPENSE_LIST_NUMBER\", function() { return SUSPENSE_LIST_NUMBER; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SUSPENSE_LIST_SYMBOL_STRING\", function() { return SUSPENSE_LIST_SYMBOL_STRING; });\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n// This list should be kept updated to reflect additions to 'shared/ReactSymbols'.\n// DevTools can't import symbols from 'shared/ReactSymbols' directly for two reasons:\n// 1. DevTools requires symbols which may have been deleted in more recent versions (e.g. concurrent mode)\n// 2. DevTools must support both Symbol and numeric forms of each symbol;\n//    Since e.g. standalone DevTools runs in a separate process, it can't rely on its own ES capabilities.\nconst CONCURRENT_MODE_NUMBER = 0xeacf;\nconst CONCURRENT_MODE_SYMBOL_STRING = 'Symbol(react.concurrent_mode)';\nconst CONTEXT_NUMBER = 0xeace;\nconst CONTEXT_SYMBOL_STRING = 'Symbol(react.context)';\nconst DEPRECATED_ASYNC_MODE_SYMBOL_STRING = 'Symbol(react.async_mode)';\nconst ELEMENT_NUMBER = 0xeac7;\nconst ELEMENT_SYMBOL_STRING = 'Symbol(react.element)';\nconst DEBUG_TRACING_MODE_NUMBER = 0xeae1;\nconst DEBUG_TRACING_MODE_SYMBOL_STRING = 'Symbol(react.debug_trace_mode)';\nconst FORWARD_REF_NUMBER = 0xead0;\nconst FORWARD_REF_SYMBOL_STRING = 'Symbol(react.forward_ref)';\nconst FRAGMENT_NUMBER = 0xeacb;\nconst FRAGMENT_SYMBOL_STRING = 'Symbol(react.fragment)';\nconst LAZY_NUMBER = 0xead4;\nconst LAZY_SYMBOL_STRING = 'Symbol(react.lazy)';\nconst MEMO_NUMBER = 0xead3;\nconst MEMO_SYMBOL_STRING = 'Symbol(react.memo)';\nconst PORTAL_NUMBER = 0xeaca;\nconst PORTAL_SYMBOL_STRING = 'Symbol(react.portal)';\nconst PROFILER_NUMBER = 0xead2;\nconst PROFILER_SYMBOL_STRING = 'Symbol(react.profiler)';\nconst PROVIDER_NUMBER = 0xeacd;\nconst PROVIDER_SYMBOL_STRING = 'Symbol(react.provider)';\nconst SCOPE_NUMBER = 0xead7;\nconst SCOPE_SYMBOL_STRING = 'Symbol(react.scope)';\nconst STRICT_MODE_NUMBER = 0xeacc;\nconst STRICT_MODE_SYMBOL_STRING = 'Symbol(react.strict_mode)';\nconst SUSPENSE_NUMBER = 0xead1;\nconst SUSPENSE_SYMBOL_STRING = 'Symbol(react.suspense)';\nconst SUSPENSE_LIST_NUMBER = 0xead8;\nconst SUSPENSE_LIST_SYMBOL_STRING = 'Symbol(react.suspense_list)';//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vcmVhY3QtZGV2dG9vbHMtc2hhcmVkL3NyYy9iYWNrZW5kL1JlYWN0U3ltYm9scy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9yZWFjdC1kZXZ0b29scy1zaGFyZWQvc3JjL2JhY2tlbmQvUmVhY3RTeW1ib2xzLmpzP2Y4MjAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbi8vIFRoaXMgbGlzdCBzaG91bGQgYmUga2VwdCB1cGRhdGVkIHRvIHJlZmxlY3QgYWRkaXRpb25zIHRvICdzaGFyZWQvUmVhY3RTeW1ib2xzJy5cbi8vIERldlRvb2xzIGNhbid0IGltcG9ydCBzeW1ib2xzIGZyb20gJ3NoYXJlZC9SZWFjdFN5bWJvbHMnIGRpcmVjdGx5IGZvciB0d28gcmVhc29uczpcbi8vIDEuIERldlRvb2xzIHJlcXVpcmVzIHN5bWJvbHMgd2hpY2ggbWF5IGhhdmUgYmVlbiBkZWxldGVkIGluIG1vcmUgcmVjZW50IHZlcnNpb25zIChlLmcuIGNvbmN1cnJlbnQgbW9kZSlcbi8vIDIuIERldlRvb2xzIG11c3Qgc3VwcG9ydCBib3RoIFN5bWJvbCBhbmQgbnVtZXJpYyBmb3JtcyBvZiBlYWNoIHN5bWJvbDtcbi8vICAgIFNpbmNlIGUuZy4gc3RhbmRhbG9uZSBEZXZUb29scyBydW5zIGluIGEgc2VwYXJhdGUgcHJvY2VzcywgaXQgY2FuJ3QgcmVseSBvbiBpdHMgb3duIEVTIGNhcGFiaWxpdGllcy5cblxuZXhwb3J0IGNvbnN0IENPTkNVUlJFTlRfTU9ERV9OVU1CRVIgPSAweGVhY2Y7XG5leHBvcnQgY29uc3QgQ09OQ1VSUkVOVF9NT0RFX1NZTUJPTF9TVFJJTkcgPSAnU3ltYm9sKHJlYWN0LmNvbmN1cnJlbnRfbW9kZSknO1xuXG5leHBvcnQgY29uc3QgQ09OVEVYVF9OVU1CRVIgPSAweGVhY2U7XG5leHBvcnQgY29uc3QgQ09OVEVYVF9TWU1CT0xfU1RSSU5HID0gJ1N5bWJvbChyZWFjdC5jb250ZXh0KSc7XG5cbmV4cG9ydCBjb25zdCBERVBSRUNBVEVEX0FTWU5DX01PREVfU1lNQk9MX1NUUklORyA9ICdTeW1ib2wocmVhY3QuYXN5bmNfbW9kZSknO1xuXG5leHBvcnQgY29uc3QgRUxFTUVOVF9OVU1CRVIgPSAweGVhYzc7XG5leHBvcnQgY29uc3QgRUxFTUVOVF9TWU1CT0xfU1RSSU5HID0gJ1N5bWJvbChyZWFjdC5lbGVtZW50KSc7XG5cbmV4cG9ydCBjb25zdCBERUJVR19UUkFDSU5HX01PREVfTlVNQkVSID0gMHhlYWUxO1xuZXhwb3J0IGNvbnN0IERFQlVHX1RSQUNJTkdfTU9ERV9TWU1CT0xfU1RSSU5HID1cbiAgJ1N5bWJvbChyZWFjdC5kZWJ1Z190cmFjZV9tb2RlKSc7XG5cbmV4cG9ydCBjb25zdCBGT1JXQVJEX1JFRl9OVU1CRVIgPSAweGVhZDA7XG5leHBvcnQgY29uc3QgRk9SV0FSRF9SRUZfU1lNQk9MX1NUUklORyA9ICdTeW1ib2wocmVhY3QuZm9yd2FyZF9yZWYpJztcblxuZXhwb3J0IGNvbnN0IEZSQUdNRU5UX05VTUJFUiA9IDB4ZWFjYjtcbmV4cG9ydCBjb25zdCBGUkFHTUVOVF9TWU1CT0xfU1RSSU5HID0gJ1N5bWJvbChyZWFjdC5mcmFnbWVudCknO1xuXG5leHBvcnQgY29uc3QgTEFaWV9OVU1CRVIgPSAweGVhZDQ7XG5leHBvcnQgY29uc3QgTEFaWV9TWU1CT0xfU1RSSU5HID0gJ1N5bWJvbChyZWFjdC5sYXp5KSc7XG5cbmV4cG9ydCBjb25zdCBNRU1PX05VTUJFUiA9IDB4ZWFkMztcbmV4cG9ydCBjb25zdCBNRU1PX1NZTUJPTF9TVFJJTkcgPSAnU3ltYm9sKHJlYWN0Lm1lbW8pJztcblxuZXhwb3J0IGNvbnN0IFBPUlRBTF9OVU1CRVIgPSAweGVhY2E7XG5leHBvcnQgY29uc3QgUE9SVEFMX1NZTUJPTF9TVFJJTkcgPSAnU3ltYm9sKHJlYWN0LnBvcnRhbCknO1xuXG5leHBvcnQgY29uc3QgUFJPRklMRVJfTlVNQkVSID0gMHhlYWQyO1xuZXhwb3J0IGNvbnN0IFBST0ZJTEVSX1NZTUJPTF9TVFJJTkcgPSAnU3ltYm9sKHJlYWN0LnByb2ZpbGVyKSc7XG5cbmV4cG9ydCBjb25zdCBQUk9WSURFUl9OVU1CRVIgPSAweGVhY2Q7XG5leHBvcnQgY29uc3QgUFJPVklERVJfU1lNQk9MX1NUUklORyA9ICdTeW1ib2wocmVhY3QucHJvdmlkZXIpJztcblxuZXhwb3J0IGNvbnN0IFNDT1BFX05VTUJFUiA9IDB4ZWFkNztcbmV4cG9ydCBjb25zdCBTQ09QRV9TWU1CT0xfU1RSSU5HID0gJ1N5bWJvbChyZWFjdC5zY29wZSknO1xuXG5leHBvcnQgY29uc3QgU1RSSUNUX01PREVfTlVNQkVSID0gMHhlYWNjO1xuZXhwb3J0IGNvbnN0IFNUUklDVF9NT0RFX1NZTUJPTF9TVFJJTkcgPSAnU3ltYm9sKHJlYWN0LnN0cmljdF9tb2RlKSc7XG5cbmV4cG9ydCBjb25zdCBTVVNQRU5TRV9OVU1CRVIgPSAweGVhZDE7XG5leHBvcnQgY29uc3QgU1VTUEVOU0VfU1lNQk9MX1NUUklORyA9ICdTeW1ib2wocmVhY3Quc3VzcGVuc2UpJztcblxuZXhwb3J0IGNvbnN0IFNVU1BFTlNFX0xJU1RfTlVNQkVSID0gMHhlYWQ4O1xuZXhwb3J0IGNvbnN0IFNVU1BFTlNFX0xJU1RfU1lNQk9MX1NUUklORyA9ICdTeW1ib2wocmVhY3Quc3VzcGVuc2VfbGlzdCknO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7Ozs7O0FBU0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUdBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/backend/ReactSymbols.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/backend/StyleX/utils.js":
/*!************************************************************!*\
  !*** ../react-devtools-shared/src/backend/StyleX/utils.js ***!
  \************************************************************/
/*! exports provided: getStyleXData, crawlData */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getStyleXData\", function() { return getStyleXData; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"crawlData\", function() { return crawlData; });\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nconst cachedStyleNameToValueMap = new Map();\nfunction getStyleXData(data) {\n  const sources = new Set();\n  const resolvedStyles = {};\n  crawlData(data, sources, resolvedStyles);\n  return {\n    sources: Array.from(sources).sort(),\n    resolvedStyles\n  };\n}\nfunction crawlData(data, sources, resolvedStyles) {\n  if (Array.isArray(data)) {\n    data.forEach(entry => {\n      if (Array.isArray(entry)) {\n        crawlData(entry, sources, resolvedStyles);\n      } else {\n        crawlObjectProperties(entry, sources, resolvedStyles);\n      }\n    });\n  } else {\n    crawlObjectProperties(data, sources, resolvedStyles);\n  }\n\n  resolvedStyles = Object.fromEntries(Object.entries(resolvedStyles).sort());\n}\n\nfunction crawlObjectProperties(entry, sources, resolvedStyles) {\n  const keys = Object.keys(entry);\n  keys.forEach(key => {\n    const value = entry[key];\n\n    if (typeof value === 'string') {\n      if (key === value) {\n        // Special case; this key is the name of the style's source/file/module.\n        sources.add(key);\n      } else {\n        resolvedStyles[key] = getPropertyValueForStyleName(value);\n      }\n    } else {\n      const nestedStyle = {};\n      resolvedStyles[key] = nestedStyle;\n      crawlData([value], sources, nestedStyle);\n    }\n  });\n}\n\nfunction getPropertyValueForStyleName(styleName) {\n  if (cachedStyleNameToValueMap.has(styleName)) {\n    return cachedStyleNameToValueMap.get(styleName);\n  }\n\n  for (let styleSheetIndex = 0; styleSheetIndex < document.styleSheets.length; styleSheetIndex++) {\n    const styleSheet = document.styleSheets[styleSheetIndex]; // $FlowFixMe Flow doesn't konw about these properties\n\n    const rules = styleSheet.rules || styleSheet.cssRules;\n\n    for (let ruleIndex = 0; ruleIndex < rules.length; ruleIndex++) {\n      const rule = rules[ruleIndex]; // $FlowFixMe Flow doesn't konw about these properties\n\n      const {\n        cssText,\n        selectorText,\n        style\n      } = rule;\n\n      if (selectorText != null) {\n        if (selectorText.startsWith(`.${styleName}`)) {\n          const match = cssText.match(/{ *([a-z\\-]+):/);\n\n          if (match !== null) {\n            const property = match[1];\n            const value = style.getPropertyValue(property);\n            cachedStyleNameToValueMap.set(styleName, value);\n            return value;\n          } else {\n            return null;\n          }\n        }\n      }\n    }\n  }\n\n  return null;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vcmVhY3QtZGV2dG9vbHMtc2hhcmVkL3NyYy9iYWNrZW5kL1N0eWxlWC91dGlscy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9yZWFjdC1kZXZ0b29scy1zaGFyZWQvc3JjL2JhY2tlbmQvU3R5bGVYL3V0aWxzLmpzPzQ4NjIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbmltcG9ydCB0eXBlIHtTdHlsZVhQbHVnaW59IGZyb20gJ3JlYWN0LWRldnRvb2xzLXNoYXJlZC9zcmMvdHlwZXMnO1xuXG5jb25zdCBjYWNoZWRTdHlsZU5hbWVUb1ZhbHVlTWFwOiBNYXA8c3RyaW5nLCBzdHJpbmc+ID0gbmV3IE1hcCgpO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3R5bGVYRGF0YShkYXRhOiBhbnkpOiBTdHlsZVhQbHVnaW4ge1xuICBjb25zdCBzb3VyY2VzID0gbmV3IFNldCgpO1xuICBjb25zdCByZXNvbHZlZFN0eWxlcyA9IHt9O1xuXG4gIGNyYXdsRGF0YShkYXRhLCBzb3VyY2VzLCByZXNvbHZlZFN0eWxlcyk7XG5cbiAgcmV0dXJuIHtcbiAgICBzb3VyY2VzOiBBcnJheS5mcm9tKHNvdXJjZXMpLnNvcnQoKSxcbiAgICByZXNvbHZlZFN0eWxlcyxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyYXdsRGF0YShcbiAgZGF0YTogYW55LFxuICBzb3VyY2VzOiBTZXQ8c3RyaW5nPixcbiAgcmVzb2x2ZWRTdHlsZXM6IE9iamVjdCxcbik6IHZvaWQge1xuICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgIGRhdGEuZm9yRWFjaChlbnRyeSA9PiB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShlbnRyeSkpIHtcbiAgICAgICAgY3Jhd2xEYXRhKGVudHJ5LCBzb3VyY2VzLCByZXNvbHZlZFN0eWxlcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjcmF3bE9iamVjdFByb3BlcnRpZXMoZW50cnksIHNvdXJjZXMsIHJlc29sdmVkU3R5bGVzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBjcmF3bE9iamVjdFByb3BlcnRpZXMoZGF0YSwgc291cmNlcywgcmVzb2x2ZWRTdHlsZXMpO1xuICB9XG5cbiAgcmVzb2x2ZWRTdHlsZXMgPSBPYmplY3QuZnJvbUVudHJpZXM8c3RyaW5nLCBhbnk+KFxuICAgIE9iamVjdC5lbnRyaWVzKHJlc29sdmVkU3R5bGVzKS5zb3J0KCksXG4gICk7XG59XG5cbmZ1bmN0aW9uIGNyYXdsT2JqZWN0UHJvcGVydGllcyhcbiAgZW50cnk6IE9iamVjdCxcbiAgc291cmNlczogU2V0PHN0cmluZz4sXG4gIHJlc29sdmVkU3R5bGVzOiBPYmplY3QsXG4pOiB2b2lkIHtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGVudHJ5KTtcbiAga2V5cy5mb3JFYWNoKGtleSA9PiB7XG4gICAgY29uc3QgdmFsdWUgPSBlbnRyeVtrZXldO1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAoa2V5ID09PSB2YWx1ZSkge1xuICAgICAgICAvLyBTcGVjaWFsIGNhc2U7IHRoaXMga2V5IGlzIHRoZSBuYW1lIG9mIHRoZSBzdHlsZSdzIHNvdXJjZS9maWxlL21vZHVsZS5cbiAgICAgICAgc291cmNlcy5hZGQoa2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc29sdmVkU3R5bGVzW2tleV0gPSBnZXRQcm9wZXJ0eVZhbHVlRm9yU3R5bGVOYW1lKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgbmVzdGVkU3R5bGUgPSB7fTtcbiAgICAgIHJlc29sdmVkU3R5bGVzW2tleV0gPSBuZXN0ZWRTdHlsZTtcbiAgICAgIGNyYXdsRGF0YShbdmFsdWVdLCBzb3VyY2VzLCBuZXN0ZWRTdHlsZSk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0UHJvcGVydHlWYWx1ZUZvclN0eWxlTmFtZShzdHlsZU5hbWU6IHN0cmluZyk6IHN0cmluZyB8IG51bGwge1xuICBpZiAoY2FjaGVkU3R5bGVOYW1lVG9WYWx1ZU1hcC5oYXMoc3R5bGVOYW1lKSkge1xuICAgIHJldHVybiAoKGNhY2hlZFN0eWxlTmFtZVRvVmFsdWVNYXAuZ2V0KHN0eWxlTmFtZSk6IGFueSk6IHN0cmluZyk7XG4gIH1cblxuICBmb3IgKFxuICAgIGxldCBzdHlsZVNoZWV0SW5kZXggPSAwO1xuICAgIHN0eWxlU2hlZXRJbmRleCA8IGRvY3VtZW50LnN0eWxlU2hlZXRzLmxlbmd0aDtcbiAgICBzdHlsZVNoZWV0SW5kZXgrK1xuICApIHtcbiAgICBjb25zdCBzdHlsZVNoZWV0ID0gKChkb2N1bWVudC5zdHlsZVNoZWV0c1tcbiAgICAgIHN0eWxlU2hlZXRJbmRleFxuICAgIF06IGFueSk6IENTU1N0eWxlU2hlZXQpO1xuICAgIC8vICRGbG93Rml4TWUgRmxvdyBkb2Vzbid0IGtvbncgYWJvdXQgdGhlc2UgcHJvcGVydGllc1xuICAgIGNvbnN0IHJ1bGVzID0gc3R5bGVTaGVldC5ydWxlcyB8fCBzdHlsZVNoZWV0LmNzc1J1bGVzO1xuICAgIGZvciAobGV0IHJ1bGVJbmRleCA9IDA7IHJ1bGVJbmRleCA8IHJ1bGVzLmxlbmd0aDsgcnVsZUluZGV4KyspIHtcbiAgICAgIGNvbnN0IHJ1bGUgPSBydWxlc1tydWxlSW5kZXhdO1xuICAgICAgLy8gJEZsb3dGaXhNZSBGbG93IGRvZXNuJ3Qga29udyBhYm91dCB0aGVzZSBwcm9wZXJ0aWVzXG4gICAgICBjb25zdCB7Y3NzVGV4dCwgc2VsZWN0b3JUZXh0LCBzdHlsZX0gPSBydWxlO1xuXG4gICAgICBpZiAoc2VsZWN0b3JUZXh0ICE9IG51bGwpIHtcbiAgICAgICAgaWYgKHNlbGVjdG9yVGV4dC5zdGFydHNXaXRoKGAuJHtzdHlsZU5hbWV9YCkpIHtcbiAgICAgICAgICBjb25zdCBtYXRjaCA9IGNzc1RleHQubWF0Y2goL3sgKihbYS16XFwtXSspOi8pO1xuICAgICAgICAgIGlmIChtYXRjaCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgcHJvcGVydHkgPSBtYXRjaFsxXTtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShwcm9wZXJ0eSk7XG5cbiAgICAgICAgICAgIGNhY2hlZFN0eWxlTmFtZVRvVmFsdWVNYXAuc2V0KHN0eWxlTmFtZSwgdmFsdWUpO1xuXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7Ozs7QUFXQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUVBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7QUFHQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/backend/StyleX/utils.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/backend/console.js":
/*!*******************************************************!*\
  !*** ../react-devtools-shared/src/backend/console.js ***!
  \*******************************************************/
/*! exports provided: isStringComponentStack, dangerous_setTargetConsoleForTesting, registerRenderer, patch, unpatch, patchForStrictMode, unpatchForStrictMode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isStringComponentStack\", function() { return isStringComponentStack; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dangerous_setTargetConsoleForTesting\", function() { return dangerous_setTargetConsoleForTesting; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"registerRenderer\", function() { return registerRenderer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"patch\", function() { return patch; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"unpatch\", function() { return unpatch; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"patchForStrictMode\", function() { return patchForStrictMode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"unpatchForStrictMode\", function() { return unpatchForStrictMode; });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ \"../react-devtools-shared/src/backend/utils.js\");\n/* harmony import */ var _renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./renderer */ \"../react-devtools-shared/src/backend/renderer.js\");\n/* harmony import */ var _DevToolsFiberComponentStack__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DevToolsFiberComponentStack */ \"../react-devtools-shared/src/backend/DevToolsFiberComponentStack.js\");\n/* harmony import */ var react_devtools_feature_flags__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-devtools-feature-flags */ \"../react-devtools-shared/src/config/DevToolsFeatureFlags.extension-oss.js\");\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\n\n\nconst OVERRIDE_CONSOLE_METHODS = ['error', 'trace', 'warn'];\nconst DIMMED_NODE_CONSOLE_COLOR = '\\x1b[2m%s\\x1b[0m'; // React's custom built component stack strings match \"\\s{4}in\"\n// Chrome's prefix matches \"\\s{4}at\"\n\nconst PREFIX_REGEX = /\\s{4}(in|at)\\s{1}/; // Firefox and Safari have no prefix (\"\")\n// but we can fallback to looking for location info (e.g. \"foo.js:12:345\")\n\nconst ROW_COLUMN_NUMBER_REGEX = /:\\d+:\\d+(\\n|$)/;\nfunction isStringComponentStack(text) {\n  return PREFIX_REGEX.test(text) || ROW_COLUMN_NUMBER_REGEX.test(text);\n}\nconst STYLE_DIRECTIVE_REGEX = /^%c/; // This function tells whether or not the arguments for a console\n// method has been overridden by the patchForStrictMode function.\n// If it has we'll need to do some special formatting of the arguments\n// so the console color stays consistent\n\nfunction isStrictModeOverride(args, method) {\n  return args.length === 2 && STYLE_DIRECTIVE_REGEX.test(args[0]) && args[1] === `color: ${getConsoleColor(method) || ''}`;\n}\n\nfunction getConsoleColor(method) {\n  switch (method) {\n    case 'warn':\n      return consoleSettingsRef.browserTheme === 'light' ? \"rgba(250, 180, 50, 0.75)\" : \"rgba(250, 180, 50, 0.5)\";\n\n    case 'error':\n      return consoleSettingsRef.browserTheme === 'light' ? \"rgba(250, 123, 130, 0.75)\" : \"rgba(250, 123, 130, 0.5)\";\n\n    case 'log':\n    default:\n      return consoleSettingsRef.browserTheme === 'light' ? \"rgba(125, 125, 125, 0.75)\" : \"rgba(125, 125, 125, 0.5)\";\n  }\n}\n\nconst injectedRenderers = new Map();\nlet targetConsole = console;\nlet targetConsoleMethods = {};\n\nfor (const method in console) {\n  targetConsoleMethods[method] = console[method];\n}\n\nlet unpatchFn = null;\nlet isNode = false;\n\ntry {\n  isNode = undefined === global;\n} catch (error) {} // Enables e.g. Jest tests to inject a mock console object.\n\n\nfunction dangerous_setTargetConsoleForTesting(targetConsoleForTesting) {\n  targetConsole = targetConsoleForTesting;\n  targetConsoleMethods = {};\n\n  for (const method in targetConsole) {\n    targetConsoleMethods[method] = console[method];\n  }\n} // v16 renderers should use this method to inject internals necessary to generate a component stack.\n// These internals will be used if the console is patched.\n// Injecting them separately allows the console to easily be patched or un-patched later (at runtime).\n\nfunction registerRenderer(renderer, onErrorOrWarning) {\n  const {\n    currentDispatcherRef,\n    getCurrentFiber,\n    findFiberByHostInstance,\n    version\n  } = renderer; // Ignore React v15 and older because they don't expose a component stack anyway.\n\n  if (typeof findFiberByHostInstance !== 'function') {\n    return;\n  } // currentDispatcherRef gets injected for v16.8+ to support hooks inspection.\n  // getCurrentFiber gets injected for v16.9+.\n\n\n  if (currentDispatcherRef != null && typeof getCurrentFiber === 'function') {\n    const {\n      ReactTypeOfWork\n    } = Object(_renderer__WEBPACK_IMPORTED_MODULE_1__[\"getInternalReactConstants\"])(version);\n    injectedRenderers.set(renderer, {\n      currentDispatcherRef,\n      getCurrentFiber,\n      workTagMap: ReactTypeOfWork,\n      onErrorOrWarning\n    });\n  }\n}\nconst consoleSettingsRef = {\n  appendComponentStack: false,\n  breakOnConsoleErrors: false,\n  showInlineWarningsAndErrors: false,\n  hideConsoleLogsInStrictMode: false,\n  browserTheme: 'dark'\n}; // Patches console methods to append component stack for the current fiber.\n// Call unpatch() to remove the injected behavior.\n\nfunction patch({\n  appendComponentStack,\n  breakOnConsoleErrors,\n  showInlineWarningsAndErrors,\n  hideConsoleLogsInStrictMode,\n  browserTheme\n}) {\n  // Settings may change after we've patched the console.\n  // Using a shared ref allows the patch function to read the latest values.\n  consoleSettingsRef.appendComponentStack = appendComponentStack;\n  consoleSettingsRef.breakOnConsoleErrors = breakOnConsoleErrors;\n  consoleSettingsRef.showInlineWarningsAndErrors = showInlineWarningsAndErrors;\n  consoleSettingsRef.hideConsoleLogsInStrictMode = hideConsoleLogsInStrictMode;\n  consoleSettingsRef.browserTheme = browserTheme;\n\n  if (appendComponentStack || breakOnConsoleErrors || showInlineWarningsAndErrors) {\n    if (unpatchFn !== null) {\n      // Don't patch twice.\n      return;\n    }\n\n    const originalConsoleMethods = {};\n\n    unpatchFn = () => {\n      for (const method in originalConsoleMethods) {\n        try {\n          // $FlowFixMe property error|warn is not writable.\n          targetConsole[method] = originalConsoleMethods[method];\n        } catch (error) {}\n      }\n    };\n\n    OVERRIDE_CONSOLE_METHODS.forEach(method => {\n      try {\n        const originalMethod = originalConsoleMethods[method] = targetConsole[method].__REACT_DEVTOOLS_ORIGINAL_METHOD__ ? targetConsole[method].__REACT_DEVTOOLS_ORIGINAL_METHOD__ : targetConsole[method];\n\n        const overrideMethod = (...args) => {\n          let shouldAppendWarningStack = false;\n\n          if (method !== 'log') {\n            if (consoleSettingsRef.appendComponentStack) {\n              const lastArg = args.length > 0 ? args[args.length - 1] : null;\n              const alreadyHasComponentStack = typeof lastArg === 'string' && isStringComponentStack(lastArg); // If we are ever called with a string that already has a component stack,\n              // e.g. a React error/warning, don't append a second stack.\n\n              shouldAppendWarningStack = !alreadyHasComponentStack;\n            }\n          }\n\n          const shouldShowInlineWarningsAndErrors = consoleSettingsRef.showInlineWarningsAndErrors && (method === 'error' || method === 'warn'); // Search for the first renderer that has a current Fiber.\n          // We don't handle the edge case of stacks for more than one (e.g. interleaved renderers?)\n          // eslint-disable-next-line no-for-of-loops/no-for-of-loops\n\n          for (const {\n            currentDispatcherRef,\n            getCurrentFiber,\n            onErrorOrWarning,\n            workTagMap\n          } of injectedRenderers.values()) {\n            const current = getCurrentFiber();\n\n            if (current != null) {\n              try {\n                if (shouldShowInlineWarningsAndErrors) {\n                  // patch() is called by two places: (1) the hook and (2) the renderer backend.\n                  // The backend is what implements a message queue, so it's the only one that injects onErrorOrWarning.\n                  if (typeof onErrorOrWarning === 'function') {\n                    onErrorOrWarning(current, method, // Copy args before we mutate them (e.g. adding the component stack)\n                    args.slice());\n                  }\n                }\n\n                if (shouldAppendWarningStack) {\n                  const componentStack = Object(_DevToolsFiberComponentStack__WEBPACK_IMPORTED_MODULE_2__[\"getStackByFiberInDevAndProd\"])(workTagMap, current, currentDispatcherRef);\n\n                  if (componentStack !== '') {\n                    if (isStrictModeOverride(args, method)) {\n                      args[0] = Object(_utils__WEBPACK_IMPORTED_MODULE_0__[\"format\"])(args[0], componentStack);\n                    } else {\n                      args.push(componentStack);\n                    }\n                  }\n                }\n              } catch (error) {\n                // Don't let a DevTools or React internal error interfere with logging.\n                setTimeout(() => {\n                  throw error;\n                }, 0);\n              } finally {\n                break;\n              }\n            }\n          }\n\n          if (consoleSettingsRef.breakOnConsoleErrors) {\n            // --- Welcome to debugging with React DevTools ---\n            // This debugger statement means that you've enabled the \"break on warnings\" feature.\n            // Use the browser's Call Stack panel to step out of this override function-\n            // to where the original warning or error was logged.\n            // eslint-disable-next-line no-debugger\n            debugger;\n          }\n\n          originalMethod(...args);\n        };\n\n        overrideMethod.__REACT_DEVTOOLS_ORIGINAL_METHOD__ = originalMethod;\n        originalMethod.__REACT_DEVTOOLS_OVERRIDE_METHOD__ = overrideMethod; // $FlowFixMe property error|warn is not writable.\n\n        targetConsole[method] = overrideMethod;\n      } catch (error) {}\n    });\n  } else {\n    unpatch();\n  }\n} // Removed component stack patch from console methods.\n\nfunction unpatch() {\n  if (unpatchFn !== null) {\n    unpatchFn();\n    unpatchFn = null;\n  }\n}\nlet unpatchForStrictModeFn = null; // NOTE: KEEP IN SYNC with src/hook.js:patchConsoleForInitialRenderInStrictMode\n\nfunction patchForStrictMode() {\n  if (react_devtools_feature_flags__WEBPACK_IMPORTED_MODULE_3__[\"consoleManagedByDevToolsDuringStrictMode\"]) {\n    const overrideConsoleMethods = ['error', 'trace', 'warn', 'log'];\n\n    if (unpatchForStrictModeFn !== null) {\n      // Don't patch twice.\n      return;\n    }\n\n    const originalConsoleMethods = {};\n\n    unpatchForStrictModeFn = () => {\n      for (const method in originalConsoleMethods) {\n        try {\n          // $FlowFixMe property error|warn is not writable.\n          targetConsole[method] = originalConsoleMethods[method];\n        } catch (error) {}\n      }\n    };\n\n    overrideConsoleMethods.forEach(method => {\n      try {\n        const originalMethod = originalConsoleMethods[method] = targetConsole[method].__REACT_DEVTOOLS_STRICT_MODE_ORIGINAL_METHOD__ ? targetConsole[method].__REACT_DEVTOOLS_STRICT_MODE_ORIGINAL_METHOD__ : targetConsole[method];\n\n        const overrideMethod = (...args) => {\n          if (!consoleSettingsRef.hideConsoleLogsInStrictMode) {\n            // Dim the text color of the double logs if we're not\n            // hiding them.\n            if (isNode) {\n              originalMethod(DIMMED_NODE_CONSOLE_COLOR, Object(_utils__WEBPACK_IMPORTED_MODULE_0__[\"format\"])(...args));\n            } else {\n              const color = getConsoleColor(method);\n\n              if (color) {\n                originalMethod(`%c${Object(_utils__WEBPACK_IMPORTED_MODULE_0__[\"format\"])(...args)}`, `color: ${color}`);\n              } else {\n                throw Error('Console color is not defined');\n              }\n            }\n          }\n        };\n\n        overrideMethod.__REACT_DEVTOOLS_STRICT_MODE_ORIGINAL_METHOD__ = originalMethod;\n        originalMethod.__REACT_DEVTOOLS_STRICT_MODE_OVERRIDE_METHOD__ = overrideMethod; // $FlowFixMe property error|warn is not writable.\n\n        targetConsole[method] = overrideMethod;\n      } catch (error) {}\n    });\n  }\n} // NOTE: KEEP IN SYNC with src/hook.js:unpatchConsoleForInitialRenderInStrictMode\n\nfunction unpatchForStrictMode() {\n  if (react_devtools_feature_flags__WEBPACK_IMPORTED_MODULE_3__[\"consoleManagedByDevToolsDuringStrictMode\"]) {\n    if (unpatchForStrictModeFn !== null) {\n      unpatchForStrictModeFn();\n      unpatchForStrictModeFn = null;\n    }\n  }\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../node_modules/webpack/buildin/global.js */ \"../../node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/backend/console.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/backend/renderer.js":
/*!********************************************************!*\
  !*** ../react-devtools-shared/src/backend/renderer.js ***!
  \********************************************************/
/*! exports provided: getInternalReactConstants, attach */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getInternalReactConstants\", function() { return getInternalReactConstants; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"attach\", function() { return attach; });\n/* harmony import */ var semver__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! semver */ \"../react-devtools-shared/node_modules/semver/semver.js\");\n/* harmony import */ var semver__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(semver__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-devtools-shared/src/types */ \"../react-devtools-shared/src/types.js\");\n/* harmony import */ var react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-devtools-shared/src/utils */ \"../react-devtools-shared/src/utils.js\");\n/* harmony import */ var react_devtools_shared_src_storage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-devtools-shared/src/storage */ \"../react-devtools-shared/src/storage.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils */ \"../react-devtools-shared/src/backend/utils.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../constants */ \"../react-devtools-shared/src/constants.js\");\n/* harmony import */ var react_debug_tools__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-debug-tools */ \"../../build/oss-experimental/react-debug-tools/index.js\");\n/* harmony import */ var react_debug_tools__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(react_debug_tools__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _console__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./console */ \"../react-devtools-shared/src/backend/console.js\");\n/* harmony import */ var _ReactSymbols__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ReactSymbols */ \"../react-devtools-shared/src/backend/ReactSymbols.js\");\n/* harmony import */ var react_devtools_feature_flags__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react-devtools-feature-flags */ \"../react-devtools-shared/src/config/DevToolsFeatureFlags.extension-oss.js\");\n/* harmony import */ var shared_objectIs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! shared/objectIs */ \"../shared/objectIs.js\");\n/* harmony import */ var shared_isArray__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! shared/isArray */ \"../shared/isArray.js\");\n/* harmony import */ var shared_hasOwnProperty__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! shared/hasOwnProperty */ \"../shared/hasOwnProperty.js\");\n/* harmony import */ var _StyleX_utils__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./StyleX/utils */ \"../react-devtools-shared/src/backend/StyleX/utils.js\");\n/* harmony import */ var react_reconciler_src_ReactWorkTags__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! react-reconciler/src/ReactWorkTags */ \"../react-reconciler/src/ReactWorkTags.js\");\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction getFiberFlags(fiber) {\n  // The name of this field changed from \"effectTag\" to \"flags\"\n  return fiber.flags !== undefined ? fiber.flags : fiber.effectTag;\n} // Some environments (e.g. React Native / Hermes) don't support the performance API yet.\n\n\nconst getCurrentTime = typeof performance === 'object' && typeof performance.now === 'function' ? () => performance.now() : () => Date.now();\nfunction getInternalReactConstants(version) {\n  const ReactTypeOfSideEffect = {\n    DidCapture: 0b10000000,\n    NoFlags: 0b00,\n    PerformedWork: 0b01,\n    Placement: 0b10,\n    Incomplete: 0b10000000000000,\n    Hydrating: 0b1000000000000\n  }; // **********************************************************\n  // The section below is copied from files in React repo.\n  // Keep it in sync, and add version guards if it changes.\n  //\n  // Technically these priority levels are invalid for versions before 16.9,\n  // but 16.9 is the first version to report priority level to DevTools,\n  // so we can avoid checking for earlier versions and support pre-16.9 canary releases in the process.\n\n  let ReactPriorityLevels = {\n    ImmediatePriority: 99,\n    UserBlockingPriority: 98,\n    NormalPriority: 97,\n    LowPriority: 96,\n    IdlePriority: 95,\n    NoPriority: 90\n  };\n\n  if (Object(semver__WEBPACK_IMPORTED_MODULE_0__[\"gt\"])(version, '17.0.2')) {\n    ReactPriorityLevels = {\n      ImmediatePriority: 1,\n      UserBlockingPriority: 2,\n      NormalPriority: 3,\n      LowPriority: 4,\n      IdlePriority: 5,\n      NoPriority: 0\n    };\n  }\n\n  let StrictModeBits = 0;\n\n  if (Object(semver__WEBPACK_IMPORTED_MODULE_0__[\"gte\"])(version, '18.0.0-alpha')) {\n    // 18+\n    StrictModeBits = 0b011000;\n  } else if (Object(semver__WEBPACK_IMPORTED_MODULE_0__[\"gte\"])(version, '16.9.0')) {\n    // 16.9 - 17\n    StrictModeBits = 0b1;\n  } else if (Object(semver__WEBPACK_IMPORTED_MODULE_0__[\"gte\"])(version, '16.3.0')) {\n    // 16.3 - 16.8\n    StrictModeBits = 0b10;\n  }\n\n  let ReactTypeOfWork = null; // **********************************************************\n  // The section below is copied from files in React repo.\n  // Keep it in sync, and add version guards if it changes.\n  //\n  // TODO Update the gt() check below to be gte() whichever the next version number is.\n  // Currently the version in Git is 17.0.2 (but that version has not been/may not end up being released).\n\n  if (Object(semver__WEBPACK_IMPORTED_MODULE_0__[\"gt\"])(version, '17.0.1')) {\n    ReactTypeOfWork = {\n      CacheComponent: 24,\n      // Experimental\n      ClassComponent: 1,\n      ContextConsumer: 9,\n      ContextProvider: 10,\n      CoroutineComponent: -1,\n      // Removed\n      CoroutineHandlerPhase: -1,\n      // Removed\n      DehydratedSuspenseComponent: 18,\n      // Behind a flag\n      ForwardRef: 11,\n      Fragment: 7,\n      FunctionComponent: 0,\n      HostComponent: 5,\n      HostPortal: 4,\n      HostRoot: 3,\n      HostText: 6,\n      IncompleteClassComponent: 17,\n      IndeterminateComponent: 2,\n      LazyComponent: 16,\n      LegacyHiddenComponent: 23,\n      MemoComponent: 14,\n      Mode: 8,\n      OffscreenComponent: 22,\n      // Experimental\n      Profiler: 12,\n      ScopeComponent: 21,\n      // Experimental\n      SimpleMemoComponent: 15,\n      SuspenseComponent: 13,\n      SuspenseListComponent: 19,\n      // Experimental\n      YieldComponent: -1 // Removed\n\n    };\n  } else if (Object(semver__WEBPACK_IMPORTED_MODULE_0__[\"gte\"])(version, '17.0.0-alpha')) {\n    ReactTypeOfWork = {\n      CacheComponent: -1,\n      // Doesn't exist yet\n      ClassComponent: 1,\n      ContextConsumer: 9,\n      ContextProvider: 10,\n      CoroutineComponent: -1,\n      // Removed\n      CoroutineHandlerPhase: -1,\n      // Removed\n      DehydratedSuspenseComponent: 18,\n      // Behind a flag\n      ForwardRef: 11,\n      Fragment: 7,\n      FunctionComponent: 0,\n      HostComponent: 5,\n      HostPortal: 4,\n      HostRoot: 3,\n      HostText: 6,\n      IncompleteClassComponent: 17,\n      IndeterminateComponent: 2,\n      LazyComponent: 16,\n      LegacyHiddenComponent: 24,\n      MemoComponent: 14,\n      Mode: 8,\n      OffscreenComponent: 23,\n      // Experimental\n      Profiler: 12,\n      ScopeComponent: 21,\n      // Experimental\n      SimpleMemoComponent: 15,\n      SuspenseComponent: 13,\n      SuspenseListComponent: 19,\n      // Experimental\n      YieldComponent: -1 // Removed\n\n    };\n  } else if (Object(semver__WEBPACK_IMPORTED_MODULE_0__[\"gte\"])(version, '16.6.0-beta.0')) {\n    ReactTypeOfWork = {\n      CacheComponent: -1,\n      // Doesn't exist yet\n      ClassComponent: 1,\n      ContextConsumer: 9,\n      ContextProvider: 10,\n      CoroutineComponent: -1,\n      // Removed\n      CoroutineHandlerPhase: -1,\n      // Removed\n      DehydratedSuspenseComponent: 18,\n      // Behind a flag\n      ForwardRef: 11,\n      Fragment: 7,\n      FunctionComponent: 0,\n      HostComponent: 5,\n      HostPortal: 4,\n      HostRoot: 3,\n      HostText: 6,\n      IncompleteClassComponent: 17,\n      IndeterminateComponent: 2,\n      LazyComponent: 16,\n      LegacyHiddenComponent: -1,\n      MemoComponent: 14,\n      Mode: 8,\n      OffscreenComponent: -1,\n      // Experimental\n      Profiler: 12,\n      ScopeComponent: -1,\n      // Experimental\n      SimpleMemoComponent: 15,\n      SuspenseComponent: 13,\n      SuspenseListComponent: 19,\n      // Experimental\n      YieldComponent: -1 // Removed\n\n    };\n  } else if (Object(semver__WEBPACK_IMPORTED_MODULE_0__[\"gte\"])(version, '16.4.3-alpha')) {\n    ReactTypeOfWork = {\n      CacheComponent: -1,\n      // Doesn't exist yet\n      ClassComponent: 2,\n      ContextConsumer: 11,\n      ContextProvider: 12,\n      CoroutineComponent: -1,\n      // Removed\n      CoroutineHandlerPhase: -1,\n      // Removed\n      DehydratedSuspenseComponent: -1,\n      // Doesn't exist yet\n      ForwardRef: 13,\n      Fragment: 9,\n      FunctionComponent: 0,\n      HostComponent: 7,\n      HostPortal: 6,\n      HostRoot: 5,\n      HostText: 8,\n      IncompleteClassComponent: -1,\n      // Doesn't exist yet\n      IndeterminateComponent: 4,\n      LazyComponent: -1,\n      // Doesn't exist yet\n      LegacyHiddenComponent: -1,\n      MemoComponent: -1,\n      // Doesn't exist yet\n      Mode: 10,\n      OffscreenComponent: -1,\n      // Experimental\n      Profiler: 15,\n      ScopeComponent: -1,\n      // Experimental\n      SimpleMemoComponent: -1,\n      // Doesn't exist yet\n      SuspenseComponent: 16,\n      SuspenseListComponent: -1,\n      // Doesn't exist yet\n      YieldComponent: -1 // Removed\n\n    };\n  } else {\n    ReactTypeOfWork = {\n      CacheComponent: -1,\n      // Doesn't exist yet\n      ClassComponent: 2,\n      ContextConsumer: 12,\n      ContextProvider: 13,\n      CoroutineComponent: 7,\n      CoroutineHandlerPhase: 8,\n      DehydratedSuspenseComponent: -1,\n      // Doesn't exist yet\n      ForwardRef: 14,\n      Fragment: 10,\n      FunctionComponent: 1,\n      HostComponent: 5,\n      HostPortal: 4,\n      HostRoot: 3,\n      HostText: 6,\n      IncompleteClassComponent: -1,\n      // Doesn't exist yet\n      IndeterminateComponent: 0,\n      LazyComponent: -1,\n      // Doesn't exist yet\n      LegacyHiddenComponent: -1,\n      MemoComponent: -1,\n      // Doesn't exist yet\n      Mode: 11,\n      OffscreenComponent: -1,\n      // Experimental\n      Profiler: 15,\n      ScopeComponent: -1,\n      // Experimental\n      SimpleMemoComponent: -1,\n      // Doesn't exist yet\n      SuspenseComponent: 16,\n      SuspenseListComponent: -1,\n      // Doesn't exist yet\n      YieldComponent: 9\n    };\n  } // **********************************************************\n  // End of copied code.\n  // **********************************************************\n\n\n  function getTypeSymbol(type) {\n    const symbolOrNumber = typeof type === 'object' && type !== null ? type.$$typeof : type; // $FlowFixMe Flow doesn't know about typeof \"symbol\"\n\n    return typeof symbolOrNumber === 'symbol' ? symbolOrNumber.toString() : symbolOrNumber;\n  }\n\n  const {\n    CacheComponent,\n    ClassComponent,\n    IncompleteClassComponent,\n    FunctionComponent,\n    IndeterminateComponent,\n    ForwardRef,\n    HostRoot,\n    HostComponent,\n    HostPortal,\n    HostText,\n    Fragment,\n    LazyComponent,\n    LegacyHiddenComponent,\n    MemoComponent,\n    OffscreenComponent,\n    Profiler,\n    ScopeComponent,\n    SimpleMemoComponent,\n    SuspenseComponent,\n    SuspenseListComponent\n  } = ReactTypeOfWork;\n\n  function resolveFiberType(type) {\n    const typeSymbol = getTypeSymbol(type);\n\n    switch (typeSymbol) {\n      case _ReactSymbols__WEBPACK_IMPORTED_MODULE_8__[\"MEMO_NUMBER\"]:\n      case _ReactSymbols__WEBPACK_IMPORTED_MODULE_8__[\"MEMO_SYMBOL_STRING\"]:\n        // recursively resolving memo type in case of memo(forwardRef(Component))\n        return resolveFiberType(type.type);\n\n      case _ReactSymbols__WEBPACK_IMPORTED_MODULE_8__[\"FORWARD_REF_NUMBER\"]:\n      case _ReactSymbols__WEBPACK_IMPORTED_MODULE_8__[\"FORWARD_REF_SYMBOL_STRING\"]:\n        return type.render;\n\n      default:\n        return type;\n    }\n  } // NOTICE Keep in sync with shouldFilterFiber() and other get*ForFiber methods\n\n\n  function getDisplayNameForFiber(fiber) {\n    const {\n      elementType,\n      type,\n      tag\n    } = fiber;\n    let resolvedType = type;\n\n    if (typeof type === 'object' && type !== null) {\n      resolvedType = resolveFiberType(type);\n    }\n\n    let resolvedContext = null;\n\n    switch (tag) {\n      case CacheComponent:\n        return 'Cache';\n\n      case ClassComponent:\n      case IncompleteClassComponent:\n        return Object(react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_2__[\"getDisplayName\"])(resolvedType);\n\n      case FunctionComponent:\n      case IndeterminateComponent:\n        return Object(react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_2__[\"getDisplayName\"])(resolvedType);\n\n      case ForwardRef:\n        // Mirror https://github.com/facebook/react/blob/7c21bf72ace77094fd1910cc350a548287ef8350/packages/shared/getComponentName.js#L27-L37\n        return type && type.displayName || Object(react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_2__[\"getDisplayName\"])(resolvedType, 'Anonymous');\n\n      case HostRoot:\n        const fiberRoot = fiber.stateNode;\n\n        if (fiberRoot != null && fiberRoot._debugRootType !== null) {\n          return fiberRoot._debugRootType;\n        }\n\n        return null;\n\n      case HostComponent:\n        return type;\n\n      case HostPortal:\n      case HostText:\n      case Fragment:\n        return null;\n\n      case LazyComponent:\n        // This display name will not be user visible.\n        // Once a Lazy component loads its inner component, React replaces the tag and type.\n        // This display name will only show up in console logs when DevTools DEBUG mode is on.\n        return 'Lazy';\n\n      case MemoComponent:\n      case SimpleMemoComponent:\n        return elementType && elementType.displayName || type && type.displayName || Object(react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_2__[\"getDisplayName\"])(resolvedType, 'Anonymous');\n\n      case SuspenseComponent:\n        return 'Suspense';\n\n      case LegacyHiddenComponent:\n        return 'LegacyHidden';\n\n      case OffscreenComponent:\n        return 'Offscreen';\n\n      case ScopeComponent:\n        return 'Scope';\n\n      case SuspenseListComponent:\n        return 'SuspenseList';\n\n      case Profiler:\n        return 'Profiler';\n\n      default:\n        const typeSymbol = getTypeSymbol(type);\n\n        switch (typeSymbol) {\n          case _ReactSymbols__WEBPACK_IMPORTED_MODULE_8__[\"CONCURRENT_MODE_NUMBER\"]:\n          case _ReactSymbols__WEBPACK_IMPORTED_MODULE_8__[\"CONCURRENT_MODE_SYMBOL_STRING\"]:\n          case _ReactSymbols__WEBPACK_IMPORTED_MODULE_8__[\"DEPRECATED_ASYNC_MODE_SYMBOL_STRING\"]:\n            return null;\n\n          case _ReactSymbols__WEBPACK_IMPORTED_MODULE_8__[\"PROVIDER_NUMBER\"]:\n          case _ReactSymbols__WEBPACK_IMPORTED_MODULE_8__[\"PROVIDER_SYMBOL_STRING\"]:\n            // 16.3.0 exposed the context object as \"context\"\n            // PR #12501 changed it to \"_context\" for 16.3.1+\n            // NOTE Keep in sync with inspectElementRaw()\n            resolvedContext = fiber.type._context || fiber.type.context;\n            return `${resolvedContext.displayName || 'Context'}.Provider`;\n\n          case _ReactSymbols__WEBPACK_IMPORTED_MODULE_8__[\"CONTEXT_NUMBER\"]:\n          case _ReactSymbols__WEBPACK_IMPORTED_MODULE_8__[\"CONTEXT_SYMBOL_STRING\"]:\n            // 16.3-16.5 read from \"type\" because the Consumer is the actual context object.\n            // 16.6+ should read from \"type._context\" because Consumer can be different (in DEV).\n            // NOTE Keep in sync with inspectElementRaw()\n            resolvedContext = fiber.type._context || fiber.type; // NOTE: TraceUpdatesBackendManager depends on the name ending in '.Consumer'\n            // If you change the name, figure out a more resilient way to detect it.\n\n            return `${resolvedContext.displayName || 'Context'}.Consumer`;\n\n          case _ReactSymbols__WEBPACK_IMPORTED_MODULE_8__[\"STRICT_MODE_NUMBER\"]:\n          case _ReactSymbols__WEBPACK_IMPORTED_MODULE_8__[\"STRICT_MODE_SYMBOL_STRING\"]:\n            return null;\n\n          case _ReactSymbols__WEBPACK_IMPORTED_MODULE_8__[\"PROFILER_NUMBER\"]:\n          case _ReactSymbols__WEBPACK_IMPORTED_MODULE_8__[\"PROFILER_SYMBOL_STRING\"]:\n            return `Profiler(${fiber.memoizedProps.id})`;\n\n          case _ReactSymbols__WEBPACK_IMPORTED_MODULE_8__[\"SCOPE_NUMBER\"]:\n          case _ReactSymbols__WEBPACK_IMPORTED_MODULE_8__[\"SCOPE_SYMBOL_STRING\"]:\n            return 'Scope';\n\n          default:\n            // Unknown element type.\n            // This may mean a new element type that has not yet been added to DevTools.\n            return null;\n        }\n\n    }\n  }\n\n  return {\n    getDisplayNameForFiber,\n    getTypeSymbol,\n    ReactPriorityLevels,\n    ReactTypeOfWork,\n    ReactTypeOfSideEffect,\n    StrictModeBits\n  };\n}\nfunction attach(hook, rendererID, renderer, global) {\n  // Newer versions of the reconciler package also specific reconciler version.\n  // If that version number is present, use it.\n  // Third party renderer versions may not match the reconciler version,\n  // and the latter is what's important in terms of tags and symbols.\n  const version = renderer.reconcilerVersion || renderer.version;\n  const {\n    getDisplayNameForFiber,\n    getTypeSymbol,\n    ReactPriorityLevels,\n    ReactTypeOfWork,\n    ReactTypeOfSideEffect,\n    StrictModeBits\n  } = getInternalReactConstants(version);\n  const {\n    DidCapture,\n    Hydrating,\n    NoFlags,\n    PerformedWork,\n    Placement\n  } = ReactTypeOfSideEffect;\n  const {\n    CacheComponent,\n    ClassComponent,\n    ContextConsumer,\n    DehydratedSuspenseComponent,\n    ForwardRef,\n    Fragment,\n    FunctionComponent,\n    HostRoot,\n    HostPortal,\n    HostComponent,\n    HostText,\n    IncompleteClassComponent,\n    IndeterminateComponent,\n    LegacyHiddenComponent,\n    MemoComponent,\n    OffscreenComponent,\n    SimpleMemoComponent,\n    SuspenseComponent,\n    SuspenseListComponent\n  } = ReactTypeOfWork;\n  const {\n    ImmediatePriority,\n    UserBlockingPriority,\n    NormalPriority,\n    LowPriority,\n    IdlePriority,\n    NoPriority\n  } = ReactPriorityLevels;\n  const {\n    overrideHookState,\n    overrideHookStateDeletePath,\n    overrideHookStateRenamePath,\n    overrideProps,\n    overridePropsDeletePath,\n    overridePropsRenamePath,\n    scheduleRefresh,\n    setErrorHandler,\n    setSuspenseHandler,\n    scheduleUpdate\n  } = renderer;\n  const supportsTogglingError = typeof setErrorHandler === 'function' && typeof scheduleUpdate === 'function';\n  const supportsTogglingSuspense = typeof setSuspenseHandler === 'function' && typeof scheduleUpdate === 'function';\n\n  if (typeof scheduleRefresh === 'function') {\n    // When Fast Refresh updates a component, the frontend may need to purge cached information.\n    // For example, ASTs cached for the component (for named hooks) may no longer be valid.\n    // Send a signal to the frontend to purge this cached information.\n    // The \"fastRefreshScheduled\" dispatched is global (not Fiber or even Renderer specific).\n    // This is less effecient since it means the front-end will need to purge the entire cache,\n    // but this is probably an okay trade off in order to reduce coupling between the DevTools and Fast Refresh.\n    renderer.scheduleRefresh = (...args) => {\n      try {\n        hook.emit('fastRefreshScheduled');\n      } finally {\n        return scheduleRefresh(...args);\n      }\n    };\n  } // Tracks Fibers with recently changed number of error/warning messages.\n  // These collections store the Fiber rather than the ID,\n  // in order to avoid generating an ID for Fibers that never get mounted\n  // (due to e.g. Suspense or error boundaries).\n  // onErrorOrWarning() adds Fibers and recordPendingErrorsAndWarnings() later clears them.\n\n\n  const fibersWithChangedErrorOrWarningCounts = new Set();\n  const pendingFiberToErrorsMap = new Map();\n  const pendingFiberToWarningsMap = new Map(); // Mapping of fiber IDs to error/warning messages and counts.\n\n  const fiberIDToErrorsMap = new Map();\n  const fiberIDToWarningsMap = new Map();\n\n  function clearErrorsAndWarnings() {\n    // eslint-disable-next-line no-for-of-loops/no-for-of-loops\n    for (const id of fiberIDToErrorsMap.keys()) {\n      const fiber = idToArbitraryFiberMap.get(id);\n\n      if (fiber != null) {\n        fibersWithChangedErrorOrWarningCounts.add(fiber);\n        updateMostRecentlyInspectedElementIfNecessary(id);\n      }\n    } // eslint-disable-next-line no-for-of-loops/no-for-of-loops\n\n\n    for (const id of fiberIDToWarningsMap.keys()) {\n      const fiber = idToArbitraryFiberMap.get(id);\n\n      if (fiber != null) {\n        fibersWithChangedErrorOrWarningCounts.add(fiber);\n        updateMostRecentlyInspectedElementIfNecessary(id);\n      }\n    }\n\n    fiberIDToErrorsMap.clear();\n    fiberIDToWarningsMap.clear();\n    flushPendingEvents();\n  }\n\n  function clearMessageCountHelper(fiberID, pendingFiberToMessageCountMap, fiberIDToMessageCountMap) {\n    const fiber = idToArbitraryFiberMap.get(fiberID);\n\n    if (fiber != null) {\n      // Throw out any pending changes.\n      pendingFiberToErrorsMap.delete(fiber);\n\n      if (fiberIDToMessageCountMap.has(fiberID)) {\n        fiberIDToMessageCountMap.delete(fiberID); // If previous flushed counts have changed, schedule an update too.\n\n        fibersWithChangedErrorOrWarningCounts.add(fiber);\n        flushPendingEvents();\n        updateMostRecentlyInspectedElementIfNecessary(fiberID);\n      } else {\n        fibersWithChangedErrorOrWarningCounts.delete(fiber);\n      }\n    }\n  }\n\n  function clearErrorsForFiberID(fiberID) {\n    clearMessageCountHelper(fiberID, pendingFiberToErrorsMap, fiberIDToErrorsMap);\n  }\n\n  function clearWarningsForFiberID(fiberID) {\n    clearMessageCountHelper(fiberID, pendingFiberToWarningsMap, fiberIDToWarningsMap);\n  }\n\n  function updateMostRecentlyInspectedElementIfNecessary(fiberID) {\n    if (mostRecentlyInspectedElement !== null && mostRecentlyInspectedElement.id === fiberID) {\n      hasElementUpdatedSinceLastInspected = true;\n    }\n  } // Called when an error or warning is logged during render, commit, or passive (including unmount functions).\n\n\n  function onErrorOrWarning(fiber, type, args) {\n    if (type === 'error') {\n      const maybeID = getFiberIDUnsafe(fiber); // if this is an error simulated by us to trigger error boundary, ignore\n\n      if (maybeID != null && forceErrorForFiberIDs.get(maybeID) === true) {\n        return;\n      }\n    }\n\n    const message = Object(_utils__WEBPACK_IMPORTED_MODULE_4__[\"format\"])(...args);\n\n    if (_constants__WEBPACK_IMPORTED_MODULE_5__[\"__DEBUG__\"]) {\n      debug('onErrorOrWarning', fiber, null, `${type}: \"${message}\"`);\n    } // Mark this Fiber as needed its warning/error count updated during the next flush.\n\n\n    fibersWithChangedErrorOrWarningCounts.add(fiber); // Track the warning/error for later.\n\n    const fiberMap = type === 'error' ? pendingFiberToErrorsMap : pendingFiberToWarningsMap;\n    const messageMap = fiberMap.get(fiber);\n\n    if (messageMap != null) {\n      const count = messageMap.get(message) || 0;\n      messageMap.set(message, count + 1);\n    } else {\n      fiberMap.set(fiber, new Map([[message, 1]]));\n    } // Passive effects may trigger errors or warnings too;\n    // In this case, we should wait until the rest of the passive effects have run,\n    // but we shouldn't wait until the next commit because that might be a long time.\n    // This would also cause \"tearing\" between an inspected Component and the tree view.\n    // Then again we don't want to flush too soon because this could be an error during async rendering.\n    // Use a debounce technique to ensure that we'll eventually flush.\n\n\n    flushPendingErrorsAndWarningsAfterDelay();\n  } // Patching the console enables DevTools to do a few useful things:\n  // * Append component stacks to warnings and error messages\n  // * Disable logging during re-renders to inspect hooks (see inspectHooksOfFiber)\n  //\n  // Don't patch in test environments because we don't want to interfere with Jest's own console overrides.\n\n\n  if (true) {\n    Object(_console__WEBPACK_IMPORTED_MODULE_7__[\"registerRenderer\"])(renderer, onErrorOrWarning); // The renderer interface can't read these preferences directly,\n    // because it is stored in localStorage within the context of the extension.\n    // It relies on the extension to pass the preference through via the global.\n\n    const appendComponentStack = window.__REACT_DEVTOOLS_APPEND_COMPONENT_STACK__ !== false;\n    const breakOnConsoleErrors = window.__REACT_DEVTOOLS_BREAK_ON_CONSOLE_ERRORS__ === true;\n    const showInlineWarningsAndErrors = window.__REACT_DEVTOOLS_SHOW_INLINE_WARNINGS_AND_ERRORS__ !== false;\n    const hideConsoleLogsInStrictMode = window.__REACT_DEVTOOLS_HIDE_CONSOLE_LOGS_IN_STRICT_MODE__ === true;\n    const browserTheme = window.__REACT_DEVTOOLS_BROWSER_THEME__;\n    Object(_console__WEBPACK_IMPORTED_MODULE_7__[\"patch\"])({\n      appendComponentStack,\n      breakOnConsoleErrors,\n      showInlineWarningsAndErrors,\n      hideConsoleLogsInStrictMode,\n      browserTheme\n    });\n  }\n\n  const debug = (name, fiber, parentFiber, extraString = '') => {\n    if (_constants__WEBPACK_IMPORTED_MODULE_5__[\"__DEBUG__\"]) {\n      const displayName = fiber.tag + ':' + (getDisplayNameForFiber(fiber) || 'null');\n      const maybeID = getFiberIDUnsafe(fiber) || '<no id>';\n      const parentDisplayName = parentFiber ? parentFiber.tag + ':' + (getDisplayNameForFiber(parentFiber) || 'null') : '';\n      const maybeParentID = parentFiber ? getFiberIDUnsafe(parentFiber) || '<no-id>' : '';\n      console.groupCollapsed(`[renderer] %c${name} %c${displayName} (${maybeID}) %c${parentFiber ? `${parentDisplayName} (${maybeParentID})` : ''} %c${extraString}`, 'color: red; font-weight: bold;', 'color: blue;', 'color: purple;', 'color: black;');\n      console.log(new Error().stack.split('\\n').slice(1).join('\\n'));\n      console.groupEnd();\n    }\n  }; // Configurable Components tree filters.\n\n\n  const hideElementsWithDisplayNames = new Set();\n  const hideElementsWithPaths = new Set();\n  const hideElementsWithTypes = new Set(); // Highlight updates\n\n  let traceUpdatesEnabled = false;\n  const traceUpdatesForNodes = new Set();\n\n  function applyComponentFilters(componentFilters) {\n    hideElementsWithTypes.clear();\n    hideElementsWithDisplayNames.clear();\n    hideElementsWithPaths.clear();\n    componentFilters.forEach(componentFilter => {\n      if (!componentFilter.isEnabled) {\n        return;\n      }\n\n      switch (componentFilter.type) {\n        case react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_1__[\"ComponentFilterDisplayName\"]:\n          if (componentFilter.isValid && componentFilter.value !== '') {\n            hideElementsWithDisplayNames.add(new RegExp(componentFilter.value, 'i'));\n          }\n\n          break;\n\n        case react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_1__[\"ComponentFilterElementType\"]:\n          hideElementsWithTypes.add(componentFilter.value);\n          break;\n\n        case react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_1__[\"ComponentFilterLocation\"]:\n          if (componentFilter.isValid && componentFilter.value !== '') {\n            hideElementsWithPaths.add(new RegExp(componentFilter.value, 'i'));\n          }\n\n          break;\n\n        case react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_1__[\"ComponentFilterHOC\"]:\n          hideElementsWithDisplayNames.add(new RegExp('\\\\('));\n          break;\n\n        default:\n          console.warn(`Invalid component filter type \"${componentFilter.type}\"`);\n          break;\n      }\n    });\n  } // The renderer interface can't read saved component filters directly,\n  // because they are stored in localStorage within the context of the extension.\n  // Instead it relies on the extension to pass filters through.\n\n\n  if (window.__REACT_DEVTOOLS_COMPONENT_FILTERS__ != null) {\n    applyComponentFilters(window.__REACT_DEVTOOLS_COMPONENT_FILTERS__);\n  } else {\n    // Unfortunately this feature is not expected to work for React Native for now.\n    // It would be annoying for us to spam YellowBox warnings with unactionable stuff,\n    // so for now just skip this message...\n    //console.warn('⚛️ DevTools: Could not locate saved component filters');\n    // Fallback to assuming the default filters in this case.\n    applyComponentFilters(Object(react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_2__[\"getDefaultComponentFilters\"])());\n  } // If necessary, we can revisit optimizing this operation.\n  // For example, we could add a new recursive unmount tree operation.\n  // The unmount operations are already significantly smaller than mount operations though.\n  // This is something to keep in mind for later.\n\n\n  function updateComponentFilters(componentFilters) {\n    if (isProfiling) {\n      // Re-mounting a tree while profiling is in progress might break a lot of assumptions.\n      // If necessary, we could support this- but it doesn't seem like a necessary use case.\n      throw Error('Cannot modify filter preferences while profiling');\n    } // Recursively unmount all roots.\n\n\n    hook.getFiberRoots(rendererID).forEach(root => {\n      currentRootID = getOrGenerateFiberID(root.current); // The TREE_OPERATION_REMOVE_ROOT operation serves two purposes:\n      // 1. It avoids sending unnecessary bridge traffic to clear a root.\n      // 2. It preserves Fiber IDs when remounting (below) which in turn ID to error/warning mapping.\n\n      pushOperation(_constants__WEBPACK_IMPORTED_MODULE_5__[\"TREE_OPERATION_REMOVE_ROOT\"]);\n      flushPendingEvents(root);\n      currentRootID = -1;\n    });\n    applyComponentFilters(componentFilters); // Reset pseudo counters so that new path selections will be persisted.\n\n    rootDisplayNameCounter.clear(); // Recursively re-mount all roots with new filter criteria applied.\n\n    hook.getFiberRoots(rendererID).forEach(root => {\n      currentRootID = getOrGenerateFiberID(root.current);\n      setRootPseudoKey(currentRootID, root.current);\n      mountFiberRecursively(root.current, null, false, false);\n      flushPendingEvents(root);\n      currentRootID = -1;\n    }); // Also re-evaluate all error and warning counts given the new filters.\n\n    reevaluateErrorsAndWarnings();\n    flushPendingEvents();\n  } // NOTICE Keep in sync with get*ForFiber methods\n\n\n  function shouldFilterFiber(fiber) {\n    const {\n      _debugSource,\n      tag,\n      type\n    } = fiber;\n\n    switch (tag) {\n      case DehydratedSuspenseComponent:\n        // TODO: ideally we would show dehydrated Suspense immediately.\n        // However, it has some special behavior (like disconnecting\n        // an alternate and turning into real Suspense) which breaks DevTools.\n        // For now, ignore it, and only show it once it gets hydrated.\n        // https://github.com/bvaughn/react-devtools-experimental/issues/197\n        return true;\n\n      case HostPortal:\n      case HostText:\n      case Fragment:\n      case LegacyHiddenComponent:\n      case OffscreenComponent:\n        return true;\n\n      case HostRoot:\n        // It is never valid to filter the root element.\n        return false;\n\n      default:\n        const typeSymbol = getTypeSymbol(type);\n\n        switch (typeSymbol) {\n          case _ReactSymbols__WEBPACK_IMPORTED_MODULE_8__[\"CONCURRENT_MODE_NUMBER\"]:\n          case _ReactSymbols__WEBPACK_IMPORTED_MODULE_8__[\"CONCURRENT_MODE_SYMBOL_STRING\"]:\n          case _ReactSymbols__WEBPACK_IMPORTED_MODULE_8__[\"DEPRECATED_ASYNC_MODE_SYMBOL_STRING\"]:\n          case _ReactSymbols__WEBPACK_IMPORTED_MODULE_8__[\"STRICT_MODE_NUMBER\"]:\n          case _ReactSymbols__WEBPACK_IMPORTED_MODULE_8__[\"STRICT_MODE_SYMBOL_STRING\"]:\n            return true;\n\n          default:\n            break;\n        }\n\n    }\n\n    const elementType = getElementTypeForFiber(fiber);\n\n    if (hideElementsWithTypes.has(elementType)) {\n      return true;\n    }\n\n    if (hideElementsWithDisplayNames.size > 0) {\n      const displayName = getDisplayNameForFiber(fiber);\n\n      if (displayName != null) {\n        // eslint-disable-next-line no-for-of-loops/no-for-of-loops\n        for (const displayNameRegExp of hideElementsWithDisplayNames) {\n          if (displayNameRegExp.test(displayName)) {\n            return true;\n          }\n        }\n      }\n    }\n\n    if (_debugSource != null && hideElementsWithPaths.size > 0) {\n      const {\n        fileName\n      } = _debugSource; // eslint-disable-next-line no-for-of-loops/no-for-of-loops\n\n      for (const pathRegExp of hideElementsWithPaths) {\n        if (pathRegExp.test(fileName)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  } // NOTICE Keep in sync with shouldFilterFiber() and other get*ForFiber methods\n\n\n  function getElementTypeForFiber(fiber) {\n    const {\n      type,\n      tag\n    } = fiber;\n\n    switch (tag) {\n      case ClassComponent:\n      case IncompleteClassComponent:\n        return react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_1__[\"ElementTypeClass\"];\n\n      case FunctionComponent:\n      case IndeterminateComponent:\n        return react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_1__[\"ElementTypeFunction\"];\n\n      case ForwardRef:\n        return react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_1__[\"ElementTypeForwardRef\"];\n\n      case HostRoot:\n        return react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_1__[\"ElementTypeRoot\"];\n\n      case HostComponent:\n        return react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_1__[\"ElementTypeHostComponent\"];\n\n      case HostPortal:\n      case HostText:\n      case Fragment:\n        return react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_1__[\"ElementTypeOtherOrUnknown\"];\n\n      case MemoComponent:\n      case SimpleMemoComponent:\n        return react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_1__[\"ElementTypeMemo\"];\n\n      case SuspenseComponent:\n        return react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_1__[\"ElementTypeSuspense\"];\n\n      case SuspenseListComponent:\n        return react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_1__[\"ElementTypeSuspenseList\"];\n\n      default:\n        const typeSymbol = getTypeSymbol(type);\n\n        switch (typeSymbol) {\n          case _ReactSymbols__WEBPACK_IMPORTED_MODULE_8__[\"CONCURRENT_MODE_NUMBER\"]:\n          case _ReactSymbols__WEBPACK_IMPORTED_MODULE_8__[\"CONCURRENT_MODE_SYMBOL_STRING\"]:\n          case _ReactSymbols__WEBPACK_IMPORTED_MODULE_8__[\"DEPRECATED_ASYNC_MODE_SYMBOL_STRING\"]:\n            return react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_1__[\"ElementTypeOtherOrUnknown\"];\n\n          case _ReactSymbols__WEBPACK_IMPORTED_MODULE_8__[\"PROVIDER_NUMBER\"]:\n          case _ReactSymbols__WEBPACK_IMPORTED_MODULE_8__[\"PROVIDER_SYMBOL_STRING\"]:\n            return react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_1__[\"ElementTypeContext\"];\n\n          case _ReactSymbols__WEBPACK_IMPORTED_MODULE_8__[\"CONTEXT_NUMBER\"]:\n          case _ReactSymbols__WEBPACK_IMPORTED_MODULE_8__[\"CONTEXT_SYMBOL_STRING\"]:\n            return react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_1__[\"ElementTypeContext\"];\n\n          case _ReactSymbols__WEBPACK_IMPORTED_MODULE_8__[\"STRICT_MODE_NUMBER\"]:\n          case _ReactSymbols__WEBPACK_IMPORTED_MODULE_8__[\"STRICT_MODE_SYMBOL_STRING\"]:\n            return react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_1__[\"ElementTypeOtherOrUnknown\"];\n\n          case _ReactSymbols__WEBPACK_IMPORTED_MODULE_8__[\"PROFILER_NUMBER\"]:\n          case _ReactSymbols__WEBPACK_IMPORTED_MODULE_8__[\"PROFILER_SYMBOL_STRING\"]:\n            return react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_1__[\"ElementTypeProfiler\"];\n\n          default:\n            return react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_1__[\"ElementTypeOtherOrUnknown\"];\n        }\n\n    }\n  } // Map of one or more Fibers in a pair to their unique id number.\n  // We track both Fibers to support Fast Refresh,\n  // which may forcefully replace one of the pair as part of hot reloading.\n  // In that case it's still important to be able to locate the previous ID during subsequent renders.\n\n\n  const fiberToIDMap = new Map(); // Map of id to one (arbitrary) Fiber in a pair.\n  // This Map is used to e.g. get the display name for a Fiber or schedule an update,\n  // operations that should be the same whether the current and work-in-progress Fiber is used.\n\n  const idToArbitraryFiberMap = new Map(); // When profiling is supported, we store the latest tree base durations for each Fiber.\n  // This is so that we can quickly capture a snapshot of those values if profiling starts.\n  // If we didn't store these values, we'd have to crawl the tree when profiling started,\n  // and use a slow path to find each of the current Fibers.\n\n  const idToTreeBaseDurationMap = new Map(); // When profiling is supported, we store the latest tree base durations for each Fiber.\n  // This map enables us to filter these times by root when sending them to the frontend.\n\n  const idToRootMap = new Map(); // When a mount or update is in progress, this value tracks the root that is being operated on.\n\n  let currentRootID = -1; // Returns the unique ID for a Fiber or generates and caches a new one if the Fiber hasn't been seen before.\n  // Once this method has been called for a Fiber, untrackFiberID() should always be called later to avoid leaking.\n\n  function getOrGenerateFiberID(fiber) {\n    let id = null;\n\n    if (fiberToIDMap.has(fiber)) {\n      id = fiberToIDMap.get(fiber);\n    } else {\n      const {\n        alternate\n      } = fiber;\n\n      if (alternate !== null && fiberToIDMap.has(alternate)) {\n        id = fiberToIDMap.get(alternate);\n      }\n    }\n\n    let didGenerateID = false;\n\n    if (id === null) {\n      didGenerateID = true;\n      id = Object(react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_2__[\"getUID\"])();\n    } // This refinement is for Flow purposes only.\n\n\n    const refinedID = id; // Make sure we're tracking this Fiber\n    // e.g. if it just mounted or an error was logged during initial render.\n\n    if (!fiberToIDMap.has(fiber)) {\n      fiberToIDMap.set(fiber, refinedID);\n      idToArbitraryFiberMap.set(refinedID, fiber);\n    } // Also make sure we're tracking its alternate,\n    // e.g. in case this is the first update after mount.\n\n\n    const {\n      alternate\n    } = fiber;\n\n    if (alternate !== null) {\n      if (!fiberToIDMap.has(alternate)) {\n        fiberToIDMap.set(alternate, refinedID);\n      }\n    }\n\n    if (_constants__WEBPACK_IMPORTED_MODULE_5__[\"__DEBUG__\"]) {\n      if (didGenerateID) {\n        debug('getOrGenerateFiberID()', fiber, fiber.return, 'Generated a new UID');\n      }\n    }\n\n    return refinedID;\n  } // Returns an ID if one has already been generated for the Fiber or throws.\n\n\n  function getFiberIDThrows(fiber) {\n    const maybeID = getFiberIDUnsafe(fiber);\n\n    if (maybeID !== null) {\n      return maybeID;\n    }\n\n    throw Error(`Could not find ID for Fiber \"${getDisplayNameForFiber(fiber) || ''}\"`);\n  } // Returns an ID if one has already been generated for the Fiber or null if one has not been generated.\n  // Use this method while e.g. logging to avoid over-retaining Fibers.\n\n\n  function getFiberIDUnsafe(fiber) {\n    if (fiberToIDMap.has(fiber)) {\n      return fiberToIDMap.get(fiber);\n    } else {\n      const {\n        alternate\n      } = fiber;\n\n      if (alternate !== null && fiberToIDMap.has(alternate)) {\n        return fiberToIDMap.get(alternate);\n      }\n    }\n\n    return null;\n  } // Removes a Fiber (and its alternate) from the Maps used to track their id.\n  // This method should always be called when a Fiber is unmounting.\n\n\n  function untrackFiberID(fiber) {\n    if (_constants__WEBPACK_IMPORTED_MODULE_5__[\"__DEBUG__\"]) {\n      debug('untrackFiberID()', fiber, fiber.return, 'schedule after delay');\n    } // Untrack Fibers after a slight delay in order to support a Fast Refresh edge case:\n    // 1. Component type is updated and Fast Refresh schedules an update+remount.\n    // 2. flushPendingErrorsAndWarningsAfterDelay() runs, sees the old Fiber is no longer mounted\n    //    (it's been disconnected by Fast Refresh), and calls untrackFiberID() to clear it from the Map.\n    // 3. React flushes pending passive effects before it runs the next render,\n    //    which logs an error or warning, which causes a new ID to be generated for this Fiber.\n    // 4. DevTools now tries to unmount the old Component with the new ID.\n    //\n    // The underlying problem here is the premature clearing of the Fiber ID,\n    // but DevTools has no way to detect that a given Fiber has been scheduled for Fast Refresh.\n    // (The \"_debugNeedsRemount\" flag won't necessarily be set.)\n    //\n    // The best we can do is to delay untracking by a small amount,\n    // and give React time to process the Fast Refresh delay.\n\n\n    untrackFibersSet.add(fiber); // React may detach alternate pointers during unmount;\n    // Since our untracking code is async, we should explicily track the pending alternate here as well.\n\n    const alternate = fiber.alternate;\n\n    if (alternate !== null) {\n      untrackFibersSet.add(alternate);\n    }\n\n    if (untrackFibersTimeoutID === null) {\n      untrackFibersTimeoutID = setTimeout(untrackFibers, 1000);\n    }\n  }\n\n  const untrackFibersSet = new Set();\n  let untrackFibersTimeoutID = null;\n\n  function untrackFibers() {\n    if (untrackFibersTimeoutID !== null) {\n      clearTimeout(untrackFibersTimeoutID);\n      untrackFibersTimeoutID = null;\n    }\n\n    untrackFibersSet.forEach(fiber => {\n      const fiberID = getFiberIDUnsafe(fiber);\n\n      if (fiberID !== null) {\n        idToArbitraryFiberMap.delete(fiberID); // Also clear any errors/warnings associated with this fiber.\n\n        clearErrorsForFiberID(fiberID);\n        clearWarningsForFiberID(fiberID);\n      }\n\n      fiberToIDMap.delete(fiber);\n      const {\n        alternate\n      } = fiber;\n\n      if (alternate !== null) {\n        fiberToIDMap.delete(alternate);\n      }\n\n      if (forceErrorForFiberIDs.has(fiberID)) {\n        forceErrorForFiberIDs.delete(fiberID);\n\n        if (forceErrorForFiberIDs.size === 0 && setErrorHandler != null) {\n          setErrorHandler(shouldErrorFiberAlwaysNull);\n        }\n      }\n    });\n    untrackFibersSet.clear();\n  }\n\n  function getChangeDescription(prevFiber, nextFiber) {\n    switch (getElementTypeForFiber(nextFiber)) {\n      case react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_1__[\"ElementTypeClass\"]:\n      case react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_1__[\"ElementTypeFunction\"]:\n      case react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_1__[\"ElementTypeMemo\"]:\n      case react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_1__[\"ElementTypeForwardRef\"]:\n        if (prevFiber === null) {\n          return {\n            context: null,\n            didHooksChange: false,\n            isFirstMount: true,\n            props: null,\n            state: null\n          };\n        } else {\n          const data = {\n            context: getContextChangedKeys(nextFiber),\n            didHooksChange: false,\n            isFirstMount: false,\n            props: getChangedKeys(prevFiber.memoizedProps, nextFiber.memoizedProps),\n            state: getChangedKeys(prevFiber.memoizedState, nextFiber.memoizedState)\n          }; // Only traverse the hooks list once, depending on what info we're returning.\n\n          if (react_devtools_feature_flags__WEBPACK_IMPORTED_MODULE_9__[\"enableProfilerChangedHookIndices\"]) {\n            const indices = getChangedHooksIndices(prevFiber.memoizedState, nextFiber.memoizedState);\n            data.hooks = indices;\n            data.didHooksChange = indices !== null && indices.length > 0;\n          } else {\n            data.didHooksChange = didHooksChange(prevFiber.memoizedState, nextFiber.memoizedState);\n          }\n\n          return data;\n        }\n\n      default:\n        return null;\n    }\n  }\n\n  function updateContextsForFiber(fiber) {\n    switch (getElementTypeForFiber(fiber)) {\n      case react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_1__[\"ElementTypeClass\"]:\n      case react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_1__[\"ElementTypeForwardRef\"]:\n      case react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_1__[\"ElementTypeFunction\"]:\n      case react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_1__[\"ElementTypeMemo\"]:\n        if (idToContextsMap !== null) {\n          const id = getFiberIDThrows(fiber);\n          const contexts = getContextsForFiber(fiber);\n\n          if (contexts !== null) {\n            idToContextsMap.set(id, contexts);\n          }\n        }\n\n        break;\n\n      default:\n        break;\n    }\n  } // Differentiates between a null context value and no context.\n\n\n  const NO_CONTEXT = {};\n\n  function getContextsForFiber(fiber) {\n    let legacyContext = NO_CONTEXT;\n    let modernContext = NO_CONTEXT;\n\n    switch (getElementTypeForFiber(fiber)) {\n      case react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_1__[\"ElementTypeClass\"]:\n        const instance = fiber.stateNode;\n\n        if (instance != null) {\n          if (instance.constructor && instance.constructor.contextType != null) {\n            modernContext = instance.context;\n          } else {\n            legacyContext = instance.context;\n\n            if (legacyContext && Object.keys(legacyContext).length === 0) {\n              legacyContext = NO_CONTEXT;\n            }\n          }\n        }\n\n        return [legacyContext, modernContext];\n\n      case react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_1__[\"ElementTypeForwardRef\"]:\n      case react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_1__[\"ElementTypeFunction\"]:\n      case react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_1__[\"ElementTypeMemo\"]:\n        const dependencies = fiber.dependencies;\n\n        if (dependencies && dependencies.firstContext) {\n          modernContext = dependencies.firstContext;\n        }\n\n        return [legacyContext, modernContext];\n\n      default:\n        return null;\n    }\n  } // Record all contexts at the time profiling is started.\n  // Fibers only store the current context value,\n  // so we need to track them separately in order to determine changed keys.\n\n\n  function crawlToInitializeContextsMap(fiber) {\n    updateContextsForFiber(fiber);\n    let current = fiber.child;\n\n    while (current !== null) {\n      crawlToInitializeContextsMap(current);\n      current = current.sibling;\n    }\n  }\n\n  function getContextChangedKeys(fiber) {\n    if (idToContextsMap !== null) {\n      const id = getFiberIDThrows(fiber);\n      const prevContexts = idToContextsMap.has(id) ? idToContextsMap.get(id) : null;\n      const nextContexts = getContextsForFiber(fiber);\n\n      if (prevContexts == null || nextContexts == null) {\n        return null;\n      }\n\n      const [prevLegacyContext, prevModernContext] = prevContexts;\n      const [nextLegacyContext, nextModernContext] = nextContexts;\n\n      switch (getElementTypeForFiber(fiber)) {\n        case react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_1__[\"ElementTypeClass\"]:\n          if (prevContexts && nextContexts) {\n            if (nextLegacyContext !== NO_CONTEXT) {\n              return getChangedKeys(prevLegacyContext, nextLegacyContext);\n            } else if (nextModernContext !== NO_CONTEXT) {\n              return prevModernContext !== nextModernContext;\n            }\n          }\n\n          break;\n\n        case react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_1__[\"ElementTypeForwardRef\"]:\n        case react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_1__[\"ElementTypeFunction\"]:\n        case react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_1__[\"ElementTypeMemo\"]:\n          if (nextModernContext !== NO_CONTEXT) {\n            let prevContext = prevModernContext;\n            let nextContext = nextModernContext;\n\n            while (prevContext && nextContext) {\n              // Note this only works for versions of React that support this key (e.v. 18+)\n              // For older versions, there's no good way to read the current context value after render has completed.\n              // This is because React maintains a stack of context values during render,\n              // but by the time DevTools is called, render has finished and the stack is empty.\n              if (!Object(shared_objectIs__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(prevContext.memoizedValue, nextContext.memoizedValue)) {\n                return true;\n              }\n\n              prevContext = prevContext.next;\n              nextContext = nextContext.next;\n            }\n\n            return false;\n          }\n\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    return null;\n  }\n\n  function areHookInputsEqual(nextDeps, prevDeps) {\n    if (prevDeps === null) {\n      return false;\n    }\n\n    for (let i = 0; i < prevDeps.length && i < nextDeps.length; i++) {\n      if (Object(shared_objectIs__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(nextDeps[i], prevDeps[i])) {\n        continue;\n      }\n\n      return false;\n    }\n\n    return true;\n  }\n\n  function isEffect(memoizedState) {\n    if (memoizedState === null || typeof memoizedState !== 'object') {\n      return false;\n    }\n\n    const {\n      deps\n    } = memoizedState;\n    const boundHasOwnProperty = shared_hasOwnProperty__WEBPACK_IMPORTED_MODULE_12__[\"default\"].bind(memoizedState);\n    return boundHasOwnProperty('create') && boundHasOwnProperty('destroy') && boundHasOwnProperty('deps') && boundHasOwnProperty('next') && boundHasOwnProperty('tag') && (deps === null || Object(shared_isArray__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(deps));\n  }\n\n  function didHookChange(prev, next) {\n    const prevMemoizedState = prev.memoizedState;\n    const nextMemoizedState = next.memoizedState;\n\n    if (isEffect(prevMemoizedState) && isEffect(nextMemoizedState)) {\n      return prevMemoizedState !== nextMemoizedState && !areHookInputsEqual(nextMemoizedState.deps, prevMemoizedState.deps);\n    }\n\n    return nextMemoizedState !== prevMemoizedState;\n  }\n\n  function didHooksChange(prev, next) {\n    if (prev == null || next == null) {\n      return false;\n    } // We can't report anything meaningful for hooks changes.\n\n\n    if (next.hasOwnProperty('baseState') && next.hasOwnProperty('memoizedState') && next.hasOwnProperty('next') && next.hasOwnProperty('queue')) {\n      while (next !== null) {\n        if (didHookChange(prev, next)) {\n          return true;\n        } else {\n          next = next.next;\n          prev = prev.next;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  function getChangedHooksIndices(prev, next) {\n    if (react_devtools_feature_flags__WEBPACK_IMPORTED_MODULE_9__[\"enableProfilerChangedHookIndices\"]) {\n      if (prev == null || next == null) {\n        return null;\n      }\n\n      const indices = [];\n      let index = 0;\n\n      if (next.hasOwnProperty('baseState') && next.hasOwnProperty('memoizedState') && next.hasOwnProperty('next') && next.hasOwnProperty('queue')) {\n        while (next !== null) {\n          if (didHookChange(prev, next)) {\n            indices.push(index);\n          }\n\n          next = next.next;\n          prev = prev.next;\n          index++;\n        }\n      }\n\n      return indices;\n    }\n\n    return null;\n  }\n\n  function getChangedKeys(prev, next) {\n    if (prev == null || next == null) {\n      return null;\n    } // We can't report anything meaningful for hooks changes.\n\n\n    if (next.hasOwnProperty('baseState') && next.hasOwnProperty('memoizedState') && next.hasOwnProperty('next') && next.hasOwnProperty('queue')) {\n      return null;\n    }\n\n    const keys = new Set([...Object.keys(prev), ...Object.keys(next)]);\n    const changedKeys = []; // eslint-disable-next-line no-for-of-loops/no-for-of-loops\n\n    for (const key of keys) {\n      if (prev[key] !== next[key]) {\n        changedKeys.push(key);\n      }\n    }\n\n    return changedKeys;\n  } // eslint-disable-next-line no-unused-vars\n\n\n  function didFiberRender(prevFiber, nextFiber) {\n    switch (nextFiber.tag) {\n      case ClassComponent:\n      case FunctionComponent:\n      case ContextConsumer:\n      case MemoComponent:\n      case SimpleMemoComponent:\n        // For types that execute user code, we check PerformedWork effect.\n        // We don't reflect bailouts (either referential or sCU) in DevTools.\n        // eslint-disable-next-line no-bitwise\n        return (getFiberFlags(nextFiber) & PerformedWork) === PerformedWork;\n      // Note: ContextConsumer only gets PerformedWork effect in 16.3.3+\n      // so it won't get highlighted with React 16.3.0 to 16.3.2.\n\n      default:\n        // For host components and other types, we compare inputs\n        // to determine whether something is an update.\n        return prevFiber.memoizedProps !== nextFiber.memoizedProps || prevFiber.memoizedState !== nextFiber.memoizedState || prevFiber.ref !== nextFiber.ref;\n    }\n  }\n\n  const pendingOperations = [];\n  const pendingRealUnmountedIDs = [];\n  const pendingSimulatedUnmountedIDs = [];\n  let pendingOperationsQueue = [];\n  const pendingStringTable = new Map();\n  let pendingStringTableLength = 0;\n  let pendingUnmountedRootID = null;\n\n  function pushOperation(op) {\n    if (true) {\n      if (!Number.isInteger(op)) {\n        console.error('pushOperation() was called but the value is not an integer.', op);\n      }\n    }\n\n    pendingOperations.push(op);\n  }\n\n  function flushOrQueueOperations(operations) {\n    if (operations.length === 3) {\n      // This operations array is a no op: [renderer ID, root ID, string table size (0)]\n      // We can usually skip sending updates like this across the bridge, unless we're Profiling.\n      // In that case, even though the tree didn't change– some Fibers may have still rendered.\n      if (!isProfiling || currentCommitProfilingMetadata == null || currentCommitProfilingMetadata.durations.length === 0) {\n        return;\n      }\n    }\n\n    if (pendingOperationsQueue !== null) {\n      pendingOperationsQueue.push(operations);\n    } else {\n      hook.emit('operations', operations);\n    }\n  }\n\n  let flushPendingErrorsAndWarningsAfterDelayTimeoutID = null;\n\n  function clearPendingErrorsAndWarningsAfterDelay() {\n    if (flushPendingErrorsAndWarningsAfterDelayTimeoutID !== null) {\n      clearTimeout(flushPendingErrorsAndWarningsAfterDelayTimeoutID);\n      flushPendingErrorsAndWarningsAfterDelayTimeoutID = null;\n    }\n  }\n\n  function flushPendingErrorsAndWarningsAfterDelay() {\n    clearPendingErrorsAndWarningsAfterDelay();\n    flushPendingErrorsAndWarningsAfterDelayTimeoutID = setTimeout(() => {\n      flushPendingErrorsAndWarningsAfterDelayTimeoutID = null;\n\n      if (pendingOperations.length > 0) {\n        // On the off chance that something else has pushed pending operations,\n        // we should bail on warnings; it's probably not safe to push midway.\n        return;\n      }\n\n      recordPendingErrorsAndWarnings();\n\n      if (pendingOperations.length === 0) {\n        // No warnings or errors to flush; we can bail out early here too.\n        return;\n      } // We can create a smaller operations array than flushPendingEvents()\n      // because we only need to flush warning and error counts.\n      // Only a few pieces of fixed information are required up front.\n\n\n      const operations = new Array(3 + pendingOperations.length);\n      operations[0] = rendererID;\n      operations[1] = currentRootID;\n      operations[2] = 0; // String table size\n\n      for (let j = 0; j < pendingOperations.length; j++) {\n        operations[3 + j] = pendingOperations[j];\n      }\n\n      flushOrQueueOperations(operations);\n      pendingOperations.length = 0;\n    }, 1000);\n  }\n\n  function reevaluateErrorsAndWarnings() {\n    fibersWithChangedErrorOrWarningCounts.clear();\n    fiberIDToErrorsMap.forEach((countMap, fiberID) => {\n      const fiber = idToArbitraryFiberMap.get(fiberID);\n\n      if (fiber != null) {\n        fibersWithChangedErrorOrWarningCounts.add(fiber);\n      }\n    });\n    fiberIDToWarningsMap.forEach((countMap, fiberID) => {\n      const fiber = idToArbitraryFiberMap.get(fiberID);\n\n      if (fiber != null) {\n        fibersWithChangedErrorOrWarningCounts.add(fiber);\n      }\n    });\n    recordPendingErrorsAndWarnings();\n  }\n\n  function mergeMapsAndGetCountHelper(fiber, fiberID, pendingFiberToMessageCountMap, fiberIDToMessageCountMap) {\n    let newCount = 0;\n    let messageCountMap = fiberIDToMessageCountMap.get(fiberID);\n    const pendingMessageCountMap = pendingFiberToMessageCountMap.get(fiber);\n\n    if (pendingMessageCountMap != null) {\n      if (messageCountMap == null) {\n        messageCountMap = pendingMessageCountMap;\n        fiberIDToMessageCountMap.set(fiberID, pendingMessageCountMap);\n      } else {\n        // This Flow refinement should not be necessary and yet...\n        const refinedMessageCountMap = messageCountMap;\n        pendingMessageCountMap.forEach((pendingCount, message) => {\n          const previousCount = refinedMessageCountMap.get(message) || 0;\n          refinedMessageCountMap.set(message, previousCount + pendingCount);\n        });\n      }\n    }\n\n    if (!shouldFilterFiber(fiber)) {\n      if (messageCountMap != null) {\n        messageCountMap.forEach(count => {\n          newCount += count;\n        });\n      }\n    }\n\n    pendingFiberToMessageCountMap.delete(fiber);\n    return newCount;\n  }\n\n  function recordPendingErrorsAndWarnings() {\n    clearPendingErrorsAndWarningsAfterDelay();\n    fibersWithChangedErrorOrWarningCounts.forEach(fiber => {\n      const fiberID = getFiberIDUnsafe(fiber);\n\n      if (fiberID === null) {// Don't send updates for Fibers that didn't mount due to e.g. Suspense or an error boundary.\n      } else {\n        const errorCount = mergeMapsAndGetCountHelper(fiber, fiberID, pendingFiberToErrorsMap, fiberIDToErrorsMap);\n        const warningCount = mergeMapsAndGetCountHelper(fiber, fiberID, pendingFiberToWarningsMap, fiberIDToWarningsMap);\n        pushOperation(_constants__WEBPACK_IMPORTED_MODULE_5__[\"TREE_OPERATION_UPDATE_ERRORS_OR_WARNINGS\"]);\n        pushOperation(fiberID);\n        pushOperation(errorCount);\n        pushOperation(warningCount);\n      } // Always clean up so that we don't leak.\n\n\n      pendingFiberToErrorsMap.delete(fiber);\n      pendingFiberToWarningsMap.delete(fiber);\n    });\n    fibersWithChangedErrorOrWarningCounts.clear();\n  }\n\n  function flushPendingEvents(root) {\n    // Add any pending errors and warnings to the operations array.\n    // We do this just before flushing, so we can ignore errors for no-longer-mounted Fibers.\n    recordPendingErrorsAndWarnings();\n\n    if (pendingOperations.length === 0 && pendingRealUnmountedIDs.length === 0 && pendingSimulatedUnmountedIDs.length === 0 && pendingUnmountedRootID === null) {\n      // If we aren't profiling, we can just bail out here.\n      // No use sending an empty update over the bridge.\n      //\n      // The Profiler stores metadata for each commit and reconstructs the app tree per commit using:\n      // (1) an initial tree snapshot and\n      // (2) the operations array for each commit\n      // Because of this, it's important that the operations and metadata arrays align,\n      // So it's important not to omit even empty operations while profiling is active.\n      if (!isProfiling) {\n        return;\n      }\n    }\n\n    const numUnmountIDs = pendingRealUnmountedIDs.length + pendingSimulatedUnmountedIDs.length + (pendingUnmountedRootID === null ? 0 : 1);\n    const operations = new Array( // Identify which renderer this update is coming from.\n    2 + // [rendererID, rootFiberID]\n    // How big is the string table?\n    1 + // [stringTableLength]\n    // Then goes the actual string table.\n    pendingStringTableLength + ( // All unmounts are batched in a single message.\n    // [TREE_OPERATION_REMOVE, removedIDLength, ...ids]\n    numUnmountIDs > 0 ? 2 + numUnmountIDs : 0) + // Regular operations\n    pendingOperations.length); // Identify which renderer this update is coming from.\n    // This enables roots to be mapped to renderers,\n    // Which in turn enables fiber props, states, and hooks to be inspected.\n\n    let i = 0;\n    operations[i++] = rendererID;\n    operations[i++] = currentRootID; // Now fill in the string table.\n    // [stringTableLength, str1Length, ...str1, str2Length, ...str2, ...]\n\n    operations[i++] = pendingStringTableLength;\n    pendingStringTable.forEach((entry, stringKey) => {\n      const encodedString = entry.encodedString; // Don't use the string length.\n      // It won't work for multibyte characters (like emoji).\n\n      const length = encodedString.length;\n      operations[i++] = length;\n\n      for (let j = 0; j < length; j++) {\n        operations[i + j] = encodedString[j];\n      }\n\n      i += length;\n    });\n\n    if (numUnmountIDs > 0) {\n      // All unmounts except roots are batched in a single message.\n      operations[i++] = _constants__WEBPACK_IMPORTED_MODULE_5__[\"TREE_OPERATION_REMOVE\"]; // The first number is how many unmounted IDs we're gonna send.\n\n      operations[i++] = numUnmountIDs; // Fill in the real unmounts in the reverse order.\n      // They were inserted parents-first by React, but we want children-first.\n      // So we traverse our array backwards.\n\n      for (let j = pendingRealUnmountedIDs.length - 1; j >= 0; j--) {\n        operations[i++] = pendingRealUnmountedIDs[j];\n      } // Fill in the simulated unmounts (hidden Suspense subtrees) in their order.\n      // (We want children to go before parents.)\n      // They go *after* the real unmounts because we know for sure they won't be\n      // children of already pushed \"real\" IDs. If they were, we wouldn't be able\n      // to discover them during the traversal, as they would have been deleted.\n\n\n      for (let j = 0; j < pendingSimulatedUnmountedIDs.length; j++) {\n        operations[i + j] = pendingSimulatedUnmountedIDs[j];\n      }\n\n      i += pendingSimulatedUnmountedIDs.length; // The root ID should always be unmounted last.\n\n      if (pendingUnmountedRootID !== null) {\n        operations[i] = pendingUnmountedRootID;\n        i++;\n      }\n    } // Fill in the rest of the operations.\n\n\n    for (let j = 0; j < pendingOperations.length; j++) {\n      operations[i + j] = pendingOperations[j];\n    }\n\n    i += pendingOperations.length; // Let the frontend know about tree operations.\n\n    flushOrQueueOperations(operations); // Reset all of the pending state now that we've told the frontend about it.\n\n    pendingOperations.length = 0;\n    pendingRealUnmountedIDs.length = 0;\n    pendingSimulatedUnmountedIDs.length = 0;\n    pendingUnmountedRootID = null;\n    pendingStringTable.clear();\n    pendingStringTableLength = 0;\n  }\n\n  function getStringID(string) {\n    if (string === null) {\n      return 0;\n    }\n\n    const existingEntry = pendingStringTable.get(string);\n\n    if (existingEntry !== undefined) {\n      return existingEntry.id;\n    }\n\n    const id = pendingStringTable.size + 1;\n    const encodedString = Object(react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_2__[\"utfEncodeString\"])(string);\n    pendingStringTable.set(string, {\n      encodedString,\n      id\n    }); // The string table total length needs to account both for the string length,\n    // and for the array item that contains the length itself.\n    //\n    // Don't use string length for this table.\n    // It won't work for multibyte characters (like emoji).\n\n    pendingStringTableLength += encodedString.length + 1;\n    return id;\n  }\n\n  function recordMount(fiber, parentFiber) {\n    const isRoot = fiber.tag === HostRoot;\n    const id = getOrGenerateFiberID(fiber);\n\n    if (_constants__WEBPACK_IMPORTED_MODULE_5__[\"__DEBUG__\"]) {\n      debug('recordMount()', fiber, parentFiber);\n    }\n\n    const hasOwnerMetadata = fiber.hasOwnProperty('_debugOwner');\n    const isProfilingSupported = fiber.hasOwnProperty('treeBaseDuration');\n\n    if (isRoot) {\n      pushOperation(_constants__WEBPACK_IMPORTED_MODULE_5__[\"TREE_OPERATION_ADD\"]);\n      pushOperation(id);\n      pushOperation(react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_1__[\"ElementTypeRoot\"]);\n      pushOperation((fiber.mode & StrictModeBits) !== 0 ? 1 : 0);\n      pushOperation(isProfilingSupported ? 1 : 0);\n      pushOperation(StrictModeBits !== 0 ? 1 : 0);\n      pushOperation(hasOwnerMetadata ? 1 : 0);\n\n      if (isProfiling) {\n        if (displayNamesByRootID !== null) {\n          displayNamesByRootID.set(id, getDisplayNameForRoot(fiber));\n        }\n      }\n    } else {\n      const {\n        key\n      } = fiber;\n      const displayName = getDisplayNameForFiber(fiber);\n      const elementType = getElementTypeForFiber(fiber);\n      const {\n        _debugOwner\n      } = fiber; // Ideally we should call getFiberIDThrows() for _debugOwner,\n      // since owners are almost always higher in the tree (and so have already been processed),\n      // but in some (rare) instances reported in open source, a descendant mounts before an owner.\n      // Since this is a DEV only field it's probably okay to also just lazily generate and ID here if needed.\n      // See https://github.com/facebook/react/issues/21445\n\n      const ownerID = _debugOwner != null ? getOrGenerateFiberID(_debugOwner) : 0;\n      const parentID = parentFiber ? getFiberIDThrows(parentFiber) : 0;\n      const displayNameStringID = getStringID(displayName); // This check is a guard to handle a React element that has been modified\n      // in such a way as to bypass the default stringification of the \"key\" property.\n\n      const keyString = key === null ? null : String(key);\n      const keyStringID = getStringID(keyString);\n      pushOperation(_constants__WEBPACK_IMPORTED_MODULE_5__[\"TREE_OPERATION_ADD\"]);\n      pushOperation(id);\n      pushOperation(elementType);\n      pushOperation(parentID);\n      pushOperation(ownerID);\n      pushOperation(displayNameStringID);\n      pushOperation(keyStringID); // If this subtree has a new mode, let the frontend know.\n\n      if ((fiber.mode & StrictModeBits) !== 0 && (parentFiber.mode & StrictModeBits) === 0) {\n        pushOperation(_constants__WEBPACK_IMPORTED_MODULE_5__[\"TREE_OPERATION_SET_SUBTREE_MODE\"]);\n        pushOperation(id);\n        pushOperation(react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_1__[\"StrictMode\"]);\n      }\n    }\n\n    if (isProfilingSupported) {\n      idToRootMap.set(id, currentRootID);\n      recordProfilingDurations(fiber);\n    }\n  }\n\n  function recordUnmount(fiber, isSimulated) {\n    if (_constants__WEBPACK_IMPORTED_MODULE_5__[\"__DEBUG__\"]) {\n      debug('recordUnmount()', fiber, null, isSimulated ? 'unmount is simulated' : '');\n    }\n\n    if (trackedPathMatchFiber !== null) {\n      // We're in the process of trying to restore previous selection.\n      // If this fiber matched but is being unmounted, there's no use trying.\n      // Reset the state so we don't keep holding onto it.\n      if (fiber === trackedPathMatchFiber || fiber === trackedPathMatchFiber.alternate) {\n        setTrackedPath(null);\n      }\n    }\n\n    const unsafeID = getFiberIDUnsafe(fiber);\n\n    if (unsafeID === null) {\n      // If we've never seen this Fiber, it might be inside of a legacy render Suspense fragment (so the store is not even aware of it).\n      // In that case we can just ignore it or it will cause errors later on.\n      // One example of this is a Lazy component that never resolves before being unmounted.\n      //\n      // This also might indicate a Fast Refresh force-remount scenario.\n      //\n      // TODO: This is fragile and can obscure actual bugs.\n      return;\n    } // Flow refinement.\n\n\n    const id = unsafeID;\n    const isRoot = fiber.tag === HostRoot;\n\n    if (isRoot) {\n      // Roots must be removed only after all children (pending and simulated) have been removed.\n      // So we track it separately.\n      pendingUnmountedRootID = id;\n    } else if (!shouldFilterFiber(fiber)) {\n      // To maintain child-first ordering,\n      // we'll push it into one of these queues,\n      // and later arrange them in the correct order.\n      if (isSimulated) {\n        pendingSimulatedUnmountedIDs.push(id);\n      } else {\n        pendingRealUnmountedIDs.push(id);\n      }\n    }\n\n    if (!fiber._debugNeedsRemount) {\n      untrackFiberID(fiber);\n      const isProfilingSupported = fiber.hasOwnProperty('treeBaseDuration');\n\n      if (isProfilingSupported) {\n        idToRootMap.delete(id);\n        idToTreeBaseDurationMap.delete(id);\n      }\n    }\n  }\n\n  function mountFiberRecursively(firstChild, parentFiber, traverseSiblings, traceNearestHostComponentUpdate) {\n    // Iterate over siblings rather than recursing.\n    // This reduces the chance of stack overflow for wide trees (e.g. lists with many items).\n    let fiber = firstChild;\n\n    while (fiber !== null) {\n      // Generate an ID even for filtered Fibers, in case it's needed later (e.g. for Profiling).\n      getOrGenerateFiberID(fiber);\n\n      if (_constants__WEBPACK_IMPORTED_MODULE_5__[\"__DEBUG__\"]) {\n        debug('mountFiberRecursively()', fiber, parentFiber);\n      } // If we have the tree selection from previous reload, try to match this Fiber.\n      // Also remember whether to do the same for siblings.\n\n\n      const mightSiblingsBeOnTrackedPath = updateTrackedPathStateBeforeMount(fiber);\n      const shouldIncludeInTree = !shouldFilterFiber(fiber);\n\n      if (shouldIncludeInTree) {\n        recordMount(fiber, parentFiber);\n      }\n\n      if (traceUpdatesEnabled) {\n        if (traceNearestHostComponentUpdate) {\n          const elementType = getElementTypeForFiber(fiber); // If an ancestor updated, we should mark the nearest host nodes for highlighting.\n\n          if (elementType === react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_1__[\"ElementTypeHostComponent\"]) {\n            traceUpdatesForNodes.add(fiber.stateNode);\n            traceNearestHostComponentUpdate = false;\n          }\n        } // We intentionally do not re-enable the traceNearestHostComponentUpdate flag in this branch,\n        // because we don't want to highlight every host node inside of a newly mounted subtree.\n\n      }\n\n      const isSuspense = fiber.tag === ReactTypeOfWork.SuspenseComponent;\n\n      if (isSuspense) {\n        const isTimedOut = fiber.memoizedState !== null;\n\n        if (isTimedOut) {\n          // Special case: if Suspense mounts in a timed-out state,\n          // get the fallback child from the inner fragment and mount\n          // it as if it was our own child. Updates handle this too.\n          const primaryChildFragment = fiber.child;\n          const fallbackChildFragment = primaryChildFragment ? primaryChildFragment.sibling : null;\n          const fallbackChild = fallbackChildFragment ? fallbackChildFragment.child : null;\n\n          if (fallbackChild !== null) {\n            mountFiberRecursively(fallbackChild, shouldIncludeInTree ? fiber : parentFiber, true, traceNearestHostComponentUpdate);\n          }\n        } else {\n          let primaryChild = null;\n          const areSuspenseChildrenConditionallyWrapped = OffscreenComponent === -1;\n\n          if (areSuspenseChildrenConditionallyWrapped) {\n            primaryChild = fiber.child;\n          } else if (fiber.child !== null) {\n            primaryChild = fiber.child.child;\n          }\n\n          if (primaryChild !== null) {\n            mountFiberRecursively(primaryChild, shouldIncludeInTree ? fiber : parentFiber, true, traceNearestHostComponentUpdate);\n          }\n        }\n      } else {\n        if (fiber.child !== null) {\n          mountFiberRecursively(fiber.child, shouldIncludeInTree ? fiber : parentFiber, true, traceNearestHostComponentUpdate);\n        }\n      } // We're exiting this Fiber now, and entering its siblings.\n      // If we have selection to restore, we might need to re-activate tracking.\n\n\n      updateTrackedPathStateAfterMount(mightSiblingsBeOnTrackedPath);\n      fiber = traverseSiblings ? fiber.sibling : null;\n    }\n  } // We use this to simulate unmounting for Suspense trees\n  // when we switch from primary to fallback.\n\n\n  function unmountFiberChildrenRecursively(fiber) {\n    if (_constants__WEBPACK_IMPORTED_MODULE_5__[\"__DEBUG__\"]) {\n      debug('unmountFiberChildrenRecursively()', fiber);\n    } // We might meet a nested Suspense on our way.\n\n\n    const isTimedOutSuspense = fiber.tag === ReactTypeOfWork.SuspenseComponent && fiber.memoizedState !== null;\n    let child = fiber.child;\n\n    if (isTimedOutSuspense) {\n      // If it's showing fallback tree, let's traverse it instead.\n      const primaryChildFragment = fiber.child;\n      const fallbackChildFragment = primaryChildFragment ? primaryChildFragment.sibling : null; // Skip over to the real Fiber child.\n\n      child = fallbackChildFragment ? fallbackChildFragment.child : null;\n    }\n\n    while (child !== null) {\n      // Record simulated unmounts children-first.\n      // We skip nodes without return because those are real unmounts.\n      if (child.return !== null) {\n        unmountFiberChildrenRecursively(child);\n        recordUnmount(child, true);\n      }\n\n      child = child.sibling;\n    }\n  }\n\n  function recordProfilingDurations(fiber) {\n    const id = getFiberIDThrows(fiber);\n    const {\n      actualDuration,\n      treeBaseDuration\n    } = fiber;\n    idToTreeBaseDurationMap.set(id, treeBaseDuration || 0);\n\n    if (isProfiling) {\n      const {\n        alternate\n      } = fiber; // It's important to update treeBaseDuration even if the current Fiber did not render,\n      // because it's possible that one of its descendants did.\n\n      if (alternate == null || treeBaseDuration !== alternate.treeBaseDuration) {\n        // Tree base duration updates are included in the operations typed array.\n        // So we have to convert them from milliseconds to microseconds so we can send them as ints.\n        const convertedTreeBaseDuration = Math.floor((treeBaseDuration || 0) * 1000);\n        pushOperation(_constants__WEBPACK_IMPORTED_MODULE_5__[\"TREE_OPERATION_UPDATE_TREE_BASE_DURATION\"]);\n        pushOperation(id);\n        pushOperation(convertedTreeBaseDuration);\n      }\n\n      if (alternate == null || didFiberRender(alternate, fiber)) {\n        if (actualDuration != null) {\n          // The actual duration reported by React includes time spent working on children.\n          // This is useful information, but it's also useful to be able to exclude child durations.\n          // The frontend can't compute this, since the immediate children may have been filtered out.\n          // So we need to do this on the backend.\n          // Note that this calculated self duration is not the same thing as the base duration.\n          // The two are calculated differently (tree duration does not accumulate).\n          let selfDuration = actualDuration;\n          let child = fiber.child;\n\n          while (child !== null) {\n            selfDuration -= child.actualDuration || 0;\n            child = child.sibling;\n          } // If profiling is active, store durations for elements that were rendered during the commit.\n          // Note that we should do this for any fiber we performed work on, regardless of its actualDuration value.\n          // In some cases actualDuration might be 0 for fibers we worked on (particularly if we're using Date.now)\n          // In other cases (e.g. Memo) actualDuration might be greater than 0 even if we \"bailed out\".\n\n\n          const metadata = currentCommitProfilingMetadata;\n          metadata.durations.push(id, actualDuration, selfDuration);\n          metadata.maxActualDuration = Math.max(metadata.maxActualDuration, actualDuration);\n\n          if (recordChangeDescriptions) {\n            const changeDescription = getChangeDescription(alternate, fiber);\n\n            if (changeDescription !== null) {\n              if (metadata.changeDescriptions !== null) {\n                metadata.changeDescriptions.set(id, changeDescription);\n              }\n            }\n\n            updateContextsForFiber(fiber);\n          }\n        }\n      }\n    }\n  }\n\n  function recordResetChildren(fiber, childSet) {\n    if (_constants__WEBPACK_IMPORTED_MODULE_5__[\"__DEBUG__\"]) {\n      debug('recordResetChildren()', childSet, fiber);\n    } // The frontend only really cares about the displayName, key, and children.\n    // The first two don't really change, so we are only concerned with the order of children here.\n    // This is trickier than a simple comparison though, since certain types of fibers are filtered.\n\n\n    const nextChildren = []; // This is a naive implementation that shallowly recourses children.\n    // We might want to revisit this if it proves to be too inefficient.\n\n    let child = childSet;\n\n    while (child !== null) {\n      findReorderedChildrenRecursively(child, nextChildren);\n      child = child.sibling;\n    }\n\n    const numChildren = nextChildren.length;\n\n    if (numChildren < 2) {\n      // No need to reorder.\n      return;\n    }\n\n    pushOperation(_constants__WEBPACK_IMPORTED_MODULE_5__[\"TREE_OPERATION_REORDER_CHILDREN\"]);\n    pushOperation(getFiberIDThrows(fiber));\n    pushOperation(numChildren);\n\n    for (let i = 0; i < nextChildren.length; i++) {\n      pushOperation(nextChildren[i]);\n    }\n  }\n\n  function findReorderedChildrenRecursively(fiber, nextChildren) {\n    if (!shouldFilterFiber(fiber)) {\n      nextChildren.push(getFiberIDThrows(fiber));\n    } else {\n      let child = fiber.child;\n      const isTimedOutSuspense = fiber.tag === SuspenseComponent && fiber.memoizedState !== null;\n\n      if (isTimedOutSuspense) {\n        // Special case: if Suspense mounts in a timed-out state,\n        // get the fallback child from the inner fragment,\n        // and skip over the primary child.\n        const primaryChildFragment = fiber.child;\n        const fallbackChildFragment = primaryChildFragment ? primaryChildFragment.sibling : null;\n        const fallbackChild = fallbackChildFragment ? fallbackChildFragment.child : null;\n\n        if (fallbackChild !== null) {\n          child = fallbackChild;\n        }\n      }\n\n      while (child !== null) {\n        findReorderedChildrenRecursively(child, nextChildren);\n        child = child.sibling;\n      }\n    }\n  } // Returns whether closest unfiltered fiber parent needs to reset its child list.\n\n\n  function updateFiberRecursively(nextFiber, prevFiber, parentFiber, traceNearestHostComponentUpdate) {\n    const id = getOrGenerateFiberID(nextFiber);\n\n    if (_constants__WEBPACK_IMPORTED_MODULE_5__[\"__DEBUG__\"]) {\n      debug('updateFiberRecursively()', nextFiber, parentFiber);\n    }\n\n    if (traceUpdatesEnabled) {\n      const elementType = getElementTypeForFiber(nextFiber);\n\n      if (traceNearestHostComponentUpdate) {\n        // If an ancestor updated, we should mark the nearest host nodes for highlighting.\n        if (elementType === react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_1__[\"ElementTypeHostComponent\"]) {\n          traceUpdatesForNodes.add(nextFiber.stateNode);\n          traceNearestHostComponentUpdate = false;\n        }\n      } else {\n        if (elementType === react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_1__[\"ElementTypeFunction\"] || elementType === react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_1__[\"ElementTypeClass\"] || elementType === react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_1__[\"ElementTypeContext\"] || elementType === react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_1__[\"ElementTypeMemo\"] || elementType === react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_1__[\"ElementTypeForwardRef\"]) {\n          // Otherwise if this is a traced ancestor, flag for the nearest host descendant(s).\n          traceNearestHostComponentUpdate = didFiberRender(prevFiber, nextFiber);\n        }\n      }\n    }\n\n    if (mostRecentlyInspectedElement !== null && mostRecentlyInspectedElement.id === id && didFiberRender(prevFiber, nextFiber)) {\n      // If this Fiber has updated, clear cached inspected data.\n      // If it is inspected again, it may need to be re-run to obtain updated hooks values.\n      hasElementUpdatedSinceLastInspected = true;\n    }\n\n    const shouldIncludeInTree = !shouldFilterFiber(nextFiber);\n    const isSuspense = nextFiber.tag === SuspenseComponent;\n    let shouldResetChildren = false; // The behavior of timed-out Suspense trees is unique.\n    // Rather than unmount the timed out content (and possibly lose important state),\n    // React re-parents this content within a hidden Fragment while the fallback is showing.\n    // This behavior doesn't need to be observable in the DevTools though.\n    // It might even result in a bad user experience for e.g. node selection in the Elements panel.\n    // The easiest fix is to strip out the intermediate Fragment fibers,\n    // so the Elements panel and Profiler don't need to special case them.\n    // Suspense components only have a non-null memoizedState if they're timed-out.\n\n    const prevDidTimeout = isSuspense && prevFiber.memoizedState !== null;\n    const nextDidTimeOut = isSuspense && nextFiber.memoizedState !== null; // The logic below is inspired by the code paths in updateSuspenseComponent()\n    // inside ReactFiberBeginWork in the React source code.\n\n    if (prevDidTimeout && nextDidTimeOut) {\n      // Fallback -> Fallback:\n      // 1. Reconcile fallback set.\n      const nextFiberChild = nextFiber.child;\n      const nextFallbackChildSet = nextFiberChild ? nextFiberChild.sibling : null; // Note: We can't use nextFiber.child.sibling.alternate\n      // because the set is special and alternate may not exist.\n\n      const prevFiberChild = prevFiber.child;\n      const prevFallbackChildSet = prevFiberChild ? prevFiberChild.sibling : null;\n\n      if (nextFallbackChildSet != null && prevFallbackChildSet != null && updateFiberRecursively(nextFallbackChildSet, prevFallbackChildSet, nextFiber, traceNearestHostComponentUpdate)) {\n        shouldResetChildren = true;\n      }\n    } else if (prevDidTimeout && !nextDidTimeOut) {\n      // Fallback -> Primary:\n      // 1. Unmount fallback set\n      // Note: don't emulate fallback unmount because React actually did it.\n      // 2. Mount primary set\n      const nextPrimaryChildSet = nextFiber.child;\n\n      if (nextPrimaryChildSet !== null) {\n        mountFiberRecursively(nextPrimaryChildSet, shouldIncludeInTree ? nextFiber : parentFiber, true, traceNearestHostComponentUpdate);\n      }\n\n      shouldResetChildren = true;\n    } else if (!prevDidTimeout && nextDidTimeOut) {\n      // Primary -> Fallback:\n      // 1. Hide primary set\n      // This is not a real unmount, so it won't get reported by React.\n      // We need to manually walk the previous tree and record unmounts.\n      unmountFiberChildrenRecursively(prevFiber); // 2. Mount fallback set\n\n      const nextFiberChild = nextFiber.child;\n      const nextFallbackChildSet = nextFiberChild ? nextFiberChild.sibling : null;\n\n      if (nextFallbackChildSet != null) {\n        mountFiberRecursively(nextFallbackChildSet, shouldIncludeInTree ? nextFiber : parentFiber, true, traceNearestHostComponentUpdate);\n        shouldResetChildren = true;\n      }\n    } else {\n      // Common case: Primary -> Primary.\n      // This is the same code path as for non-Suspense fibers.\n      if (nextFiber.child !== prevFiber.child) {\n        // If the first child is different, we need to traverse them.\n        // Each next child will be either a new child (mount) or an alternate (update).\n        let nextChild = nextFiber.child;\n        let prevChildAtSameIndex = prevFiber.child;\n\n        while (nextChild) {\n          // We already know children will be referentially different because\n          // they are either new mounts or alternates of previous children.\n          // Schedule updates and mounts depending on whether alternates exist.\n          // We don't track deletions here because they are reported separately.\n          if (nextChild.alternate) {\n            const prevChild = nextChild.alternate;\n\n            if (updateFiberRecursively(nextChild, prevChild, shouldIncludeInTree ? nextFiber : parentFiber, traceNearestHostComponentUpdate)) {\n              // If a nested tree child order changed but it can't handle its own\n              // child order invalidation (e.g. because it's filtered out like host nodes),\n              // propagate the need to reset child order upwards to this Fiber.\n              shouldResetChildren = true;\n            } // However we also keep track if the order of the children matches\n            // the previous order. They are always different referentially, but\n            // if the instances line up conceptually we'll want to know that.\n\n\n            if (prevChild !== prevChildAtSameIndex) {\n              shouldResetChildren = true;\n            }\n          } else {\n            mountFiberRecursively(nextChild, shouldIncludeInTree ? nextFiber : parentFiber, false, traceNearestHostComponentUpdate);\n            shouldResetChildren = true;\n          } // Try the next child.\n\n\n          nextChild = nextChild.sibling; // Advance the pointer in the previous list so that we can\n          // keep comparing if they line up.\n\n          if (!shouldResetChildren && prevChildAtSameIndex !== null) {\n            prevChildAtSameIndex = prevChildAtSameIndex.sibling;\n          }\n        } // If we have no more children, but used to, they don't line up.\n\n\n        if (prevChildAtSameIndex !== null) {\n          shouldResetChildren = true;\n        }\n      } else {\n        if (traceUpdatesEnabled) {\n          // If we're tracing updates and we've bailed out before reaching a host node,\n          // we should fall back to recursively marking the nearest host descendants for highlight.\n          if (traceNearestHostComponentUpdate) {\n            const hostFibers = findAllCurrentHostFibers(getFiberIDThrows(nextFiber));\n            hostFibers.forEach(hostFiber => {\n              traceUpdatesForNodes.add(hostFiber.stateNode);\n            });\n          }\n        }\n      }\n    }\n\n    if (shouldIncludeInTree) {\n      const isProfilingSupported = nextFiber.hasOwnProperty('treeBaseDuration');\n\n      if (isProfilingSupported) {\n        recordProfilingDurations(nextFiber);\n      }\n    }\n\n    if (shouldResetChildren) {\n      // We need to crawl the subtree for closest non-filtered Fibers\n      // so that we can display them in a flat children set.\n      if (shouldIncludeInTree) {\n        // Normally, search for children from the rendered child.\n        let nextChildSet = nextFiber.child;\n\n        if (nextDidTimeOut) {\n          // Special case: timed-out Suspense renders the fallback set.\n          const nextFiberChild = nextFiber.child;\n          nextChildSet = nextFiberChild ? nextFiberChild.sibling : null;\n        }\n\n        if (nextChildSet != null) {\n          recordResetChildren(nextFiber, nextChildSet);\n        } // We've handled the child order change for this Fiber.\n        // Since it's included, there's no need to invalidate parent child order.\n\n\n        return false;\n      } else {\n        // Let the closest unfiltered parent Fiber reset its child order instead.\n        return true;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  function cleanup() {// We don't patch any methods so there is no cleanup.\n  }\n\n  function rootSupportsProfiling(root) {\n    if (root.memoizedInteractions != null) {\n      // v16 builds include this field for the scheduler/tracing API.\n      return true;\n    } else if (root.current != null && root.current.hasOwnProperty('treeBaseDuration')) {\n      // The scheduler/tracing API was removed in v17 though\n      // so we need to check a non-root Fiber.\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  function flushInitialOperations() {\n    const localPendingOperationsQueue = pendingOperationsQueue;\n    pendingOperationsQueue = null;\n\n    if (localPendingOperationsQueue !== null && localPendingOperationsQueue.length > 0) {\n      // We may have already queued up some operations before the frontend connected\n      // If so, let the frontend know about them.\n      localPendingOperationsQueue.forEach(operations => {\n        hook.emit('operations', operations);\n      });\n    } else {\n      // Before the traversals, remember to start tracking\n      // our path in case we have selection to restore.\n      if (trackedPath !== null) {\n        mightBeOnTrackedPath = true;\n      } // If we have not been profiling, then we can just walk the tree and build up its current state as-is.\n\n\n      hook.getFiberRoots(rendererID).forEach(root => {\n        currentRootID = getOrGenerateFiberID(root.current);\n        setRootPseudoKey(currentRootID, root.current); // Handle multi-renderer edge-case where only some v16 renderers support profiling.\n\n        if (isProfiling && rootSupportsProfiling(root)) {\n          // If profiling is active, store commit time and duration.\n          // The frontend may request this information after profiling has stopped.\n          currentCommitProfilingMetadata = {\n            changeDescriptions: recordChangeDescriptions ? new Map() : null,\n            durations: [],\n            commitTime: getCurrentTime() - profilingStartTime,\n            maxActualDuration: 0,\n            priorityLevel: null,\n            updaters: getUpdatersList(root),\n            effectDuration: null,\n            passiveEffectDuration: null\n          };\n        }\n\n        mountFiberRecursively(root.current, null, false, false);\n        flushPendingEvents(root);\n        currentRootID = -1;\n      });\n    }\n  }\n\n  function getUpdatersList(root) {\n    return root.memoizedUpdaters != null ? Array.from(root.memoizedUpdaters).map(fiberToSerializedElement) : null;\n  }\n\n  function handleCommitFiberUnmount(fiber) {\n    // This is not recursive.\n    // We can't traverse fibers after unmounting so instead\n    // we rely on React telling us about each unmount.\n    recordUnmount(fiber, false);\n  }\n\n  function handlePostCommitFiberRoot(root) {\n    if (isProfiling && rootSupportsProfiling(root)) {\n      if (currentCommitProfilingMetadata !== null) {\n        const {\n          effectDuration,\n          passiveEffectDuration\n        } = Object(_utils__WEBPACK_IMPORTED_MODULE_4__[\"getEffectDurations\"])(root);\n        currentCommitProfilingMetadata.effectDuration = effectDuration;\n        currentCommitProfilingMetadata.passiveEffectDuration = passiveEffectDuration;\n      }\n    }\n  }\n\n  function handleCommitFiberRoot(root, priorityLevel) {\n    const current = root.current;\n    const alternate = current.alternate; // Flush any pending Fibers that we are untracking before processing the new commit.\n    // If we don't do this, we might end up double-deleting Fibers in some cases (like Legacy Suspense).\n\n    untrackFibers();\n    currentRootID = getOrGenerateFiberID(current); // Before the traversals, remember to start tracking\n    // our path in case we have selection to restore.\n\n    if (trackedPath !== null) {\n      mightBeOnTrackedPath = true;\n    }\n\n    if (traceUpdatesEnabled) {\n      traceUpdatesForNodes.clear();\n    } // Handle multi-renderer edge-case where only some v16 renderers support profiling.\n\n\n    const isProfilingSupported = rootSupportsProfiling(root);\n\n    if (isProfiling && isProfilingSupported) {\n      // If profiling is active, store commit time and duration.\n      // The frontend may request this information after profiling has stopped.\n      currentCommitProfilingMetadata = {\n        changeDescriptions: recordChangeDescriptions ? new Map() : null,\n        durations: [],\n        commitTime: getCurrentTime() - profilingStartTime,\n        maxActualDuration: 0,\n        priorityLevel: priorityLevel == null ? null : formatPriorityLevel(priorityLevel),\n        updaters: getUpdatersList(root),\n        // Initialize to null; if new enough React version is running,\n        // these values will be read during separate handlePostCommitFiberRoot() call.\n        effectDuration: null,\n        passiveEffectDuration: null\n      };\n    }\n\n    if (alternate) {\n      // TODO: relying on this seems a bit fishy.\n      const wasMounted = alternate.memoizedState != null && alternate.memoizedState.element != null;\n      const isMounted = current.memoizedState != null && current.memoizedState.element != null;\n\n      if (!wasMounted && isMounted) {\n        // Mount a new root.\n        setRootPseudoKey(currentRootID, current);\n        mountFiberRecursively(current, null, false, false);\n      } else if (wasMounted && isMounted) {\n        // Update an existing root.\n        updateFiberRecursively(current, alternate, null, false);\n      } else if (wasMounted && !isMounted) {\n        // Unmount an existing root.\n        removeRootPseudoKey(currentRootID);\n        recordUnmount(current, false);\n      }\n    } else {\n      // Mount a new root.\n      setRootPseudoKey(currentRootID, current);\n      mountFiberRecursively(current, null, false, false);\n    }\n\n    if (isProfiling && isProfilingSupported) {\n      // Make sure at least one Fiber performed work during this commit.\n      // If not, don't send it to the frontend; showing an empty commit in the Profiler is confusing.\n      if (currentCommitProfilingMetadata != null && currentCommitProfilingMetadata.durations.length > 0) {\n        const commitProfilingMetadata = rootToCommitProfilingMetadataMap.get(currentRootID);\n\n        if (commitProfilingMetadata != null) {\n          commitProfilingMetadata.push(currentCommitProfilingMetadata);\n        } else {\n          rootToCommitProfilingMetadataMap.set(currentRootID, [currentCommitProfilingMetadata]);\n        }\n      }\n    } // We're done here.\n\n\n    flushPendingEvents(root);\n\n    if (traceUpdatesEnabled) {\n      hook.emit('traceUpdates', traceUpdatesForNodes);\n    }\n\n    currentRootID = -1;\n  }\n\n  function findAllCurrentHostFibers(id) {\n    const fibers = [];\n    const fiber = findCurrentFiberUsingSlowPathById(id);\n\n    if (!fiber) {\n      return fibers;\n    } // Next we'll drill down this component to find all HostComponent/Text.\n\n\n    let node = fiber;\n\n    while (true) {\n      if (node.tag === HostComponent || node.tag === HostText) {\n        fibers.push(node);\n      } else if (node.child) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n\n      if (node === fiber) {\n        return fibers;\n      }\n\n      while (!node.sibling) {\n        if (!node.return || node.return === fiber) {\n          return fibers;\n        }\n\n        node = node.return;\n      }\n\n      node.sibling.return = node.return;\n      node = node.sibling;\n    } // Flow needs the return here, but ESLint complains about it.\n    // eslint-disable-next-line no-unreachable\n\n\n    return fibers;\n  }\n\n  function findNativeNodesForFiberID(id) {\n    try {\n      let fiber = findCurrentFiberUsingSlowPathById(id);\n\n      if (fiber === null) {\n        return null;\n      } // Special case for a timed-out Suspense.\n\n\n      const isTimedOutSuspense = fiber.tag === SuspenseComponent && fiber.memoizedState !== null;\n\n      if (isTimedOutSuspense) {\n        // A timed-out Suspense's findDOMNode is useless.\n        // Try our best to find the fallback directly.\n        const maybeFallbackFiber = fiber.child && fiber.child.sibling;\n\n        if (maybeFallbackFiber != null) {\n          fiber = maybeFallbackFiber;\n        }\n      }\n\n      const hostFibers = findAllCurrentHostFibers(id);\n      return hostFibers.map(hostFiber => hostFiber.stateNode).filter(Boolean);\n    } catch (err) {\n      // The fiber might have unmounted by now.\n      return null;\n    }\n  }\n\n  function getDisplayNameForFiberID(id) {\n    const fiber = idToArbitraryFiberMap.get(id);\n    return fiber != null ? getDisplayNameForFiber(fiber) : null;\n  }\n\n  function getFiberIDForNative(hostInstance, findNearestUnfilteredAncestor = false) {\n    let fiber = renderer.findFiberByHostInstance(hostInstance);\n\n    if (fiber != null) {\n      if (findNearestUnfilteredAncestor) {\n        while (fiber !== null && shouldFilterFiber(fiber)) {\n          fiber = fiber.return;\n        }\n      }\n\n      return getFiberIDThrows(fiber);\n    }\n\n    return null;\n  } // This function is copied from React and should be kept in sync:\n  // https://github.com/facebook/react/blob/main/packages/react-reconciler/src/ReactFiberTreeReflection.js\n\n\n  function assertIsMounted(fiber) {\n    if (getNearestMountedFiber(fiber) !== fiber) {\n      throw new Error('Unable to find node on an unmounted component.');\n    }\n  } // This function is copied from React and should be kept in sync:\n  // https://github.com/facebook/react/blob/main/packages/react-reconciler/src/ReactFiberTreeReflection.js\n\n\n  function getNearestMountedFiber(fiber) {\n    let node = fiber;\n    let nearestMounted = fiber;\n\n    if (!fiber.alternate) {\n      // If there is no alternate, this might be a new tree that isn't inserted\n      // yet. If it is, then it will have a pending insertion effect on it.\n      let nextNode = node;\n\n      do {\n        node = nextNode;\n\n        if ((node.flags & (Placement | Hydrating)) !== NoFlags) {\n          // This is an insertion or in-progress hydration. The nearest possible\n          // mounted fiber is the parent but we need to continue to figure out\n          // if that one is still mounted.\n          nearestMounted = node.return;\n        }\n\n        nextNode = node.return;\n      } while (nextNode);\n    } else {\n      while (node.return) {\n        node = node.return;\n      }\n    }\n\n    if (node.tag === HostRoot) {\n      // TODO: Check if this was a nested HostRoot when used with\n      // renderContainerIntoSubtree.\n      return nearestMounted;\n    } // If we didn't hit the root, that means that we're in an disconnected tree\n    // that has been unmounted.\n\n\n    return null;\n  } // This function is copied from React and should be kept in sync:\n  // https://github.com/facebook/react/blob/main/packages/react-reconciler/src/ReactFiberTreeReflection.js\n  // It would be nice if we updated React to inject this function directly (vs just indirectly via findDOMNode).\n  // BEGIN copied code\n\n\n  function findCurrentFiberUsingSlowPathById(id) {\n    const fiber = idToArbitraryFiberMap.get(id);\n\n    if (fiber == null) {\n      console.warn(`Could not find Fiber with id \"${id}\"`);\n      return null;\n    }\n\n    const alternate = fiber.alternate;\n\n    if (!alternate) {\n      // If there is no alternate, then we only need to check if it is mounted.\n      const nearestMounted = getNearestMountedFiber(fiber);\n\n      if (nearestMounted === null) {\n        throw new Error('Unable to find node on an unmounted component.');\n      }\n\n      if (nearestMounted !== fiber) {\n        return null;\n      }\n\n      return fiber;\n    } // If we have two possible branches, we'll walk backwards up to the root\n    // to see what path the root points to. On the way we may hit one of the\n    // special cases and we'll deal with them.\n\n\n    let a = fiber;\n    let b = alternate;\n\n    while (true) {\n      const parentA = a.return;\n\n      if (parentA === null) {\n        // We're at the root.\n        break;\n      }\n\n      const parentB = parentA.alternate;\n\n      if (parentB === null) {\n        // There is no alternate. This is an unusual case. Currently, it only\n        // happens when a Suspense component is hidden. An extra fragment fiber\n        // is inserted in between the Suspense fiber and its children. Skip\n        // over this extra fragment fiber and proceed to the next parent.\n        const nextParent = parentA.return;\n\n        if (nextParent !== null) {\n          a = b = nextParent;\n          continue;\n        } // If there's no parent, we're at the root.\n\n\n        break;\n      } // If both copies of the parent fiber point to the same child, we can\n      // assume that the child is current. This happens when we bailout on low\n      // priority: the bailed out fiber's child reuses the current child.\n\n\n      if (parentA.child === parentB.child) {\n        let child = parentA.child;\n\n        while (child) {\n          if (child === a) {\n            // We've determined that A is the current branch.\n            assertIsMounted(parentA);\n            return fiber;\n          }\n\n          if (child === b) {\n            // We've determined that B is the current branch.\n            assertIsMounted(parentA);\n            return alternate;\n          }\n\n          child = child.sibling;\n        } // We should never have an alternate for any mounting node. So the only\n        // way this could possibly happen is if this was unmounted, if at all.\n\n\n        throw new Error('Unable to find node on an unmounted component.');\n      }\n\n      if (a.return !== b.return) {\n        // The return pointer of A and the return pointer of B point to different\n        // fibers. We assume that return pointers never criss-cross, so A must\n        // belong to the child set of A.return, and B must belong to the child\n        // set of B.return.\n        a = parentA;\n        b = parentB;\n      } else {\n        // The return pointers point to the same fiber. We'll have to use the\n        // default, slow path: scan the child sets of each parent alternate to see\n        // which child belongs to which set.\n        //\n        // Search parent A's child set\n        let didFindChild = false;\n        let child = parentA.child;\n\n        while (child) {\n          if (child === a) {\n            didFindChild = true;\n            a = parentA;\n            b = parentB;\n            break;\n          }\n\n          if (child === b) {\n            didFindChild = true;\n            b = parentA;\n            a = parentB;\n            break;\n          }\n\n          child = child.sibling;\n        }\n\n        if (!didFindChild) {\n          // Search parent B's child set\n          child = parentB.child;\n\n          while (child) {\n            if (child === a) {\n              didFindChild = true;\n              a = parentB;\n              b = parentA;\n              break;\n            }\n\n            if (child === b) {\n              didFindChild = true;\n              b = parentB;\n              a = parentA;\n              break;\n            }\n\n            child = child.sibling;\n          }\n\n          if (!didFindChild) {\n            throw new Error('Child was not found in either parent set. This indicates a bug ' + 'in React related to the return pointer. Please file an issue.');\n          }\n        }\n      }\n\n      if (a.alternate !== b) {\n        throw new Error(\"Return fibers should always be each others' alternates. \" + 'This error is likely caused by a bug in React. Please file an issue.');\n      }\n    } // If the root is not a host container, we're in a disconnected tree. I.e.\n    // unmounted.\n\n\n    if (a.tag !== HostRoot) {\n      throw new Error('Unable to find node on an unmounted component.');\n    }\n\n    if (a.stateNode.current === a) {\n      // We've determined that A is the current branch.\n      return fiber;\n    } // Otherwise B has to be current branch.\n\n\n    return alternate;\n  } // END copied code\n\n\n  function prepareViewAttributeSource(id, path) {\n    if (isMostRecentlyInspectedElement(id)) {\n      window.$attribute = Object(react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_2__[\"getInObject\"])(mostRecentlyInspectedElement, path);\n    }\n  }\n\n  function prepareViewElementSource(id) {\n    const fiber = idToArbitraryFiberMap.get(id);\n\n    if (fiber == null) {\n      console.warn(`Could not find Fiber with id \"${id}\"`);\n      return;\n    }\n\n    const {\n      elementType,\n      tag,\n      type\n    } = fiber;\n\n    switch (tag) {\n      case ClassComponent:\n      case IncompleteClassComponent:\n      case IndeterminateComponent:\n      case FunctionComponent:\n        global.$type = type;\n        break;\n\n      case ForwardRef:\n        global.$type = type.render;\n        break;\n\n      case MemoComponent:\n      case SimpleMemoComponent:\n        global.$type = elementType != null && elementType.type != null ? elementType.type : type;\n        break;\n\n      default:\n        global.$type = null;\n        break;\n    }\n  }\n\n  function fiberToSerializedElement(fiber) {\n    return {\n      displayName: getDisplayNameForFiber(fiber) || 'Anonymous',\n      id: getFiberIDThrows(fiber),\n      key: fiber.key,\n      type: getElementTypeForFiber(fiber)\n    };\n  }\n\n  function getOwnersList(id) {\n    const fiber = findCurrentFiberUsingSlowPathById(id);\n\n    if (fiber == null) {\n      return null;\n    }\n\n    const {\n      _debugOwner\n    } = fiber;\n    const owners = [fiberToSerializedElement(fiber)];\n\n    if (_debugOwner) {\n      let owner = _debugOwner;\n\n      while (owner !== null) {\n        owners.unshift(fiberToSerializedElement(owner));\n        owner = owner._debugOwner || null;\n      }\n    }\n\n    return owners;\n  } // Fast path props lookup for React Native style editor.\n  // Could use inspectElementRaw() but that would require shallow rendering hooks components,\n  // and could also mess with memoization.\n\n\n  function getInstanceAndStyle(id) {\n    let instance = null;\n    let style = null;\n    const fiber = findCurrentFiberUsingSlowPathById(id);\n\n    if (fiber !== null) {\n      instance = fiber.stateNode;\n\n      if (fiber.memoizedProps !== null) {\n        style = fiber.memoizedProps.style;\n      }\n    }\n\n    return {\n      instance,\n      style\n    };\n  }\n\n  function isErrorBoundary(fiber) {\n    const {\n      tag,\n      type\n    } = fiber;\n\n    switch (tag) {\n      case ClassComponent:\n      case IncompleteClassComponent:\n        const instance = fiber.stateNode;\n        return typeof type.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function';\n\n      default:\n        return false;\n    }\n  }\n\n  function getNearestErrorBoundaryID(fiber) {\n    let parent = fiber.return;\n\n    while (parent !== null) {\n      if (isErrorBoundary(parent)) {\n        return getFiberIDUnsafe(parent);\n      }\n\n      parent = parent.return;\n    }\n\n    return null;\n  }\n\n  function inspectElementRaw(id) {\n    const fiber = findCurrentFiberUsingSlowPathById(id);\n\n    if (fiber == null) {\n      return null;\n    }\n\n    const {\n      _debugOwner,\n      _debugSource,\n      stateNode,\n      key,\n      memoizedProps,\n      memoizedState,\n      dependencies,\n      tag,\n      type\n    } = fiber;\n    const elementType = getElementTypeForFiber(fiber);\n    const usesHooks = (tag === FunctionComponent || tag === SimpleMemoComponent || tag === ForwardRef) && (!!memoizedState || !!dependencies); // TODO Show custom UI for Cache like we do for Suspense\n    // For now, just hide state data entirely since it's not meant to be inspected.\n\n    const showState = !usesHooks && tag !== CacheComponent;\n    const typeSymbol = getTypeSymbol(type);\n    let canViewSource = false;\n    let context = null;\n\n    if (tag === ClassComponent || tag === FunctionComponent || tag === IncompleteClassComponent || tag === IndeterminateComponent || tag === MemoComponent || tag === ForwardRef || tag === SimpleMemoComponent) {\n      canViewSource = true;\n\n      if (stateNode && stateNode.context != null) {\n        // Don't show an empty context object for class components that don't use the context API.\n        const shouldHideContext = elementType === react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_1__[\"ElementTypeClass\"] && !(type.contextTypes || type.contextType);\n\n        if (!shouldHideContext) {\n          context = stateNode.context;\n        }\n      }\n    } else if (typeSymbol === _ReactSymbols__WEBPACK_IMPORTED_MODULE_8__[\"CONTEXT_NUMBER\"] || typeSymbol === _ReactSymbols__WEBPACK_IMPORTED_MODULE_8__[\"CONTEXT_SYMBOL_STRING\"]) {\n      // 16.3-16.5 read from \"type\" because the Consumer is the actual context object.\n      // 16.6+ should read from \"type._context\" because Consumer can be different (in DEV).\n      // NOTE Keep in sync with getDisplayNameForFiber()\n      const consumerResolvedContext = type._context || type; // Global context value.\n\n      context = consumerResolvedContext._currentValue || null; // Look for overridden value.\n\n      let current = fiber.return;\n\n      while (current !== null) {\n        const currentType = current.type;\n        const currentTypeSymbol = getTypeSymbol(currentType);\n\n        if (currentTypeSymbol === _ReactSymbols__WEBPACK_IMPORTED_MODULE_8__[\"PROVIDER_NUMBER\"] || currentTypeSymbol === _ReactSymbols__WEBPACK_IMPORTED_MODULE_8__[\"PROVIDER_SYMBOL_STRING\"]) {\n          // 16.3.0 exposed the context object as \"context\"\n          // PR #12501 changed it to \"_context\" for 16.3.1+\n          // NOTE Keep in sync with getDisplayNameForFiber()\n          const providerResolvedContext = currentType._context || currentType.context;\n\n          if (providerResolvedContext === consumerResolvedContext) {\n            context = current.memoizedProps.value;\n            break;\n          }\n        }\n\n        current = current.return;\n      }\n    }\n\n    let hasLegacyContext = false;\n\n    if (context !== null) {\n      hasLegacyContext = !!type.contextTypes; // To simplify hydration and display logic for context, wrap in a value object.\n      // Otherwise simple values (e.g. strings, booleans) become harder to handle.\n\n      context = {\n        value: context\n      };\n    }\n\n    let owners = null;\n\n    if (_debugOwner) {\n      owners = [];\n      let owner = _debugOwner;\n\n      while (owner !== null) {\n        owners.push(fiberToSerializedElement(owner));\n        owner = owner._debugOwner || null;\n      }\n    }\n\n    const isTimedOutSuspense = tag === SuspenseComponent && memoizedState !== null;\n    let hooks = null;\n\n    if (usesHooks) {\n      const originalConsoleMethods = {}; // Temporarily disable all console logging before re-running the hook.\n\n      for (const method in console) {\n        try {\n          originalConsoleMethods[method] = console[method]; // $FlowFixMe property error|warn is not writable.\n\n          console[method] = () => {};\n        } catch (error) {}\n      }\n\n      try {\n        hooks = Object(react_debug_tools__WEBPACK_IMPORTED_MODULE_6__[\"inspectHooksOfFiber\"])(fiber, renderer.currentDispatcherRef, true // Include source location info for hooks\n        );\n      } finally {\n        // Restore original console functionality.\n        for (const method in originalConsoleMethods) {\n          try {\n            // $FlowFixMe property error|warn is not writable.\n            console[method] = originalConsoleMethods[method];\n          } catch (error) {}\n        }\n      }\n    }\n\n    let rootType = null;\n    let current = fiber;\n\n    while (current.return !== null) {\n      current = current.return;\n    }\n\n    const fiberRoot = current.stateNode;\n\n    if (fiberRoot != null && fiberRoot._debugRootType !== null) {\n      rootType = fiberRoot._debugRootType;\n    }\n\n    const errors = fiberIDToErrorsMap.get(id) || new Map();\n    const warnings = fiberIDToWarningsMap.get(id) || new Map();\n    const isErrored = (fiber.flags & DidCapture) !== NoFlags || forceErrorForFiberIDs.get(id) === true;\n    let targetErrorBoundaryID;\n\n    if (isErrorBoundary(fiber)) {\n      // if the current inspected element is an error boundary,\n      // either that we want to use it to toggle off error state\n      // or that we allow to force error state on it if it's within another\n      // error boundary\n      targetErrorBoundaryID = isErrored ? id : getNearestErrorBoundaryID(fiber);\n    } else {\n      targetErrorBoundaryID = getNearestErrorBoundaryID(fiber);\n    }\n\n    const plugins = {\n      stylex: null\n    };\n\n    if (react_devtools_feature_flags__WEBPACK_IMPORTED_MODULE_9__[\"enableStyleXFeatures\"]) {\n      if (memoizedProps.hasOwnProperty('xstyle')) {\n        plugins.stylex = Object(_StyleX_utils__WEBPACK_IMPORTED_MODULE_13__[\"getStyleXData\"])(memoizedProps.xstyle);\n      }\n    }\n\n    return {\n      id,\n      // Does the current renderer support editable hooks and function props?\n      canEditHooks: typeof overrideHookState === 'function',\n      canEditFunctionProps: typeof overrideProps === 'function',\n      // Does the current renderer support advanced editing interface?\n      canEditHooksAndDeletePaths: typeof overrideHookStateDeletePath === 'function',\n      canEditHooksAndRenamePaths: typeof overrideHookStateRenamePath === 'function',\n      canEditFunctionPropsDeletePaths: typeof overridePropsDeletePath === 'function',\n      canEditFunctionPropsRenamePaths: typeof overridePropsRenamePath === 'function',\n      canToggleError: supportsTogglingError && targetErrorBoundaryID != null,\n      // Is this error boundary in error state.\n      isErrored,\n      targetErrorBoundaryID,\n      canToggleSuspense: supportsTogglingSuspense && ( // If it's showing the real content, we can always flip fallback.\n      !isTimedOutSuspense || // If it's showing fallback because we previously forced it to,\n      // allow toggling it back to remove the fallback override.\n      forceFallbackForSuspenseIDs.has(id)),\n      // Can view component source location.\n      canViewSource,\n      // Does the component have legacy context attached to it.\n      hasLegacyContext,\n      key: key != null ? key : null,\n      displayName: getDisplayNameForFiber(fiber),\n      type: elementType,\n      // Inspectable properties.\n      // TODO Review sanitization approach for the below inspectable values.\n      context,\n      hooks,\n      props: memoizedProps,\n      state: showState ? memoizedState : null,\n      errors: Array.from(errors.entries()),\n      warnings: Array.from(warnings.entries()),\n      // List of owners\n      owners,\n      // Location of component in source code.\n      source: _debugSource || null,\n      rootType,\n      rendererPackageName: renderer.rendererPackageName,\n      rendererVersion: renderer.version,\n      plugins\n    };\n  }\n\n  let mostRecentlyInspectedElement = null;\n  let hasElementUpdatedSinceLastInspected = false;\n  let currentlyInspectedPaths = {};\n\n  function isMostRecentlyInspectedElement(id) {\n    return mostRecentlyInspectedElement !== null && mostRecentlyInspectedElement.id === id;\n  }\n\n  function isMostRecentlyInspectedElementCurrent(id) {\n    return isMostRecentlyInspectedElement(id) && !hasElementUpdatedSinceLastInspected;\n  } // Track the intersection of currently inspected paths,\n  // so that we can send their data along if the element is re-rendered.\n\n\n  function mergeInspectedPaths(path) {\n    let current = currentlyInspectedPaths;\n    path.forEach(key => {\n      if (!current[key]) {\n        current[key] = {};\n      }\n\n      current = current[key];\n    });\n  }\n\n  function createIsPathAllowed(key, secondaryCategory) {\n    // This function helps prevent previously-inspected paths from being dehydrated in updates.\n    // This is important to avoid a bad user experience where expanded toggles collapse on update.\n    return function isPathAllowed(path) {\n      switch (secondaryCategory) {\n        case 'hooks':\n          if (path.length === 1) {\n            // Never dehydrate the \"hooks\" object at the top levels.\n            return true;\n          }\n\n          if (path[path.length - 2] === 'hookSource' && path[path.length - 1] === 'fileName') {\n            // It's important to preserve the full file name (URL) for hook sources\n            // in case the user has enabled the named hooks feature.\n            // Otherwise the frontend may end up with a partial URL which it can't load.\n            return true;\n          }\n\n          if (path[path.length - 1] === 'subHooks' || path[path.length - 2] === 'subHooks') {\n            // Dehydrating the 'subHooks' property makes the HooksTree UI a lot more complicated,\n            // so it's easiest for now if we just don't break on this boundary.\n            // We can always dehydrate a level deeper (in the value object).\n            return true;\n          }\n\n          break;\n\n        default:\n          break;\n      }\n\n      let current = key === null ? currentlyInspectedPaths : currentlyInspectedPaths[key];\n\n      if (!current) {\n        return false;\n      }\n\n      for (let i = 0; i < path.length; i++) {\n        current = current[path[i]];\n\n        if (!current) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n\n  function updateSelectedElement(inspectedElement) {\n    const {\n      hooks,\n      id,\n      props\n    } = inspectedElement;\n    const fiber = idToArbitraryFiberMap.get(id);\n\n    if (fiber == null) {\n      console.warn(`Could not find Fiber with id \"${id}\"`);\n      return;\n    }\n\n    const {\n      elementType,\n      stateNode,\n      tag,\n      type\n    } = fiber;\n\n    switch (tag) {\n      case ClassComponent:\n      case IncompleteClassComponent:\n      case IndeterminateComponent:\n        global.$r = stateNode;\n        break;\n\n      case FunctionComponent:\n        global.$r = {\n          hooks,\n          props,\n          type\n        };\n        break;\n\n      case ForwardRef:\n        global.$r = {\n          hooks,\n          props,\n          type: type.render\n        };\n        break;\n\n      case MemoComponent:\n      case SimpleMemoComponent:\n        global.$r = {\n          hooks,\n          props,\n          type: elementType != null && elementType.type != null ? elementType.type : type\n        };\n        break;\n\n      default:\n        global.$r = null;\n        break;\n    }\n  }\n\n  function storeAsGlobal(id, path, count) {\n    if (isMostRecentlyInspectedElement(id)) {\n      const value = Object(react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_2__[\"getInObject\"])(mostRecentlyInspectedElement, path);\n      const key = `$reactTemp${count}`;\n      window[key] = value;\n      console.log(key);\n      console.log(value);\n    }\n  }\n\n  function copyElementPath(id, path) {\n    if (isMostRecentlyInspectedElement(id)) {\n      Object(_utils__WEBPACK_IMPORTED_MODULE_4__[\"copyToClipboard\"])(Object(react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_2__[\"getInObject\"])(mostRecentlyInspectedElement, path));\n    }\n  }\n\n  function inspectElement(requestID, id, path, forceFullData) {\n    if (path !== null) {\n      mergeInspectedPaths(path);\n    }\n\n    if (isMostRecentlyInspectedElement(id) && !forceFullData) {\n      if (!hasElementUpdatedSinceLastInspected) {\n        if (path !== null) {\n          let secondaryCategory = null;\n\n          if (path[0] === 'hooks') {\n            secondaryCategory = 'hooks';\n          } // If this element has not been updated since it was last inspected,\n          // we can just return the subset of data in the newly-inspected path.\n\n\n          return {\n            id,\n            responseID: requestID,\n            type: 'hydrated-path',\n            path,\n            value: Object(_utils__WEBPACK_IMPORTED_MODULE_4__[\"cleanForBridge\"])(Object(react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_2__[\"getInObject\"])(mostRecentlyInspectedElement, path), createIsPathAllowed(null, secondaryCategory), path)\n          };\n        } else {\n          // If this element has not been updated since it was last inspected, we don't need to return it.\n          // Instead we can just return the ID to indicate that it has not changed.\n          return {\n            id,\n            responseID: requestID,\n            type: 'no-change'\n          };\n        }\n      }\n    } else {\n      currentlyInspectedPaths = {};\n    }\n\n    hasElementUpdatedSinceLastInspected = false;\n\n    try {\n      mostRecentlyInspectedElement = inspectElementRaw(id);\n    } catch (error) {\n      console.error('Error inspecting element.\\n\\n', error);\n      return {\n        type: 'error',\n        id,\n        responseID: requestID,\n        message: error.message,\n        stack: error.stack\n      };\n    }\n\n    if (mostRecentlyInspectedElement === null) {\n      return {\n        id,\n        responseID: requestID,\n        type: 'not-found'\n      };\n    } // Any time an inspected element has an update,\n    // we should update the selected $r value as wel.\n    // Do this before dehydration (cleanForBridge).\n\n\n    updateSelectedElement(mostRecentlyInspectedElement); // Clone before cleaning so that we preserve the full data.\n    // This will enable us to send patches without re-inspecting if hydrated paths are requested.\n    // (Reducing how often we shallow-render is a better DX for function components that use hooks.)\n\n    const cleanedInspectedElement = { ...mostRecentlyInspectedElement\n    };\n    cleanedInspectedElement.context = Object(_utils__WEBPACK_IMPORTED_MODULE_4__[\"cleanForBridge\"])(cleanedInspectedElement.context, createIsPathAllowed('context', null));\n    cleanedInspectedElement.hooks = Object(_utils__WEBPACK_IMPORTED_MODULE_4__[\"cleanForBridge\"])(cleanedInspectedElement.hooks, createIsPathAllowed('hooks', 'hooks'));\n    cleanedInspectedElement.props = Object(_utils__WEBPACK_IMPORTED_MODULE_4__[\"cleanForBridge\"])(cleanedInspectedElement.props, createIsPathAllowed('props', null));\n    cleanedInspectedElement.state = Object(_utils__WEBPACK_IMPORTED_MODULE_4__[\"cleanForBridge\"])(cleanedInspectedElement.state, createIsPathAllowed('state', null));\n    return {\n      id,\n      responseID: requestID,\n      type: 'full-data',\n      value: cleanedInspectedElement\n    };\n  }\n\n  function logElementToConsole(id) {\n    function fiberToNode(fiber) {\n      if (fiber.tag === HostText) {\n        return undefined;\n      }\n\n      const id = fiberToSerializedElement(fiber).id;\n      const rawElement = inspectElementRaw(id);\n      const node = {\n        id: id.toString(),\n        name: rawElement.displayName\n      };\n\n      if (rawElement.owners) {\n        node.owner = rawElement.owners[0].id.toString();\n      }\n\n      node.children = [];\n      let childFiber = fiber.child;\n\n      while (childFiber) {\n        const childNode = fiberToNode(childFiber);\n\n        if (childNode) {\n          node.children.push(childNode);\n        }\n\n        childFiber = childFiber.sibling;\n      }\n\n      return node;\n    } // console.log('backend renderer');\n\n\n    const result = isMostRecentlyInspectedElementCurrent(id) ? mostRecentlyInspectedElement : inspectElementRaw(id);\n\n    if (result === null) {\n      console.warn(`Could not find Fiber with id \"${id}\"`);\n      return;\n    }\n\n    const tree = fiberToNode(findCurrentFiberUsingSlowPathById(result.id));\n    console.log('Copy this:', tree); // const supportsGroup = typeof console.groupCollapsed === 'function';\n    // if (supportsGroup) {\n    //   console.groupCollapsed(\n    //     `[Click to expand] %c<${result.displayName || 'Component'} />`,\n    //     // --dom-tag-name-color is the CSS variable Chrome styles HTML elements with in the console.\n    //     'color: var(--dom-tag-name-color); font-weight: normal;',\n    //   );\n    // }\n    // if (result.props !== null) {\n    //   console.log('Props:', result.props);\n    // }\n    // if (result.state !== null) {\n    //   console.log('State:', result.state);\n    // }\n    // if (result.hooks !== null) {\n    //   console.log('Hooks:', result.hooks);\n    // }\n    // const nativeNodes = findNativeNodesForFiberID(id);\n    // if (nativeNodes !== null) {\n    //   console.log('Nodes:', nativeNodes);\n    // }\n    // if (result.source !== null) {\n    //   console.log('Location:', result.source);\n    // }\n    // if (window.chrome || /firefox/i.test(navigator.userAgent)) {\n    //   console.log(\n    //     'Right-click any value to save it as a global variable for further inspection.',\n    //   );\n    // }\n    // if (supportsGroup) {\n    //   console.groupEnd();\n    // }\n  }\n\n  function deletePath(type, id, hookID, path) {\n    const fiber = findCurrentFiberUsingSlowPathById(id);\n\n    if (fiber !== null) {\n      const instance = fiber.stateNode;\n\n      switch (type) {\n        case 'context':\n          // To simplify hydration and display of primitive context values (e.g. number, string)\n          // the inspectElement() method wraps context in a {value: ...} object.\n          // We need to remove the first part of the path (the \"value\") before continuing.\n          path = path.slice(1);\n\n          switch (fiber.tag) {\n            case ClassComponent:\n              if (path.length === 0) {// Simple context value (noop)\n              } else {\n                Object(react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_2__[\"deletePathInObject\"])(instance.context, path);\n              }\n\n              instance.forceUpdate();\n              break;\n\n            case FunctionComponent:\n              // Function components using legacy context are not editable\n              // because there's no instance on which to create a cloned, mutated context.\n              break;\n          }\n\n          break;\n\n        case 'hooks':\n          if (typeof overrideHookStateDeletePath === 'function') {\n            overrideHookStateDeletePath(fiber, hookID, path);\n          }\n\n          break;\n\n        case 'props':\n          if (instance === null) {\n            if (typeof overridePropsDeletePath === 'function') {\n              overridePropsDeletePath(fiber, path);\n            }\n          } else {\n            fiber.pendingProps = Object(_utils__WEBPACK_IMPORTED_MODULE_4__[\"copyWithDelete\"])(instance.props, path);\n            instance.forceUpdate();\n          }\n\n          break;\n\n        case 'state':\n          Object(react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_2__[\"deletePathInObject\"])(instance.state, path);\n          instance.forceUpdate();\n          break;\n      }\n    }\n  }\n\n  function renamePath(type, id, hookID, oldPath, newPath) {\n    const fiber = findCurrentFiberUsingSlowPathById(id);\n\n    if (fiber !== null) {\n      const instance = fiber.stateNode;\n\n      switch (type) {\n        case 'context':\n          // To simplify hydration and display of primitive context values (e.g. number, string)\n          // the inspectElement() method wraps context in a {value: ...} object.\n          // We need to remove the first part of the path (the \"value\") before continuing.\n          oldPath = oldPath.slice(1);\n          newPath = newPath.slice(1);\n\n          switch (fiber.tag) {\n            case ClassComponent:\n              if (oldPath.length === 0) {// Simple context value (noop)\n              } else {\n                Object(react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_2__[\"renamePathInObject\"])(instance.context, oldPath, newPath);\n              }\n\n              instance.forceUpdate();\n              break;\n\n            case FunctionComponent:\n              // Function components using legacy context are not editable\n              // because there's no instance on which to create a cloned, mutated context.\n              break;\n          }\n\n          break;\n\n        case 'hooks':\n          if (typeof overrideHookStateRenamePath === 'function') {\n            overrideHookStateRenamePath(fiber, hookID, oldPath, newPath);\n          }\n\n          break;\n\n        case 'props':\n          if (instance === null) {\n            if (typeof overridePropsRenamePath === 'function') {\n              overridePropsRenamePath(fiber, oldPath, newPath);\n            }\n          } else {\n            fiber.pendingProps = Object(_utils__WEBPACK_IMPORTED_MODULE_4__[\"copyWithRename\"])(instance.props, oldPath, newPath);\n            instance.forceUpdate();\n          }\n\n          break;\n\n        case 'state':\n          Object(react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_2__[\"renamePathInObject\"])(instance.state, oldPath, newPath);\n          instance.forceUpdate();\n          break;\n      }\n    }\n  }\n\n  function overrideValueAtPath(type, id, hookID, path, value) {\n    const fiber = findCurrentFiberUsingSlowPathById(id);\n\n    if (fiber !== null) {\n      const instance = fiber.stateNode;\n\n      switch (type) {\n        case 'context':\n          // To simplify hydration and display of primitive context values (e.g. number, string)\n          // the inspectElement() method wraps context in a {value: ...} object.\n          // We need to remove the first part of the path (the \"value\") before continuing.\n          path = path.slice(1);\n\n          switch (fiber.tag) {\n            case ClassComponent:\n              if (path.length === 0) {\n                // Simple context value\n                instance.context = value;\n              } else {\n                Object(react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_2__[\"setInObject\"])(instance.context, path, value);\n              }\n\n              instance.forceUpdate();\n              break;\n\n            case FunctionComponent:\n              // Function components using legacy context are not editable\n              // because there's no instance on which to create a cloned, mutated context.\n              break;\n          }\n\n          break;\n\n        case 'hooks':\n          if (typeof overrideHookState === 'function') {\n            overrideHookState(fiber, hookID, path, value);\n          }\n\n          break;\n\n        case 'props':\n          switch (fiber.tag) {\n            case ClassComponent:\n              fiber.pendingProps = Object(_utils__WEBPACK_IMPORTED_MODULE_4__[\"copyWithSet\"])(instance.props, path, value);\n              instance.forceUpdate();\n              break;\n\n            default:\n              if (typeof overrideProps === 'function') {\n                overrideProps(fiber, path, value);\n              }\n\n              break;\n          }\n\n          break;\n\n        case 'state':\n          switch (fiber.tag) {\n            case ClassComponent:\n              Object(react_devtools_shared_src_utils__WEBPACK_IMPORTED_MODULE_2__[\"setInObject\"])(instance.state, path, value);\n              instance.forceUpdate();\n              break;\n          }\n\n          break;\n      }\n    }\n  }\n\n  let currentCommitProfilingMetadata = null;\n  let displayNamesByRootID = null;\n  let idToContextsMap = null;\n  let initialTreeBaseDurationsMap = null;\n  let initialIDToRootMap = null;\n  let isProfiling = false;\n  let profilingStartTime = 0;\n  let recordChangeDescriptions = false;\n  let rootToCommitProfilingMetadataMap = null;\n\n  function getProfilingData() {\n    const dataForRoots = [];\n\n    if (rootToCommitProfilingMetadataMap === null) {\n      throw Error('getProfilingData() called before any profiling data was recorded');\n    }\n\n    rootToCommitProfilingMetadataMap.forEach((commitProfilingMetadata, rootID) => {\n      const commitData = [];\n      const initialTreeBaseDurations = [];\n      const displayName = displayNamesByRootID !== null && displayNamesByRootID.get(rootID) || 'Unknown';\n\n      if (initialTreeBaseDurationsMap != null) {\n        initialTreeBaseDurationsMap.forEach((treeBaseDuration, id) => {\n          if (initialIDToRootMap != null && initialIDToRootMap.get(id) === rootID) {\n            // We don't need to convert milliseconds to microseconds in this case,\n            // because the profiling summary is JSON serialized.\n            initialTreeBaseDurations.push([id, treeBaseDuration]);\n          }\n        });\n      }\n\n      commitProfilingMetadata.forEach((commitProfilingData, commitIndex) => {\n        const {\n          changeDescriptions,\n          durations,\n          effectDuration,\n          maxActualDuration,\n          passiveEffectDuration,\n          priorityLevel,\n          commitTime,\n          updaters\n        } = commitProfilingData;\n        const fiberActualDurations = [];\n        const fiberSelfDurations = [];\n\n        for (let i = 0; i < durations.length; i += 3) {\n          const fiberID = durations[i];\n          fiberActualDurations.push([fiberID, durations[i + 1]]);\n          fiberSelfDurations.push([fiberID, durations[i + 2]]);\n        }\n\n        commitData.push({\n          changeDescriptions: changeDescriptions !== null ? Array.from(changeDescriptions.entries()) : null,\n          duration: maxActualDuration,\n          effectDuration,\n          fiberActualDurations,\n          fiberSelfDurations,\n          passiveEffectDuration,\n          priorityLevel,\n          timestamp: commitTime,\n          updaters\n        });\n      });\n      dataForRoots.push({\n        commitData,\n        displayName,\n        initialTreeBaseDurations,\n        rootID\n      });\n    });\n    return {\n      dataForRoots,\n      rendererID\n    };\n  }\n\n  function startProfiling(shouldRecordChangeDescriptions) {\n    if (isProfiling) {\n      return;\n    }\n\n    recordChangeDescriptions = shouldRecordChangeDescriptions; // Capture initial values as of the time profiling starts.\n    // It's important we snapshot both the durations and the id-to-root map,\n    // since either of these may change during the profiling session\n    // (e.g. when a fiber is re-rendered or when a fiber gets removed).\n\n    displayNamesByRootID = new Map();\n    initialTreeBaseDurationsMap = new Map(idToTreeBaseDurationMap);\n    initialIDToRootMap = new Map(idToRootMap);\n    idToContextsMap = new Map();\n    hook.getFiberRoots(rendererID).forEach(root => {\n      const rootID = getFiberIDThrows(root.current);\n      displayNamesByRootID.set(rootID, getDisplayNameForRoot(root.current));\n\n      if (shouldRecordChangeDescriptions) {\n        // Record all contexts at the time profiling is started.\n        // Fibers only store the current context value,\n        // so we need to track them separately in order to determine changed keys.\n        crawlToInitializeContextsMap(root.current);\n      }\n    });\n    isProfiling = true;\n    profilingStartTime = getCurrentTime();\n    rootToCommitProfilingMetadataMap = new Map();\n  }\n\n  function stopProfiling() {\n    isProfiling = false;\n    recordChangeDescriptions = false;\n  } // Automatically start profiling so that we don't miss timing info from initial \"mount\".\n\n\n  if (Object(react_devtools_shared_src_storage__WEBPACK_IMPORTED_MODULE_3__[\"sessionStorageGetItem\"])(_constants__WEBPACK_IMPORTED_MODULE_5__[\"SESSION_STORAGE_RELOAD_AND_PROFILE_KEY\"]) === 'true') {\n    startProfiling(Object(react_devtools_shared_src_storage__WEBPACK_IMPORTED_MODULE_3__[\"sessionStorageGetItem\"])(_constants__WEBPACK_IMPORTED_MODULE_5__[\"SESSION_STORAGE_RECORD_CHANGE_DESCRIPTIONS_KEY\"]) === 'true');\n  } // React will switch between these implementations depending on whether\n  // we have any manually suspended/errored-out Fibers or not.\n\n\n  function shouldErrorFiberAlwaysNull() {\n    return null;\n  } // Map of id and its force error status: true (error), false (toggled off),\n  // null (do nothing)\n\n\n  const forceErrorForFiberIDs = new Map();\n\n  function shouldErrorFiberAccordingToMap(fiber) {\n    if (typeof setErrorHandler !== 'function') {\n      throw new Error('Expected overrideError() to not get called for earlier React versions.');\n    }\n\n    const id = getFiberIDUnsafe(fiber);\n\n    if (id === null) {\n      return null;\n    }\n\n    let status = null;\n\n    if (forceErrorForFiberIDs.has(id)) {\n      status = forceErrorForFiberIDs.get(id);\n\n      if (status === false) {\n        // TRICKY overrideError adds entries to this Map,\n        // so ideally it would be the method that clears them too,\n        // but that would break the functionality of the feature,\n        // since DevTools needs to tell React to act differently than it normally would\n        // (don't just re-render the failed boundary, but reset its errored state too).\n        // So we can only clear it after telling React to reset the state.\n        // Technically this is premature and we should schedule it for later,\n        // since the render could always fail without committing the updated error boundary,\n        // but since this is a DEV-only feature, the simplicity is worth the trade off.\n        forceErrorForFiberIDs.delete(id);\n\n        if (forceErrorForFiberIDs.size === 0) {\n          // Last override is gone. Switch React back to fast path.\n          setErrorHandler(shouldErrorFiberAlwaysNull);\n        }\n      }\n    }\n\n    return status;\n  }\n\n  function overrideError(id, forceError) {\n    if (typeof setErrorHandler !== 'function' || typeof scheduleUpdate !== 'function') {\n      throw new Error('Expected overrideError() to not get called for earlier React versions.');\n    }\n\n    forceErrorForFiberIDs.set(id, forceError);\n\n    if (forceErrorForFiberIDs.size === 1) {\n      // First override is added. Switch React to slower path.\n      setErrorHandler(shouldErrorFiberAccordingToMap);\n    }\n\n    const fiber = idToArbitraryFiberMap.get(id);\n\n    if (fiber != null) {\n      scheduleUpdate(fiber);\n    }\n  }\n\n  function shouldSuspendFiberAlwaysFalse() {\n    return false;\n  }\n\n  const forceFallbackForSuspenseIDs = new Set();\n\n  function shouldSuspendFiberAccordingToSet(fiber) {\n    const maybeID = getFiberIDUnsafe(fiber);\n    return maybeID !== null && forceFallbackForSuspenseIDs.has(maybeID);\n  }\n\n  function overrideSuspense(id, forceFallback) {\n    if (typeof setSuspenseHandler !== 'function' || typeof scheduleUpdate !== 'function') {\n      throw new Error('Expected overrideSuspense() to not get called for earlier React versions.');\n    }\n\n    if (forceFallback) {\n      forceFallbackForSuspenseIDs.add(id);\n\n      if (forceFallbackForSuspenseIDs.size === 1) {\n        // First override is added. Switch React to slower path.\n        setSuspenseHandler(shouldSuspendFiberAccordingToSet);\n      }\n    } else {\n      forceFallbackForSuspenseIDs.delete(id);\n\n      if (forceFallbackForSuspenseIDs.size === 0) {\n        // Last override is gone. Switch React back to fast path.\n        setSuspenseHandler(shouldSuspendFiberAlwaysFalse);\n      }\n    }\n\n    const fiber = idToArbitraryFiberMap.get(id);\n\n    if (fiber != null) {\n      scheduleUpdate(fiber);\n    }\n  } // Remember if we're trying to restore the selection after reload.\n  // In that case, we'll do some extra checks for matching mounts.\n\n\n  let trackedPath = null;\n  let trackedPathMatchFiber = null;\n  let trackedPathMatchDepth = -1;\n  let mightBeOnTrackedPath = false;\n\n  function setTrackedPath(path) {\n    if (path === null) {\n      trackedPathMatchFiber = null;\n      trackedPathMatchDepth = -1;\n      mightBeOnTrackedPath = false;\n    }\n\n    trackedPath = path;\n  } // We call this before traversing a new mount.\n  // It remembers whether this Fiber is the next best match for tracked path.\n  // The return value signals whether we should keep matching siblings or not.\n\n\n  function updateTrackedPathStateBeforeMount(fiber) {\n    if (trackedPath === null || !mightBeOnTrackedPath) {\n      // Fast path: there's nothing to track so do nothing and ignore siblings.\n      return false;\n    }\n\n    const returnFiber = fiber.return;\n    const returnAlternate = returnFiber !== null ? returnFiber.alternate : null; // By now we know there's some selection to restore, and this is a new Fiber.\n    // Is this newly mounted Fiber a direct child of the current best match?\n    // (This will also be true for new roots if we haven't matched anything yet.)\n\n    if (trackedPathMatchFiber === returnFiber || trackedPathMatchFiber === returnAlternate && returnAlternate !== null) {\n      // Is this the next Fiber we should select? Let's compare the frames.\n      const actualFrame = getPathFrame(fiber);\n      const expectedFrame = trackedPath[trackedPathMatchDepth + 1];\n\n      if (expectedFrame === undefined) {\n        throw new Error('Expected to see a frame at the next depth.');\n      }\n\n      if (actualFrame.index === expectedFrame.index && actualFrame.key === expectedFrame.key && actualFrame.displayName === expectedFrame.displayName) {\n        // We have our next match.\n        trackedPathMatchFiber = fiber;\n        trackedPathMatchDepth++; // Are we out of frames to match?\n\n        if (trackedPathMatchDepth === trackedPath.length - 1) {\n          // There's nothing that can possibly match afterwards.\n          // Don't check the children.\n          mightBeOnTrackedPath = false;\n        } else {\n          // Check the children, as they might reveal the next match.\n          mightBeOnTrackedPath = true;\n        } // In either case, since we have a match, we don't need\n        // to check the siblings. They'll never match.\n\n\n        return false;\n      }\n    } // This Fiber's parent is on the path, but this Fiber itself isn't.\n    // There's no need to check its children--they won't be on the path either.\n\n\n    mightBeOnTrackedPath = false; // However, one of its siblings may be on the path so keep searching.\n\n    return true;\n  }\n\n  function updateTrackedPathStateAfterMount(mightSiblingsBeOnTrackedPath) {\n    // updateTrackedPathStateBeforeMount() told us whether to match siblings.\n    // Now that we're entering siblings, let's use that information.\n    mightBeOnTrackedPath = mightSiblingsBeOnTrackedPath;\n  } // Roots don't have a real persistent identity.\n  // A root's \"pseudo key\" is \"childDisplayName:indexWithThatName\".\n  // For example, \"App:0\" or, in case of similar roots, \"Story:0\", \"Story:1\", etc.\n  // We will use this to try to disambiguate roots when restoring selection between reloads.\n\n\n  const rootPseudoKeys = new Map();\n  const rootDisplayNameCounter = new Map();\n\n  function setRootPseudoKey(id, fiber) {\n    const name = getDisplayNameForRoot(fiber);\n    const counter = rootDisplayNameCounter.get(name) || 0;\n    rootDisplayNameCounter.set(name, counter + 1);\n    const pseudoKey = `${name}:${counter}`;\n    rootPseudoKeys.set(id, pseudoKey);\n  }\n\n  function removeRootPseudoKey(id) {\n    const pseudoKey = rootPseudoKeys.get(id);\n\n    if (pseudoKey === undefined) {\n      throw new Error('Expected root pseudo key to be known.');\n    }\n\n    const name = pseudoKey.substring(0, pseudoKey.lastIndexOf(':'));\n    const counter = rootDisplayNameCounter.get(name);\n\n    if (counter === undefined) {\n      throw new Error('Expected counter to be known.');\n    }\n\n    if (counter > 1) {\n      rootDisplayNameCounter.set(name, counter - 1);\n    } else {\n      rootDisplayNameCounter.delete(name);\n    }\n\n    rootPseudoKeys.delete(id);\n  }\n\n  function getDisplayNameForRoot(fiber) {\n    let preferredDisplayName = null;\n    let fallbackDisplayName = null;\n    let child = fiber.child; // Go at most three levels deep into direct children\n    // while searching for a child that has a displayName.\n\n    for (let i = 0; i < 3; i++) {\n      if (child === null) {\n        break;\n      }\n\n      const displayName = getDisplayNameForFiber(child);\n\n      if (displayName !== null) {\n        // Prefer display names that we get from user-defined components.\n        // We want to avoid using e.g. 'Suspense' unless we find nothing else.\n        if (typeof child.type === 'function') {\n          // There's a few user-defined tags, but we'll prefer the ones\n          // that are usually explicitly named (function or class components).\n          preferredDisplayName = displayName;\n        } else if (fallbackDisplayName === null) {\n          fallbackDisplayName = displayName;\n        }\n      }\n\n      if (preferredDisplayName !== null) {\n        break;\n      }\n\n      child = child.child;\n    }\n\n    return preferredDisplayName || fallbackDisplayName || 'Anonymous';\n  }\n\n  function getPathFrame(fiber) {\n    const {\n      key\n    } = fiber;\n    let displayName = getDisplayNameForFiber(fiber);\n    const index = fiber.index;\n\n    switch (fiber.tag) {\n      case HostRoot:\n        // Roots don't have a real displayName, index, or key.\n        // Instead, we'll use the pseudo key (childDisplayName:indexWithThatName).\n        const id = getFiberIDThrows(fiber);\n        const pseudoKey = rootPseudoKeys.get(id);\n\n        if (pseudoKey === undefined) {\n          throw new Error('Expected mounted root to have known pseudo key.');\n        }\n\n        displayName = pseudoKey;\n        break;\n\n      case HostComponent:\n        displayName = fiber.type;\n        break;\n\n      default:\n        break;\n    }\n\n    return {\n      displayName,\n      key,\n      index\n    };\n  } // Produces a serializable representation that does a best effort\n  // of identifying a particular Fiber between page reloads.\n  // The return path will contain Fibers that are \"invisible\" to the store\n  // because their keys and indexes are important to restoring the selection.\n\n\n  function getPathForElement(id) {\n    let fiber = idToArbitraryFiberMap.get(id);\n\n    if (fiber == null) {\n      return null;\n    }\n\n    const keyPath = [];\n\n    while (fiber !== null) {\n      keyPath.push(getPathFrame(fiber));\n      fiber = fiber.return;\n    }\n\n    keyPath.reverse();\n    return keyPath;\n  }\n\n  function getBestMatchForTrackedPath() {\n    if (trackedPath === null) {\n      // Nothing to match.\n      return null;\n    }\n\n    if (trackedPathMatchFiber === null) {\n      // We didn't find anything.\n      return null;\n    } // Find the closest Fiber store is aware of.\n\n\n    let fiber = trackedPathMatchFiber;\n\n    while (fiber !== null && shouldFilterFiber(fiber)) {\n      fiber = fiber.return;\n    }\n\n    if (fiber === null) {\n      return null;\n    }\n\n    return {\n      id: getFiberIDThrows(fiber),\n      isFullMatch: trackedPathMatchDepth === trackedPath.length - 1\n    };\n  }\n\n  const formatPriorityLevel = priorityLevel => {\n    if (priorityLevel == null) {\n      return 'Unknown';\n    }\n\n    switch (priorityLevel) {\n      case ImmediatePriority:\n        return 'Immediate';\n\n      case UserBlockingPriority:\n        return 'User-Blocking';\n\n      case NormalPriority:\n        return 'Normal';\n\n      case LowPriority:\n        return 'Low';\n\n      case IdlePriority:\n        return 'Idle';\n\n      case NoPriority:\n      default:\n        return 'Unknown';\n    }\n  };\n\n  function setTraceUpdatesEnabled(isEnabled) {\n    traceUpdatesEnabled = isEnabled;\n  }\n\n  return {\n    cleanup,\n    clearErrorsAndWarnings,\n    clearErrorsForFiberID,\n    clearWarningsForFiberID,\n    copyElementPath,\n    deletePath,\n    findNativeNodesForFiberID,\n    flushInitialOperations,\n    getBestMatchForTrackedPath,\n    getDisplayNameForFiberID,\n    getFiberIDForNative,\n    getInstanceAndStyle,\n    getOwnersList,\n    getPathForElement,\n    getProfilingData,\n    handleCommitFiberRoot,\n    handleCommitFiberUnmount,\n    handlePostCommitFiberRoot,\n    inspectElement,\n    logElementToConsole,\n    patchConsoleForStrictMode: _console__WEBPACK_IMPORTED_MODULE_7__[\"patchForStrictMode\"],\n    prepareViewAttributeSource,\n    prepareViewElementSource,\n    overrideError,\n    overrideSuspense,\n    overrideValueAtPath,\n    renamePath,\n    renderer,\n    setTraceUpdatesEnabled,\n    setTrackedPath,\n    startProfiling,\n    stopProfiling,\n    storeAsGlobal,\n    unpatchConsoleForStrictMode: _console__WEBPACK_IMPORTED_MODULE_7__[\"unpatchForStrictMode\"],\n    updateComponentFilters\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/backend/renderer.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/backend/utils.js":
/*!*****************************************************!*\
  !*** ../react-devtools-shared/src/backend/utils.js ***!
  \*****************************************************/
/*! exports provided: cleanForBridge, copyToClipboard, copyWithDelete, copyWithRename, copyWithSet, getEffectDurations, serializeToString, format, isSynchronousXHRSupported */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cleanForBridge\", function() { return cleanForBridge; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"copyToClipboard\", function() { return copyToClipboard; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"copyWithDelete\", function() { return copyWithDelete; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"copyWithRename\", function() { return copyWithRename; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"copyWithSet\", function() { return copyWithSet; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getEffectDurations\", function() { return getEffectDurations; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"serializeToString\", function() { return serializeToString; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"format\", function() { return format; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isSynchronousXHRSupported\", function() { return isSynchronousXHRSupported; });\n/* harmony import */ var clipboard_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! clipboard-js */ \"../../node_modules/clipboard-js/clipboard.js\");\n/* harmony import */ var clipboard_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(clipboard_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _hydration__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../hydration */ \"../react-devtools-shared/src/hydration.js\");\n/* harmony import */ var shared_isArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! shared/isArray */ \"../shared/isArray.js\");\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\n\nfunction cleanForBridge(data, isPathAllowed, path = []) {\n  if (data !== null) {\n    const cleanedPaths = [];\n    const unserializablePaths = [];\n    const cleanedData = Object(_hydration__WEBPACK_IMPORTED_MODULE_1__[\"dehydrate\"])(data, cleanedPaths, unserializablePaths, path, isPathAllowed);\n    return {\n      data: cleanedData,\n      cleaned: cleanedPaths,\n      unserializable: unserializablePaths\n    };\n  } else {\n    return null;\n  }\n}\nfunction copyToClipboard(value) {\n  const safeToCopy = serializeToString(value);\n  const text = safeToCopy === undefined ? 'undefined' : safeToCopy;\n  const {\n    clipboardCopyText\n  } = window.__REACT_DEVTOOLS_GLOBAL_HOOK__; // On Firefox navigator.clipboard.writeText has to be called from\n  // the content script js code (because it requires the clipboardWrite\n  // permission to be allowed out of a \"user handling\" callback),\n  // clipboardCopyText is an helper injected into the page from.\n  // injectGlobalHook.\n\n  if (typeof clipboardCopyText === 'function') {\n    clipboardCopyText(text).catch(err => {});\n  } else {\n    Object(clipboard_js__WEBPACK_IMPORTED_MODULE_0__[\"copy\"])(text);\n  }\n}\nfunction copyWithDelete(obj, path, index = 0) {\n  const key = path[index];\n  const updated = Object(shared_isArray__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(obj) ? obj.slice() : { ...obj\n  };\n\n  if (index + 1 === path.length) {\n    if (Object(shared_isArray__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(updated)) {\n      updated.splice(key, 1);\n    } else {\n      delete updated[key];\n    }\n  } else {\n    // $FlowFixMe number or string is fine here\n    updated[key] = copyWithDelete(obj[key], path, index + 1);\n  }\n\n  return updated;\n} // This function expects paths to be the same except for the final value.\n// e.g. ['path', 'to', 'foo'] and ['path', 'to', 'bar']\n\nfunction copyWithRename(obj, oldPath, newPath, index = 0) {\n  const oldKey = oldPath[index];\n  const updated = Object(shared_isArray__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(obj) ? obj.slice() : { ...obj\n  };\n\n  if (index + 1 === oldPath.length) {\n    const newKey = newPath[index]; // $FlowFixMe number or string is fine here\n\n    updated[newKey] = updated[oldKey];\n\n    if (Object(shared_isArray__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(updated)) {\n      updated.splice(oldKey, 1);\n    } else {\n      delete updated[oldKey];\n    }\n  } else {\n    // $FlowFixMe number or string is fine here\n    updated[oldKey] = copyWithRename(obj[oldKey], oldPath, newPath, index + 1);\n  }\n\n  return updated;\n}\nfunction copyWithSet(obj, path, value, index = 0) {\n  if (index >= path.length) {\n    return value;\n  }\n\n  const key = path[index];\n  const updated = Object(shared_isArray__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(obj) ? obj.slice() : { ...obj\n  }; // $FlowFixMe number or string is fine here\n\n  updated[key] = copyWithSet(obj[key], path, value, index + 1);\n  return updated;\n}\nfunction getEffectDurations(root) {\n  // Profiling durations are only available for certain builds.\n  // If available, they'll be stored on the HostRoot.\n  let effectDuration = null;\n  let passiveEffectDuration = null;\n  const hostRoot = root.current;\n\n  if (hostRoot != null) {\n    const stateNode = hostRoot.stateNode;\n\n    if (stateNode != null) {\n      effectDuration = stateNode.effectDuration != null ? stateNode.effectDuration : null;\n      passiveEffectDuration = stateNode.passiveEffectDuration != null ? stateNode.passiveEffectDuration : null;\n    }\n  }\n\n  return {\n    effectDuration,\n    passiveEffectDuration\n  };\n}\nfunction serializeToString(data) {\n  const cache = new Set(); // Use a custom replacer function to protect against circular references.\n\n  return JSON.stringify(data, (key, value) => {\n    if (typeof value === 'object' && value !== null) {\n      if (cache.has(value)) {\n        return;\n      }\n\n      cache.add(value);\n    } // $FlowFixMe\n\n\n    if (typeof value === 'bigint') {\n      return value.toString() + 'n';\n    }\n\n    return value;\n  });\n} // based on https://github.com/tmpfs/format-util/blob/0e62d430efb0a1c51448709abd3e2406c14d8401/format.js#L1\n// based on https://developer.mozilla.org/en-US/docs/Web/API/console#Using_string_substitutions\n// Implements s, d, i and f placeholders\n// NOTE: KEEP IN SYNC with src/hook.js\n\nfunction format(maybeMessage, ...inputArgs) {\n  const args = inputArgs.slice();\n  let formatted = String(maybeMessage); // If the first argument is a string, check for substitutions.\n\n  if (typeof maybeMessage === 'string') {\n    if (args.length) {\n      const REGEXP = /(%?)(%([jds]))/g;\n      formatted = formatted.replace(REGEXP, (match, escaped, ptn, flag) => {\n        let arg = args.shift();\n\n        switch (flag) {\n          case 's':\n            arg += '';\n            break;\n\n          case 'd':\n          case 'i':\n            arg = parseInt(arg, 10).toString();\n            break;\n\n          case 'f':\n            arg = parseFloat(arg).toString();\n            break;\n        }\n\n        if (!escaped) {\n          return arg;\n        }\n\n        args.unshift(arg);\n        return match;\n      });\n    }\n  } // Arguments that remain after formatting.\n\n\n  if (args.length) {\n    for (let i = 0; i < args.length; i++) {\n      formatted += ' ' + String(args[i]);\n    }\n  } // Update escaped %% values.\n\n\n  formatted = formatted.replace(/%{2,2}/g, '%');\n  return String(formatted);\n}\nfunction isSynchronousXHRSupported() {\n  return !!(window.document && window.document.featurePolicy && window.document.featurePolicy.allowsFeature('sync-xhr'));\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/backend/utils.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/config/DevToolsFeatureFlags.extension-oss.js":
/*!*********************************************************************************!*\
  !*** ../react-devtools-shared/src/config/DevToolsFeatureFlags.extension-oss.js ***!
  \*********************************************************************************/
/*! exports provided: consoleManagedByDevToolsDuringStrictMode, enableLogger, enableNamedHooksFeature, enableProfilerChangedHookIndices, enableStyleXFeatures, isInternalFacebookBuild */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"consoleManagedByDevToolsDuringStrictMode\", function() { return consoleManagedByDevToolsDuringStrictMode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"enableLogger\", function() { return enableLogger; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"enableNamedHooksFeature\", function() { return enableNamedHooksFeature; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"enableProfilerChangedHookIndices\", function() { return enableProfilerChangedHookIndices; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"enableStyleXFeatures\", function() { return enableStyleXFeatures; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isInternalFacebookBuild\", function() { return isInternalFacebookBuild; });\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/************************************************************************\n * This file is forked between different DevTools implementations.\n * It should never be imported directly!\n * It should always be imported from \"react-devtools-feature-flags\".\n ************************************************************************/\nconst consoleManagedByDevToolsDuringStrictMode = true;\nconst enableLogger = false;\nconst enableNamedHooksFeature = true;\nconst enableProfilerChangedHookIndices = true;\nconst enableStyleXFeatures = false;\nconst isInternalFacebookBuild = false;\n/************************************************************************\n * Do not edit the code below.\n * It ensures this fork exports the same types as the default flags file.\n ************************************************************************/\n\n// eslint-disable-next-line no-unused-expressions\nnull;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vcmVhY3QtZGV2dG9vbHMtc2hhcmVkL3NyYy9jb25maWcvRGV2VG9vbHNGZWF0dXJlRmxhZ3MuZXh0ZW5zaW9uLW9zcy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9yZWFjdC1kZXZ0b29scy1zaGFyZWQvc3JjL2NvbmZpZy9EZXZUb29sc0ZlYXR1cmVGbGFncy5leHRlbnNpb24tb3NzLmpzPzJkMjEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqIFRoaXMgZmlsZSBpcyBmb3JrZWQgYmV0d2VlbiBkaWZmZXJlbnQgRGV2VG9vbHMgaW1wbGVtZW50YXRpb25zLlxuICogSXQgc2hvdWxkIG5ldmVyIGJlIGltcG9ydGVkIGRpcmVjdGx5IVxuICogSXQgc2hvdWxkIGFsd2F5cyBiZSBpbXBvcnRlZCBmcm9tIFwicmVhY3QtZGV2dG9vbHMtZmVhdHVyZS1mbGFnc1wiLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuZXhwb3J0IGNvbnN0IGNvbnNvbGVNYW5hZ2VkQnlEZXZUb29sc0R1cmluZ1N0cmljdE1vZGUgPSB0cnVlO1xuZXhwb3J0IGNvbnN0IGVuYWJsZUxvZ2dlciA9IGZhbHNlO1xuZXhwb3J0IGNvbnN0IGVuYWJsZU5hbWVkSG9va3NGZWF0dXJlID0gdHJ1ZTtcbmV4cG9ydCBjb25zdCBlbmFibGVQcm9maWxlckNoYW5nZWRIb29rSW5kaWNlcyA9IHRydWU7XG5leHBvcnQgY29uc3QgZW5hYmxlU3R5bGVYRmVhdHVyZXMgPSBmYWxzZTtcbmV4cG9ydCBjb25zdCBpc0ludGVybmFsRmFjZWJvb2tCdWlsZCA9IGZhbHNlO1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBEbyBub3QgZWRpdCB0aGUgY29kZSBiZWxvdy5cbiAqIEl0IGVuc3VyZXMgdGhpcyBmb3JrIGV4cG9ydHMgdGhlIHNhbWUgdHlwZXMgYXMgdGhlIGRlZmF1bHQgZmxhZ3MgZmlsZS5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCB0eXBlb2YgKiBhcyBGZWF0dXJlRmxhZ3NUeXBlIGZyb20gJy4vRGV2VG9vbHNGZWF0dXJlRmxhZ3MuZGVmYXVsdCc7XG5pbXBvcnQgdHlwZW9mICogYXMgRXhwb3J0c1R5cGUgZnJvbSAnLi9EZXZUb29sc0ZlYXR1cmVGbGFncy5leHRlbnNpb24tb3NzJztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG50eXBlIENoZWNrPF9YLCBZOiBfWCwgWDogWSA9IF9YPiA9IG51bGw7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG4obnVsbDogQ2hlY2s8RXhwb3J0c1R5cGUsIEZlYXR1cmVGbGFnc1R5cGU+KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7Ozs7O0FBU0E7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7O0FBVUE7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/config/DevToolsFeatureFlags.extension-oss.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/constants.js":
/*!*************************************************!*\
  !*** ../react-devtools-shared/src/constants.js ***!
  \*************************************************/
/*! exports provided: CHROME_WEBSTORE_EXTENSION_ID, INTERNAL_EXTENSION_ID, LOCAL_EXTENSION_ID, __DEBUG__, __PERFORMANCE_PROFILE__, TREE_OPERATION_ADD, TREE_OPERATION_REMOVE, TREE_OPERATION_REORDER_CHILDREN, TREE_OPERATION_UPDATE_TREE_BASE_DURATION, TREE_OPERATION_UPDATE_ERRORS_OR_WARNINGS, TREE_OPERATION_REMOVE_ROOT, TREE_OPERATION_SET_SUBTREE_MODE, LOCAL_STORAGE_DEFAULT_TAB_KEY, LOCAL_STORAGE_FILTER_PREFERENCES_KEY, SESSION_STORAGE_LAST_SELECTION_KEY, LOCAL_STORAGE_OPEN_IN_EDITOR_URL, LOCAL_STORAGE_PARSE_HOOK_NAMES_KEY, SESSION_STORAGE_RECORD_CHANGE_DESCRIPTIONS_KEY, SESSION_STORAGE_RELOAD_AND_PROFILE_KEY, LOCAL_STORAGE_SHOULD_BREAK_ON_CONSOLE_ERRORS, LOCAL_STORAGE_SHOULD_PATCH_CONSOLE_KEY, LOCAL_STORAGE_SHOW_INLINE_WARNINGS_AND_ERRORS_KEY, LOCAL_STORAGE_TRACE_UPDATES_ENABLED_KEY, LOCAL_STORAGE_HIDE_CONSOLE_LOGS_IN_STRICT_MODE, PROFILER_EXPORT_VERSION, CHANGE_LOG_URL, UNSUPPORTED_VERSION_URL, REACT_DEVTOOLS_WORKPLACE_URL, THEME_STYLES, COMFORTABLE_LINE_HEIGHT, COMPACT_LINE_HEIGHT */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CHROME_WEBSTORE_EXTENSION_ID\", function() { return CHROME_WEBSTORE_EXTENSION_ID; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"INTERNAL_EXTENSION_ID\", function() { return INTERNAL_EXTENSION_ID; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LOCAL_EXTENSION_ID\", function() { return LOCAL_EXTENSION_ID; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__DEBUG__\", function() { return __DEBUG__; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__PERFORMANCE_PROFILE__\", function() { return __PERFORMANCE_PROFILE__; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TREE_OPERATION_ADD\", function() { return TREE_OPERATION_ADD; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TREE_OPERATION_REMOVE\", function() { return TREE_OPERATION_REMOVE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TREE_OPERATION_REORDER_CHILDREN\", function() { return TREE_OPERATION_REORDER_CHILDREN; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TREE_OPERATION_UPDATE_TREE_BASE_DURATION\", function() { return TREE_OPERATION_UPDATE_TREE_BASE_DURATION; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TREE_OPERATION_UPDATE_ERRORS_OR_WARNINGS\", function() { return TREE_OPERATION_UPDATE_ERRORS_OR_WARNINGS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TREE_OPERATION_REMOVE_ROOT\", function() { return TREE_OPERATION_REMOVE_ROOT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TREE_OPERATION_SET_SUBTREE_MODE\", function() { return TREE_OPERATION_SET_SUBTREE_MODE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LOCAL_STORAGE_DEFAULT_TAB_KEY\", function() { return LOCAL_STORAGE_DEFAULT_TAB_KEY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LOCAL_STORAGE_FILTER_PREFERENCES_KEY\", function() { return LOCAL_STORAGE_FILTER_PREFERENCES_KEY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SESSION_STORAGE_LAST_SELECTION_KEY\", function() { return SESSION_STORAGE_LAST_SELECTION_KEY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LOCAL_STORAGE_OPEN_IN_EDITOR_URL\", function() { return LOCAL_STORAGE_OPEN_IN_EDITOR_URL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LOCAL_STORAGE_PARSE_HOOK_NAMES_KEY\", function() { return LOCAL_STORAGE_PARSE_HOOK_NAMES_KEY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SESSION_STORAGE_RECORD_CHANGE_DESCRIPTIONS_KEY\", function() { return SESSION_STORAGE_RECORD_CHANGE_DESCRIPTIONS_KEY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SESSION_STORAGE_RELOAD_AND_PROFILE_KEY\", function() { return SESSION_STORAGE_RELOAD_AND_PROFILE_KEY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LOCAL_STORAGE_SHOULD_BREAK_ON_CONSOLE_ERRORS\", function() { return LOCAL_STORAGE_SHOULD_BREAK_ON_CONSOLE_ERRORS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LOCAL_STORAGE_SHOULD_PATCH_CONSOLE_KEY\", function() { return LOCAL_STORAGE_SHOULD_PATCH_CONSOLE_KEY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LOCAL_STORAGE_SHOW_INLINE_WARNINGS_AND_ERRORS_KEY\", function() { return LOCAL_STORAGE_SHOW_INLINE_WARNINGS_AND_ERRORS_KEY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LOCAL_STORAGE_TRACE_UPDATES_ENABLED_KEY\", function() { return LOCAL_STORAGE_TRACE_UPDATES_ENABLED_KEY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LOCAL_STORAGE_HIDE_CONSOLE_LOGS_IN_STRICT_MODE\", function() { return LOCAL_STORAGE_HIDE_CONSOLE_LOGS_IN_STRICT_MODE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PROFILER_EXPORT_VERSION\", function() { return PROFILER_EXPORT_VERSION; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CHANGE_LOG_URL\", function() { return CHANGE_LOG_URL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UNSUPPORTED_VERSION_URL\", function() { return UNSUPPORTED_VERSION_URL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"REACT_DEVTOOLS_WORKPLACE_URL\", function() { return REACT_DEVTOOLS_WORKPLACE_URL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"THEME_STYLES\", function() { return THEME_STYLES; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"COMFORTABLE_LINE_HEIGHT\", function() { return COMFORTABLE_LINE_HEIGHT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"COMPACT_LINE_HEIGHT\", function() { return COMPACT_LINE_HEIGHT; });\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nconst CHROME_WEBSTORE_EXTENSION_ID = 'fmkadmapgofadopljbjfkapdkoienihi';\nconst INTERNAL_EXTENSION_ID = 'dnjnjgbfilfphmojnmhliehogmojhclc';\nconst LOCAL_EXTENSION_ID = 'ikiahnapldjmdmpkmfhjdjilojjhgcbf'; // Flip this flag to true to enable verbose console debug logging.\n\nconst __DEBUG__ = false; // Flip this flag to true to enable performance.mark() and performance.measure() timings.\n\nconst __PERFORMANCE_PROFILE__ = false;\nconst TREE_OPERATION_ADD = 1;\nconst TREE_OPERATION_REMOVE = 2;\nconst TREE_OPERATION_REORDER_CHILDREN = 3;\nconst TREE_OPERATION_UPDATE_TREE_BASE_DURATION = 4;\nconst TREE_OPERATION_UPDATE_ERRORS_OR_WARNINGS = 5;\nconst TREE_OPERATION_REMOVE_ROOT = 6;\nconst TREE_OPERATION_SET_SUBTREE_MODE = 7;\nconst LOCAL_STORAGE_DEFAULT_TAB_KEY = 'React::DevTools::defaultTab';\nconst LOCAL_STORAGE_FILTER_PREFERENCES_KEY = 'React::DevTools::componentFilters';\nconst SESSION_STORAGE_LAST_SELECTION_KEY = 'React::DevTools::lastSelection';\nconst LOCAL_STORAGE_OPEN_IN_EDITOR_URL = 'React::DevTools::openInEditorUrl';\nconst LOCAL_STORAGE_PARSE_HOOK_NAMES_KEY = 'React::DevTools::parseHookNames';\nconst SESSION_STORAGE_RECORD_CHANGE_DESCRIPTIONS_KEY = 'React::DevTools::recordChangeDescriptions';\nconst SESSION_STORAGE_RELOAD_AND_PROFILE_KEY = 'React::DevTools::reloadAndProfile';\nconst LOCAL_STORAGE_SHOULD_BREAK_ON_CONSOLE_ERRORS = 'React::DevTools::breakOnConsoleErrors';\nconst LOCAL_STORAGE_SHOULD_PATCH_CONSOLE_KEY = 'React::DevTools::appendComponentStack';\nconst LOCAL_STORAGE_SHOW_INLINE_WARNINGS_AND_ERRORS_KEY = 'React::DevTools::showInlineWarningsAndErrors';\nconst LOCAL_STORAGE_TRACE_UPDATES_ENABLED_KEY = 'React::DevTools::traceUpdatesEnabled';\nconst LOCAL_STORAGE_HIDE_CONSOLE_LOGS_IN_STRICT_MODE = 'React::DevTools::hideConsoleLogsInStrictMode';\nconst PROFILER_EXPORT_VERSION = 5;\nconst CHANGE_LOG_URL = 'https://github.com/facebook/react/blob/main/packages/react-devtools/CHANGELOG.md';\nconst UNSUPPORTED_VERSION_URL = 'https://reactjs.org/blog/2019/08/15/new-react-devtools.html#how-do-i-get-the-old-version-back';\nconst REACT_DEVTOOLS_WORKPLACE_URL = 'https://fburl.com/react-devtools-workplace-group';\nconst THEME_STYLES = {\n  light: {\n    '--color-attribute-name': '#ef6632',\n    '--color-attribute-name-not-editable': '#23272f',\n    '--color-attribute-name-inverted': 'rgba(255, 255, 255, 0.7)',\n    '--color-attribute-value': '#1a1aa6',\n    '--color-attribute-value-inverted': '#ffffff',\n    '--color-attribute-editable-value': '#1a1aa6',\n    '--color-background': '#ffffff',\n    '--color-background-hover': 'rgba(0, 136, 250, 0.1)',\n    '--color-background-inactive': '#e5e5e5',\n    '--color-background-invalid': '#fff0f0',\n    '--color-background-selected': '#0088fa',\n    '--color-button-background': '#ffffff',\n    '--color-button-background-focus': '#ededed',\n    '--color-button': '#5f6673',\n    '--color-button-disabled': '#cfd1d5',\n    '--color-button-active': '#0088fa',\n    '--color-button-focus': '#23272f',\n    '--color-button-hover': '#23272f',\n    '--color-border': '#eeeeee',\n    '--color-commit-did-not-render-fill': '#cfd1d5',\n    '--color-commit-did-not-render-fill-text': '#000000',\n    '--color-commit-did-not-render-pattern': '#cfd1d5',\n    '--color-commit-did-not-render-pattern-text': '#333333',\n    '--color-commit-gradient-0': '#37afa9',\n    '--color-commit-gradient-1': '#63b19e',\n    '--color-commit-gradient-2': '#80b393',\n    '--color-commit-gradient-3': '#97b488',\n    '--color-commit-gradient-4': '#abb67d',\n    '--color-commit-gradient-5': '#beb771',\n    '--color-commit-gradient-6': '#cfb965',\n    '--color-commit-gradient-7': '#dfba57',\n    '--color-commit-gradient-8': '#efbb49',\n    '--color-commit-gradient-9': '#febc38',\n    '--color-commit-gradient-text': '#000000',\n    '--color-component-name': '#6a51b2',\n    '--color-component-name-inverted': '#ffffff',\n    '--color-component-badge-background': 'rgba(0, 0, 0, 0.1)',\n    '--color-component-badge-background-inverted': 'rgba(255, 255, 255, 0.25)',\n    '--color-component-badge-count': '#777d88',\n    '--color-component-badge-count-inverted': 'rgba(255, 255, 255, 0.7)',\n    '--color-console-error-badge-text': '#ffffff',\n    '--color-console-error-background': '#fff0f0',\n    '--color-console-error-border': '#ffd6d6',\n    '--color-console-error-icon': '#eb3941',\n    '--color-console-error-text': '#fe2e31',\n    '--color-console-warning-badge-text': '#000000',\n    '--color-console-warning-background': '#fffbe5',\n    '--color-console-warning-border': '#fff5c1',\n    '--color-console-warning-icon': '#f4bd00',\n    '--color-console-warning-text': '#64460c',\n    '--color-context-background': 'rgba(0,0,0,.9)',\n    '--color-context-background-hover': 'rgba(255, 255, 255, 0.1)',\n    '--color-context-background-selected': '#178fb9',\n    '--color-context-border': '#3d424a',\n    '--color-context-text': '#ffffff',\n    '--color-context-text-selected': '#ffffff',\n    '--color-dim': '#777d88',\n    '--color-dimmer': '#cfd1d5',\n    '--color-dimmest': '#eff0f1',\n    '--color-error-background': 'hsl(0, 100%, 97%)',\n    '--color-error-border': 'hsl(0, 100%, 92%)',\n    '--color-error-text': '#ff0000',\n    '--color-expand-collapse-toggle': '#777d88',\n    '--color-link': '#0000ff',\n    '--color-modal-background': 'rgba(255, 255, 255, 0.75)',\n    '--color-bridge-version-npm-background': '#eff0f1',\n    '--color-bridge-version-npm-text': '#000000',\n    '--color-bridge-version-number': '#0088fa',\n    '--color-primitive-hook-badge-background': '#e5e5e5',\n    '--color-primitive-hook-badge-text': '#5f6673',\n    '--color-record-active': '#fc3a4b',\n    '--color-record-hover': '#3578e5',\n    '--color-record-inactive': '#0088fa',\n    '--color-resize-bar': '#eeeeee',\n    '--color-resize-bar-active': '#dcdcdc',\n    '--color-resize-bar-border': '#d1d1d1',\n    '--color-resize-bar-dot': '#333333',\n    '--color-timeline-internal-module': '#d1d1d1',\n    '--color-timeline-internal-module-hover': '#c9c9c9',\n    '--color-timeline-internal-module-text': '#444',\n    '--color-timeline-native-event': '#ccc',\n    '--color-timeline-native-event-hover': '#aaa',\n    '--color-timeline-network-primary': '#fcf3dc',\n    '--color-timeline-network-primary-hover': '#f0e7d1',\n    '--color-timeline-network-secondary': '#efc457',\n    '--color-timeline-network-secondary-hover': '#e3ba52',\n    '--color-timeline-priority-background': '#f6f6f6',\n    '--color-timeline-priority-border': '#eeeeee',\n    '--color-timeline-user-timing': '#c9cacd',\n    '--color-timeline-user-timing-hover': '#93959a',\n    '--color-timeline-react-idle': '#d3e5f6',\n    '--color-timeline-react-idle-hover': '#c3d9ef',\n    '--color-timeline-react-render': '#9fc3f3',\n    '--color-timeline-react-render-hover': '#83afe9',\n    '--color-timeline-react-render-text': '#11365e',\n    '--color-timeline-react-commit': '#c88ff0',\n    '--color-timeline-react-commit-hover': '#b281d6',\n    '--color-timeline-react-commit-text': '#3e2c4a',\n    '--color-timeline-react-layout-effects': '#b281d6',\n    '--color-timeline-react-layout-effects-hover': '#9d71bd',\n    '--color-timeline-react-layout-effects-text': '#3e2c4a',\n    '--color-timeline-react-passive-effects': '#b281d6',\n    '--color-timeline-react-passive-effects-hover': '#9d71bd',\n    '--color-timeline-react-passive-effects-text': '#3e2c4a',\n    '--color-timeline-react-schedule': '#9fc3f3',\n    '--color-timeline-react-schedule-hover': '#2683E2',\n    '--color-timeline-react-suspense-rejected': '#f1cc14',\n    '--color-timeline-react-suspense-rejected-hover': '#ffdf37',\n    '--color-timeline-react-suspense-resolved': '#a6e59f',\n    '--color-timeline-react-suspense-resolved-hover': '#89d281',\n    '--color-timeline-react-suspense-unresolved': '#c9cacd',\n    '--color-timeline-react-suspense-unresolved-hover': '#93959a',\n    '--color-timeline-thrown-error': '#ee1638',\n    '--color-timeline-thrown-error-hover': '#da1030',\n    '--color-timeline-text-color': '#000000',\n    '--color-timeline-text-dim-color': '#ccc',\n    '--color-timeline-react-work-border': '#eeeeee',\n    '--color-search-match': 'yellow',\n    '--color-search-match-current': '#f7923b',\n    '--color-selected-tree-highlight-active': 'rgba(0, 136, 250, 0.1)',\n    '--color-selected-tree-highlight-inactive': 'rgba(0, 0, 0, 0.05)',\n    '--color-scroll-caret': 'rgba(150, 150, 150, 0.5)',\n    '--color-tab-selected-border': '#0088fa',\n    '--color-text': '#000000',\n    '--color-text-invalid': '#ff0000',\n    '--color-text-selected': '#ffffff',\n    '--color-toggle-background-invalid': '#fc3a4b',\n    '--color-toggle-background-on': '#0088fa',\n    '--color-toggle-background-off': '#cfd1d5',\n    '--color-toggle-text': '#ffffff',\n    '--color-warning-background': '#fb3655',\n    '--color-warning-background-hover': '#f82042',\n    '--color-warning-text-color': '#ffffff',\n    '--color-warning-text-color-inverted': '#fd4d69',\n    // The styles below should be kept in sync with 'root.css'\n    // They are repeated there because they're used by e.g. tooltips or context menus\n    // which get rendered outside of the DOM subtree (where normal theme/styles are written).\n    '--color-scroll-thumb': '#c2c2c2',\n    '--color-scroll-track': '#fafafa',\n    '--color-tooltip-background': 'rgba(0, 0, 0, 0.9)',\n    '--color-tooltip-text': '#ffffff'\n  },\n  dark: {\n    '--color-attribute-name': '#9d87d2',\n    '--color-attribute-name-not-editable': '#ededed',\n    '--color-attribute-name-inverted': '#282828',\n    '--color-attribute-value': '#cedae0',\n    '--color-attribute-value-inverted': '#ffffff',\n    '--color-attribute-editable-value': 'yellow',\n    '--color-background': '#282c34',\n    '--color-background-hover': 'rgba(255, 255, 255, 0.1)',\n    '--color-background-inactive': '#3d424a',\n    '--color-background-invalid': '#5c0000',\n    '--color-background-selected': '#178fb9',\n    '--color-button-background': '#282c34',\n    '--color-button-background-focus': '#3d424a',\n    '--color-button': '#afb3b9',\n    '--color-button-active': '#61dafb',\n    '--color-button-disabled': '#4f5766',\n    '--color-button-focus': '#a2e9fc',\n    '--color-button-hover': '#ededed',\n    '--color-border': '#3d424a',\n    '--color-commit-did-not-render-fill': '#777d88',\n    '--color-commit-did-not-render-fill-text': '#000000',\n    '--color-commit-did-not-render-pattern': '#666c77',\n    '--color-commit-did-not-render-pattern-text': '#ffffff',\n    '--color-commit-gradient-0': '#37afa9',\n    '--color-commit-gradient-1': '#63b19e',\n    '--color-commit-gradient-2': '#80b393',\n    '--color-commit-gradient-3': '#97b488',\n    '--color-commit-gradient-4': '#abb67d',\n    '--color-commit-gradient-5': '#beb771',\n    '--color-commit-gradient-6': '#cfb965',\n    '--color-commit-gradient-7': '#dfba57',\n    '--color-commit-gradient-8': '#efbb49',\n    '--color-commit-gradient-9': '#febc38',\n    '--color-commit-gradient-text': '#000000',\n    '--color-component-name': '#61dafb',\n    '--color-component-name-inverted': '#282828',\n    '--color-component-badge-background': 'rgba(255, 255, 255, 0.25)',\n    '--color-component-badge-background-inverted': 'rgba(0, 0, 0, 0.25)',\n    '--color-component-badge-count': '#8f949d',\n    '--color-component-badge-count-inverted': 'rgba(255, 255, 255, 0.7)',\n    '--color-console-error-badge-text': '#000000',\n    '--color-console-error-background': '#290000',\n    '--color-console-error-border': '#5c0000',\n    '--color-console-error-icon': '#eb3941',\n    '--color-console-error-text': '#fc7f7f',\n    '--color-console-warning-badge-text': '#000000',\n    '--color-console-warning-background': '#332b00',\n    '--color-console-warning-border': '#665500',\n    '--color-console-warning-icon': '#f4bd00',\n    '--color-console-warning-text': '#f5f2ed',\n    '--color-context-background': 'rgba(255,255,255,.95)',\n    '--color-context-background-hover': 'rgba(0, 136, 250, 0.1)',\n    '--color-context-background-selected': '#0088fa',\n    '--color-context-border': '#eeeeee',\n    '--color-context-text': '#000000',\n    '--color-context-text-selected': '#ffffff',\n    '--color-dim': '#8f949d',\n    '--color-dimmer': '#777d88',\n    '--color-dimmest': '#4f5766',\n    '--color-error-background': '#200',\n    '--color-error-border': '#900',\n    '--color-error-text': '#f55',\n    '--color-expand-collapse-toggle': '#8f949d',\n    '--color-link': '#61dafb',\n    '--color-modal-background': 'rgba(0, 0, 0, 0.75)',\n    '--color-bridge-version-npm-background': 'rgba(0, 0, 0, 0.25)',\n    '--color-bridge-version-npm-text': '#ffffff',\n    '--color-bridge-version-number': 'yellow',\n    '--color-primitive-hook-badge-background': 'rgba(0, 0, 0, 0.25)',\n    '--color-primitive-hook-badge-text': 'rgba(255, 255, 255, 0.7)',\n    '--color-record-active': '#fc3a4b',\n    '--color-record-hover': '#a2e9fc',\n    '--color-record-inactive': '#61dafb',\n    '--color-resize-bar': '#282c34',\n    '--color-resize-bar-active': '#31363f',\n    '--color-resize-bar-border': '#3d424a',\n    '--color-resize-bar-dot': '#cfd1d5',\n    '--color-timeline-internal-module': '#303542',\n    '--color-timeline-internal-module-hover': '#363b4a',\n    '--color-timeline-internal-module-text': '#7f8899',\n    '--color-timeline-native-event': '#b2b2b2',\n    '--color-timeline-native-event-hover': '#949494',\n    '--color-timeline-network-primary': '#fcf3dc',\n    '--color-timeline-network-primary-hover': '#e3dbc5',\n    '--color-timeline-network-secondary': '#efc457',\n    '--color-timeline-network-secondary-hover': '#d6af4d',\n    '--color-timeline-priority-background': '#1d2129',\n    '--color-timeline-priority-border': '#282c34',\n    '--color-timeline-user-timing': '#c9cacd',\n    '--color-timeline-user-timing-hover': '#93959a',\n    '--color-timeline-react-idle': '#3d485b',\n    '--color-timeline-react-idle-hover': '#465269',\n    '--color-timeline-react-render': '#2683E2',\n    '--color-timeline-react-render-hover': '#1a76d4',\n    '--color-timeline-react-render-text': '#11365e',\n    '--color-timeline-react-commit': '#731fad',\n    '--color-timeline-react-commit-hover': '#611b94',\n    '--color-timeline-react-commit-text': '#e5c1ff',\n    '--color-timeline-react-layout-effects': '#611b94',\n    '--color-timeline-react-layout-effects-hover': '#51167a',\n    '--color-timeline-react-layout-effects-text': '#e5c1ff',\n    '--color-timeline-react-passive-effects': '#611b94',\n    '--color-timeline-react-passive-effects-hover': '#51167a',\n    '--color-timeline-react-passive-effects-text': '#e5c1ff',\n    '--color-timeline-react-schedule': '#2683E2',\n    '--color-timeline-react-schedule-hover': '#1a76d4',\n    '--color-timeline-react-suspense-rejected': '#f1cc14',\n    '--color-timeline-react-suspense-rejected-hover': '#e4c00f',\n    '--color-timeline-react-suspense-resolved': '#a6e59f',\n    '--color-timeline-react-suspense-resolved-hover': '#89d281',\n    '--color-timeline-react-suspense-unresolved': '#c9cacd',\n    '--color-timeline-react-suspense-unresolved-hover': '#93959a',\n    '--color-timeline-thrown-error': '#fb3655',\n    '--color-timeline-thrown-error-hover': '#f82042',\n    '--color-timeline-text-color': '#282c34',\n    '--color-timeline-text-dim-color': '#555b66',\n    '--color-timeline-react-work-border': '#3d424a',\n    '--color-search-match': 'yellow',\n    '--color-search-match-current': '#f7923b',\n    '--color-selected-tree-highlight-active': 'rgba(23, 143, 185, 0.15)',\n    '--color-selected-tree-highlight-inactive': 'rgba(255, 255, 255, 0.05)',\n    '--color-scroll-caret': '#4f5766',\n    '--color-shadow': 'rgba(0, 0, 0, 0.5)',\n    '--color-tab-selected-border': '#178fb9',\n    '--color-text': '#ffffff',\n    '--color-text-invalid': '#ff8080',\n    '--color-text-selected': '#ffffff',\n    '--color-toggle-background-invalid': '#fc3a4b',\n    '--color-toggle-background-on': '#178fb9',\n    '--color-toggle-background-off': '#777d88',\n    '--color-toggle-text': '#ffffff',\n    '--color-warning-background': '#ee1638',\n    '--color-warning-background-hover': '#da1030',\n    '--color-warning-text-color': '#ffffff',\n    '--color-warning-text-color-inverted': '#ee1638',\n    // The styles below should be kept in sync with 'root.css'\n    // They are repeated there because they're used by e.g. tooltips or context menus\n    // which get rendered outside of the DOM subtree (where normal theme/styles are written).\n    '--color-scroll-thumb': '#afb3b9',\n    '--color-scroll-track': '#313640',\n    '--color-tooltip-background': 'rgba(255, 255, 255, 0.95)',\n    '--color-tooltip-text': '#000000'\n  },\n  compact: {\n    '--font-size-monospace-small': '9px',\n    '--font-size-monospace-normal': '11px',\n    '--font-size-monospace-large': '15px',\n    '--font-size-sans-small': '10px',\n    '--font-size-sans-normal': '12px',\n    '--font-size-sans-large': '14px',\n    '--line-height-data': '18px'\n  },\n  comfortable: {\n    '--font-size-monospace-small': '10px',\n    '--font-size-monospace-normal': '13px',\n    '--font-size-monospace-large': '17px',\n    '--font-size-sans-small': '12px',\n    '--font-size-sans-normal': '14px',\n    '--font-size-sans-large': '16px',\n    '--line-height-data': '22px'\n  }\n}; // HACK\n//\n// Sometimes the inline target is rendered before root styles are applied,\n// which would result in e.g. NaN itemSize being passed to react-window list.\n\nconst COMFORTABLE_LINE_HEIGHT = parseInt(THEME_STYLES.comfortable['--line-height-data'], 10);\nconst COMPACT_LINE_HEIGHT = parseInt(THEME_STYLES.compact['--line-height-data'], 10);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/constants.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/hydration.js":
/*!*************************************************!*\
  !*** ../react-devtools-shared/src/hydration.js ***!
  \*************************************************/
/*! exports provided: meta, dehydrate, fillInPath, hydrate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"meta\", function() { return meta; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dehydrate\", function() { return dehydrate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fillInPath\", function() { return fillInPath; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hydrate\", function() { return hydrate; });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ \"../react-devtools-shared/src/utils.js\");\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nconst meta = {\n  inspectable: Symbol('inspectable'),\n  inspected: Symbol('inspected'),\n  name: Symbol('name'),\n  preview_long: Symbol('preview_long'),\n  preview_short: Symbol('preview_short'),\n  readonly: Symbol('readonly'),\n  size: Symbol('size'),\n  type: Symbol('type'),\n  unserializable: Symbol('unserializable')\n};\n// This threshold determines the depth at which the bridge \"dehydrates\" nested data.\n// Dehydration means that we don't serialize the data for e.g. postMessage or stringify,\n// unless the frontend explicitly requests it (e.g. a user clicks to expand a props object).\n//\n// Reducing this threshold will improve the speed of initial component inspection,\n// but may decrease the responsiveness of expanding objects/arrays to inspect further.\nconst LEVEL_THRESHOLD = 2;\n/**\n * Generate the dehydrated metadata for complex object instances\n */\n\nfunction createDehydrated(type, inspectable, data, cleaned, path) {\n  cleaned.push(path);\n  const dehydrated = {\n    inspectable,\n    type,\n    preview_long: Object(_utils__WEBPACK_IMPORTED_MODULE_0__[\"formatDataForPreview\"])(data, true),\n    preview_short: Object(_utils__WEBPACK_IMPORTED_MODULE_0__[\"formatDataForPreview\"])(data, false),\n    name: !data.constructor || data.constructor.name === 'Object' ? '' : data.constructor.name\n  };\n\n  if (type === 'array' || type === 'typed_array') {\n    dehydrated.size = data.length;\n  } else if (type === 'object') {\n    dehydrated.size = Object.keys(data).length;\n  }\n\n  if (type === 'iterator' || type === 'typed_array') {\n    dehydrated.readonly = true;\n  }\n\n  return dehydrated;\n}\n/**\n * Strip out complex data (instances, functions, and data nested > LEVEL_THRESHOLD levels deep).\n * The paths of the stripped out objects are appended to the `cleaned` list.\n * On the other side of the barrier, the cleaned list is used to \"re-hydrate\" the cleaned representation into\n * an object with symbols as attributes, so that a sanitized object can be distinguished from a normal object.\n *\n * Input: {\"some\": {\"attr\": fn()}, \"other\": AnInstance}\n * Output: {\n *   \"some\": {\n *     \"attr\": {\"name\": the fn.name, type: \"function\"}\n *   },\n *   \"other\": {\n *     \"name\": \"AnInstance\",\n *     \"type\": \"object\",\n *   },\n * }\n * and cleaned = [[\"some\", \"attr\"], [\"other\"]]\n */\n\n\nfunction dehydrate(data, cleaned, unserializable, path, isPathAllowed, level = 0) {\n  const type = Object(_utils__WEBPACK_IMPORTED_MODULE_0__[\"getDataType\"])(data);\n  let isPathAllowedCheck;\n\n  switch (type) {\n    case 'html_element':\n      cleaned.push(path);\n      return {\n        inspectable: false,\n        preview_short: Object(_utils__WEBPACK_IMPORTED_MODULE_0__[\"formatDataForPreview\"])(data, false),\n        preview_long: Object(_utils__WEBPACK_IMPORTED_MODULE_0__[\"formatDataForPreview\"])(data, true),\n        name: data.tagName,\n        type\n      };\n\n    case 'function':\n      cleaned.push(path);\n      return {\n        inspectable: false,\n        preview_short: Object(_utils__WEBPACK_IMPORTED_MODULE_0__[\"formatDataForPreview\"])(data, false),\n        preview_long: Object(_utils__WEBPACK_IMPORTED_MODULE_0__[\"formatDataForPreview\"])(data, true),\n        name: typeof data.name === 'function' || !data.name ? 'function' : data.name,\n        type\n      };\n\n    case 'string':\n      isPathAllowedCheck = isPathAllowed(path);\n\n      if (isPathAllowedCheck) {\n        return data;\n      } else {\n        return data.length <= 500 ? data : data.slice(0, 500) + '...';\n      }\n\n    case 'bigint':\n      cleaned.push(path);\n      return {\n        inspectable: false,\n        preview_short: Object(_utils__WEBPACK_IMPORTED_MODULE_0__[\"formatDataForPreview\"])(data, false),\n        preview_long: Object(_utils__WEBPACK_IMPORTED_MODULE_0__[\"formatDataForPreview\"])(data, true),\n        name: data.toString(),\n        type\n      };\n\n    case 'symbol':\n      cleaned.push(path);\n      return {\n        inspectable: false,\n        preview_short: Object(_utils__WEBPACK_IMPORTED_MODULE_0__[\"formatDataForPreview\"])(data, false),\n        preview_long: Object(_utils__WEBPACK_IMPORTED_MODULE_0__[\"formatDataForPreview\"])(data, true),\n        name: data.toString(),\n        type\n      };\n    // React Elements aren't very inspector-friendly,\n    // and often contain private fields or circular references.\n\n    case 'react_element':\n      cleaned.push(path);\n      return {\n        inspectable: false,\n        preview_short: Object(_utils__WEBPACK_IMPORTED_MODULE_0__[\"formatDataForPreview\"])(data, false),\n        preview_long: Object(_utils__WEBPACK_IMPORTED_MODULE_0__[\"formatDataForPreview\"])(data, true),\n        name: Object(_utils__WEBPACK_IMPORTED_MODULE_0__[\"getDisplayNameForReactElement\"])(data) || 'Unknown',\n        type\n      };\n    // ArrayBuffers error if you try to inspect them.\n\n    case 'array_buffer':\n    case 'data_view':\n      cleaned.push(path);\n      return {\n        inspectable: false,\n        preview_short: Object(_utils__WEBPACK_IMPORTED_MODULE_0__[\"formatDataForPreview\"])(data, false),\n        preview_long: Object(_utils__WEBPACK_IMPORTED_MODULE_0__[\"formatDataForPreview\"])(data, true),\n        name: type === 'data_view' ? 'DataView' : 'ArrayBuffer',\n        size: data.byteLength,\n        type\n      };\n\n    case 'array':\n      isPathAllowedCheck = isPathAllowed(path);\n\n      if (level >= LEVEL_THRESHOLD && !isPathAllowedCheck) {\n        return createDehydrated(type, true, data, cleaned, path);\n      }\n\n      return data.map((item, i) => dehydrate(item, cleaned, unserializable, path.concat([i]), isPathAllowed, isPathAllowedCheck ? 1 : level + 1));\n\n    case 'html_all_collection':\n    case 'typed_array':\n    case 'iterator':\n      isPathAllowedCheck = isPathAllowed(path);\n\n      if (level >= LEVEL_THRESHOLD && !isPathAllowedCheck) {\n        return createDehydrated(type, true, data, cleaned, path);\n      } else {\n        const unserializableValue = {\n          unserializable: true,\n          type: type,\n          readonly: true,\n          size: type === 'typed_array' ? data.length : undefined,\n          preview_short: Object(_utils__WEBPACK_IMPORTED_MODULE_0__[\"formatDataForPreview\"])(data, false),\n          preview_long: Object(_utils__WEBPACK_IMPORTED_MODULE_0__[\"formatDataForPreview\"])(data, true),\n          name: !data.constructor || data.constructor.name === 'Object' ? '' : data.constructor.name\n        }; // TRICKY\n        // Don't use [...spread] syntax for this purpose.\n        // This project uses @babel/plugin-transform-spread in \"loose\" mode which only works with Array values.\n        // Other types (e.g. typed arrays, Sets) will not spread correctly.\n\n        Array.from(data).forEach((item, i) => unserializableValue[i] = dehydrate(item, cleaned, unserializable, path.concat([i]), isPathAllowed, isPathAllowedCheck ? 1 : level + 1));\n        unserializable.push(path);\n        return unserializableValue;\n      }\n\n    case 'opaque_iterator':\n      cleaned.push(path);\n      return {\n        inspectable: false,\n        preview_short: Object(_utils__WEBPACK_IMPORTED_MODULE_0__[\"formatDataForPreview\"])(data, false),\n        preview_long: Object(_utils__WEBPACK_IMPORTED_MODULE_0__[\"formatDataForPreview\"])(data, true),\n        name: data[Symbol.toStringTag],\n        type\n      };\n\n    case 'date':\n      cleaned.push(path);\n      return {\n        inspectable: false,\n        preview_short: Object(_utils__WEBPACK_IMPORTED_MODULE_0__[\"formatDataForPreview\"])(data, false),\n        preview_long: Object(_utils__WEBPACK_IMPORTED_MODULE_0__[\"formatDataForPreview\"])(data, true),\n        name: data.toString(),\n        type\n      };\n\n    case 'regexp':\n      cleaned.push(path);\n      return {\n        inspectable: false,\n        preview_short: Object(_utils__WEBPACK_IMPORTED_MODULE_0__[\"formatDataForPreview\"])(data, false),\n        preview_long: Object(_utils__WEBPACK_IMPORTED_MODULE_0__[\"formatDataForPreview\"])(data, true),\n        name: data.toString(),\n        type\n      };\n\n    case 'object':\n      isPathAllowedCheck = isPathAllowed(path);\n\n      if (level >= LEVEL_THRESHOLD && !isPathAllowedCheck) {\n        return createDehydrated(type, true, data, cleaned, path);\n      } else {\n        const object = {};\n        Object(_utils__WEBPACK_IMPORTED_MODULE_0__[\"getAllEnumerableKeys\"])(data).forEach(key => {\n          const name = key.toString();\n          object[name] = dehydrate(data[key], cleaned, unserializable, path.concat([name]), isPathAllowed, isPathAllowedCheck ? 1 : level + 1);\n        });\n        return object;\n      }\n\n    case 'infinity':\n    case 'nan':\n    case 'undefined':\n      // Some values are lossy when sent through a WebSocket.\n      // We dehydrate+rehydrate them to preserve their type.\n      cleaned.push(path);\n      return {\n        type\n      };\n\n    default:\n      return data;\n  }\n}\nfunction fillInPath(object, data, path, value) {\n  const target = Object(_utils__WEBPACK_IMPORTED_MODULE_0__[\"getInObject\"])(object, path);\n\n  if (target != null) {\n    if (!target[meta.unserializable]) {\n      delete target[meta.inspectable];\n      delete target[meta.inspected];\n      delete target[meta.name];\n      delete target[meta.preview_long];\n      delete target[meta.preview_short];\n      delete target[meta.readonly];\n      delete target[meta.size];\n      delete target[meta.type];\n    }\n  }\n\n  if (value !== null && data.unserializable.length > 0) {\n    const unserializablePath = data.unserializable[0];\n    let isMatch = unserializablePath.length === path.length;\n\n    for (let i = 0; i < path.length; i++) {\n      if (path[i] !== unserializablePath[i]) {\n        isMatch = false;\n        break;\n      }\n    }\n\n    if (isMatch) {\n      upgradeUnserializable(value, value);\n    }\n  }\n\n  Object(_utils__WEBPACK_IMPORTED_MODULE_0__[\"setInObject\"])(object, path, value);\n}\nfunction hydrate(object, cleaned, unserializable) {\n  cleaned.forEach(path => {\n    const length = path.length;\n    const last = path[length - 1];\n    const parent = Object(_utils__WEBPACK_IMPORTED_MODULE_0__[\"getInObject\"])(object, path.slice(0, length - 1));\n\n    if (!parent || !parent.hasOwnProperty(last)) {\n      return;\n    }\n\n    const value = parent[last];\n\n    if (!value) {\n      return;\n    } else if (value.type === 'infinity') {\n      parent[last] = Infinity;\n    } else if (value.type === 'nan') {\n      parent[last] = NaN;\n    } else if (value.type === 'undefined') {\n      parent[last] = undefined;\n    } else {\n      // Replace the string keys with Symbols so they're non-enumerable.\n      const replaced = {};\n      replaced[meta.inspectable] = !!value.inspectable;\n      replaced[meta.inspected] = false;\n      replaced[meta.name] = value.name;\n      replaced[meta.preview_long] = value.preview_long;\n      replaced[meta.preview_short] = value.preview_short;\n      replaced[meta.size] = value.size;\n      replaced[meta.readonly] = !!value.readonly;\n      replaced[meta.type] = value.type;\n      parent[last] = replaced;\n    }\n  });\n  unserializable.forEach(path => {\n    const length = path.length;\n    const last = path[length - 1];\n    const parent = Object(_utils__WEBPACK_IMPORTED_MODULE_0__[\"getInObject\"])(object, path.slice(0, length - 1));\n\n    if (!parent || !parent.hasOwnProperty(last)) {\n      return;\n    }\n\n    const node = parent[last];\n    const replacement = { ...node\n    };\n    upgradeUnserializable(replacement, node);\n    parent[last] = replacement;\n  });\n  return object;\n}\n\nfunction upgradeUnserializable(destination, source) {\n  Object.defineProperties(destination, {\n    [meta.inspected]: {\n      configurable: true,\n      enumerable: false,\n      value: !!source.inspected\n    },\n    [meta.name]: {\n      configurable: true,\n      enumerable: false,\n      value: source.name\n    },\n    [meta.preview_long]: {\n      configurable: true,\n      enumerable: false,\n      value: source.preview_long\n    },\n    [meta.preview_short]: {\n      configurable: true,\n      enumerable: false,\n      value: source.preview_short\n    },\n    [meta.size]: {\n      configurable: true,\n      enumerable: false,\n      value: source.size\n    },\n    [meta.readonly]: {\n      configurable: true,\n      enumerable: false,\n      value: !!source.readonly\n    },\n    [meta.type]: {\n      configurable: true,\n      enumerable: false,\n      value: source.type\n    },\n    [meta.unserializable]: {\n      configurable: true,\n      enumerable: false,\n      value: !!source.unserializable\n    }\n  });\n  delete destination.inspected;\n  delete destination.name;\n  delete destination.preview_long;\n  delete destination.preview_short;\n  delete destination.size;\n  delete destination.readonly;\n  delete destination.type;\n  delete destination.unserializable;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/hydration.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/isArray.js":
/*!***********************************************!*\
  !*** ../react-devtools-shared/src/isArray.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nconst isArray = Array.isArray;\n/* harmony default export */ __webpack_exports__[\"default\"] = (isArray);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vcmVhY3QtZGV2dG9vbHMtc2hhcmVkL3NyYy9pc0FycmF5LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL3JlYWN0LWRldnRvb2xzLXNoYXJlZC9zcmMvaXNBcnJheS5qcz9hNDk3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG5jb25zdCBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxuZXhwb3J0IGRlZmF1bHQgaXNBcnJheTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTs7Ozs7Ozs7QUFTQTtBQUVBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/isArray.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/storage.js":
/*!***********************************************!*\
  !*** ../react-devtools-shared/src/storage.js ***!
  \***********************************************/
/*! exports provided: localStorageGetItem, localStorageRemoveItem, localStorageSetItem, sessionStorageGetItem, sessionStorageRemoveItem, sessionStorageSetItem */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"localStorageGetItem\", function() { return localStorageGetItem; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"localStorageRemoveItem\", function() { return localStorageRemoveItem; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"localStorageSetItem\", function() { return localStorageSetItem; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sessionStorageGetItem\", function() { return sessionStorageGetItem; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sessionStorageRemoveItem\", function() { return sessionStorageRemoveItem; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sessionStorageSetItem\", function() { return sessionStorageSetItem; });\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nfunction localStorageGetItem(key) {\n  try {\n    return localStorage.getItem(key);\n  } catch (error) {\n    return null;\n  }\n}\nfunction localStorageRemoveItem(key) {\n  try {\n    localStorage.removeItem(key);\n  } catch (error) {}\n}\nfunction localStorageSetItem(key, value) {\n  try {\n    return localStorage.setItem(key, value);\n  } catch (error) {}\n}\nfunction sessionStorageGetItem(key) {\n  try {\n    return sessionStorage.getItem(key);\n  } catch (error) {\n    return null;\n  }\n}\nfunction sessionStorageRemoveItem(key) {\n  try {\n    sessionStorage.removeItem(key);\n  } catch (error) {}\n}\nfunction sessionStorageSetItem(key, value) {\n  try {\n    return sessionStorage.setItem(key, value);\n  } catch (error) {}\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vcmVhY3QtZGV2dG9vbHMtc2hhcmVkL3NyYy9zdG9yYWdlLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL3JlYWN0LWRldnRvb2xzLXNoYXJlZC9zcmMvc3RvcmFnZS5qcz85NGU3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbG9jYWxTdG9yYWdlR2V0SXRlbShrZXk6IHN0cmluZyk6IGFueSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvY2FsU3RvcmFnZVJlbW92ZUl0ZW0oa2V5OiBzdHJpbmcpOiB2b2lkIHtcbiAgdHJ5IHtcbiAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xuICB9IGNhdGNoIChlcnJvcikge31cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvY2FsU3RvcmFnZVNldEl0ZW0oa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpOiB2b2lkIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCB2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2Vzc2lvblN0b3JhZ2VHZXRJdGVtKGtleTogc3RyaW5nKTogYW55IHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXNzaW9uU3RvcmFnZVJlbW92ZUl0ZW0oa2V5OiBzdHJpbmcpOiB2b2lkIHtcbiAgdHJ5IHtcbiAgICBzZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKGtleSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2Vzc2lvblN0b3JhZ2VTZXRJdGVtKGtleTogc3RyaW5nLCB2YWx1ZTogYW55KTogdm9pZCB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oa2V5LCB2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7fVxufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7Ozs7OztBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/storage.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/types.js":
/*!*********************************************!*\
  !*** ../react-devtools-shared/src/types.js ***!
  \*********************************************/
/*! exports provided: ElementTypeClass, ElementTypeContext, ElementTypeFunction, ElementTypeForwardRef, ElementTypeHostComponent, ElementTypeMemo, ElementTypeOtherOrUnknown, ElementTypeProfiler, ElementTypeRoot, ElementTypeSuspense, ElementTypeSuspenseList, ComponentFilterElementType, ComponentFilterDisplayName, ComponentFilterLocation, ComponentFilterHOC, StrictMode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ElementTypeClass\", function() { return ElementTypeClass; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ElementTypeContext\", function() { return ElementTypeContext; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ElementTypeFunction\", function() { return ElementTypeFunction; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ElementTypeForwardRef\", function() { return ElementTypeForwardRef; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ElementTypeHostComponent\", function() { return ElementTypeHostComponent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ElementTypeMemo\", function() { return ElementTypeMemo; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ElementTypeOtherOrUnknown\", function() { return ElementTypeOtherOrUnknown; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ElementTypeProfiler\", function() { return ElementTypeProfiler; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ElementTypeRoot\", function() { return ElementTypeRoot; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ElementTypeSuspense\", function() { return ElementTypeSuspense; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ElementTypeSuspenseList\", function() { return ElementTypeSuspenseList; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ComponentFilterElementType\", function() { return ComponentFilterElementType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ComponentFilterDisplayName\", function() { return ComponentFilterDisplayName; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ComponentFilterLocation\", function() { return ComponentFilterLocation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ComponentFilterHOC\", function() { return ComponentFilterHOC; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"StrictMode\", function() { return StrictMode; });\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n// WARNING\n// The values below are referenced by ComponentFilters (which are saved via localStorage).\n// Do not change them or it will break previously saved user customizations.\n// If new element types are added, use new numbers rather than re-ordering existing ones.\n//\n// Changing these types is also a backwards breaking change for the standalone shell,\n// since the frontend and backend must share the same values-\n// and the backend is embedded in certain environments (like React Native).\nconst ElementTypeClass = 1;\nconst ElementTypeContext = 2;\nconst ElementTypeFunction = 5;\nconst ElementTypeForwardRef = 6;\nconst ElementTypeHostComponent = 7;\nconst ElementTypeMemo = 8;\nconst ElementTypeOtherOrUnknown = 9;\nconst ElementTypeProfiler = 10;\nconst ElementTypeRoot = 11;\nconst ElementTypeSuspense = 12;\nconst ElementTypeSuspenseList = 13; // Different types of elements displayed in the Elements tree.\n// These types may be used to visually distinguish types,\n// or to enable/disable certain functionality.\n\n// WARNING\n// The values below are referenced by ComponentFilters (which are saved via localStorage).\n// Do not change them or it will break previously saved user customizations.\n// If new filter types are added, use new numbers rather than re-ordering existing ones.\nconst ComponentFilterElementType = 1;\nconst ComponentFilterDisplayName = 2;\nconst ComponentFilterLocation = 3;\nconst ComponentFilterHOC = 4;\nconst StrictMode = 1;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vcmVhY3QtZGV2dG9vbHMtc2hhcmVkL3NyYy90eXBlcy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9yZWFjdC1kZXZ0b29scy1zaGFyZWQvc3JjL3R5cGVzLmpzPzM3NGIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbmV4cG9ydCB0eXBlIFdhbGwgPSB7fFxuICAvLyBgbGlzdGVuYCByZXR1cm5zIHRoZSBcInVubGlzdGVuXCIgZnVuY3Rpb24uXG4gIGxpc3RlbjogKGZuOiBGdW5jdGlvbikgPT4gRnVuY3Rpb24sXG4gIHNlbmQ6IChldmVudDogc3RyaW5nLCBwYXlsb2FkOiBhbnksIHRyYW5zZmVyYWJsZT86IEFycmF5PGFueT4pID0+IHZvaWQsXG58fTtcblxuLy8gV0FSTklOR1xuLy8gVGhlIHZhbHVlcyBiZWxvdyBhcmUgcmVmZXJlbmNlZCBieSBDb21wb25lbnRGaWx0ZXJzICh3aGljaCBhcmUgc2F2ZWQgdmlhIGxvY2FsU3RvcmFnZSkuXG4vLyBEbyBub3QgY2hhbmdlIHRoZW0gb3IgaXQgd2lsbCBicmVhayBwcmV2aW91c2x5IHNhdmVkIHVzZXIgY3VzdG9taXphdGlvbnMuXG4vLyBJZiBuZXcgZWxlbWVudCB0eXBlcyBhcmUgYWRkZWQsIHVzZSBuZXcgbnVtYmVycyByYXRoZXIgdGhhbiByZS1vcmRlcmluZyBleGlzdGluZyBvbmVzLlxuLy9cbi8vIENoYW5naW5nIHRoZXNlIHR5cGVzIGlzIGFsc28gYSBiYWNrd2FyZHMgYnJlYWtpbmcgY2hhbmdlIGZvciB0aGUgc3RhbmRhbG9uZSBzaGVsbCxcbi8vIHNpbmNlIHRoZSBmcm9udGVuZCBhbmQgYmFja2VuZCBtdXN0IHNoYXJlIHRoZSBzYW1lIHZhbHVlcy1cbi8vIGFuZCB0aGUgYmFja2VuZCBpcyBlbWJlZGRlZCBpbiBjZXJ0YWluIGVudmlyb25tZW50cyAobGlrZSBSZWFjdCBOYXRpdmUpLlxuZXhwb3J0IGNvbnN0IEVsZW1lbnRUeXBlQ2xhc3MgPSAxO1xuZXhwb3J0IGNvbnN0IEVsZW1lbnRUeXBlQ29udGV4dCA9IDI7XG5leHBvcnQgY29uc3QgRWxlbWVudFR5cGVGdW5jdGlvbiA9IDU7XG5leHBvcnQgY29uc3QgRWxlbWVudFR5cGVGb3J3YXJkUmVmID0gNjtcbmV4cG9ydCBjb25zdCBFbGVtZW50VHlwZUhvc3RDb21wb25lbnQgPSA3O1xuZXhwb3J0IGNvbnN0IEVsZW1lbnRUeXBlTWVtbyA9IDg7XG5leHBvcnQgY29uc3QgRWxlbWVudFR5cGVPdGhlck9yVW5rbm93biA9IDk7XG5leHBvcnQgY29uc3QgRWxlbWVudFR5cGVQcm9maWxlciA9IDEwO1xuZXhwb3J0IGNvbnN0IEVsZW1lbnRUeXBlUm9vdCA9IDExO1xuZXhwb3J0IGNvbnN0IEVsZW1lbnRUeXBlU3VzcGVuc2UgPSAxMjtcbmV4cG9ydCBjb25zdCBFbGVtZW50VHlwZVN1c3BlbnNlTGlzdCA9IDEzO1xuXG4vLyBEaWZmZXJlbnQgdHlwZXMgb2YgZWxlbWVudHMgZGlzcGxheWVkIGluIHRoZSBFbGVtZW50cyB0cmVlLlxuLy8gVGhlc2UgdHlwZXMgbWF5IGJlIHVzZWQgdG8gdmlzdWFsbHkgZGlzdGluZ3Vpc2ggdHlwZXMsXG4vLyBvciB0byBlbmFibGUvZGlzYWJsZSBjZXJ0YWluIGZ1bmN0aW9uYWxpdHkuXG5leHBvcnQgdHlwZSBFbGVtZW50VHlwZSA9IDEgfCAyIHwgNSB8IDYgfCA3IHwgOCB8IDkgfCAxMCB8IDExIHwgMTIgfCAxMztcblxuLy8gV0FSTklOR1xuLy8gVGhlIHZhbHVlcyBiZWxvdyBhcmUgcmVmZXJlbmNlZCBieSBDb21wb25lbnRGaWx0ZXJzICh3aGljaCBhcmUgc2F2ZWQgdmlhIGxvY2FsU3RvcmFnZSkuXG4vLyBEbyBub3QgY2hhbmdlIHRoZW0gb3IgaXQgd2lsbCBicmVhayBwcmV2aW91c2x5IHNhdmVkIHVzZXIgY3VzdG9taXphdGlvbnMuXG4vLyBJZiBuZXcgZmlsdGVyIHR5cGVzIGFyZSBhZGRlZCwgdXNlIG5ldyBudW1iZXJzIHJhdGhlciB0aGFuIHJlLW9yZGVyaW5nIGV4aXN0aW5nIG9uZXMuXG5leHBvcnQgY29uc3QgQ29tcG9uZW50RmlsdGVyRWxlbWVudFR5cGUgPSAxO1xuZXhwb3J0IGNvbnN0IENvbXBvbmVudEZpbHRlckRpc3BsYXlOYW1lID0gMjtcbmV4cG9ydCBjb25zdCBDb21wb25lbnRGaWx0ZXJMb2NhdGlvbiA9IDM7XG5leHBvcnQgY29uc3QgQ29tcG9uZW50RmlsdGVySE9DID0gNDtcblxuZXhwb3J0IHR5cGUgQ29tcG9uZW50RmlsdGVyVHlwZSA9IDEgfCAyIHwgMyB8IDQ7XG5cbi8vIEhpZGUgYWxsIGVsZW1lbnRzIG9mIHR5cGVzIGluIHRoaXMgU2V0LlxuLy8gV2UgaGlkZSBob3N0IGNvbXBvbmVudHMgb25seSBieSBkZWZhdWx0LlxuZXhwb3J0IHR5cGUgRWxlbWVudFR5cGVDb21wb25lbnRGaWx0ZXIgPSB7fFxuICBpc0VuYWJsZWQ6IGJvb2xlYW4sXG4gIHR5cGU6IDEsXG4gIHZhbHVlOiBFbGVtZW50VHlwZSxcbnx9O1xuXG4vLyBIaWRlIGFsbCBlbGVtZW50cyB3aXRoIGRpc3BsYXlOYW1lcyBvciBwYXRocyBtYXRjaGluZyBvbmUgb3IgbW9yZSBvZiB0aGUgUmVnRXhwcyBpbiB0aGlzIFNldC5cbi8vIFBhdGggZmlsdGVycyBhcmUgb25seSB1c2VkIHdoZW4gZWxlbWVudHMgaW5jbHVkZSBkZWJ1ZyBzb3VyY2UgbG9jYXRpb24uXG5leHBvcnQgdHlwZSBSZWdFeHBDb21wb25lbnRGaWx0ZXIgPSB7fFxuICBpc0VuYWJsZWQ6IGJvb2xlYW4sXG4gIGlzVmFsaWQ6IGJvb2xlYW4sXG4gIHR5cGU6IDIgfCAzLFxuICB2YWx1ZTogc3RyaW5nLFxufH07XG5cbmV4cG9ydCB0eXBlIEJvb2xlYW5Db21wb25lbnRGaWx0ZXIgPSB7fFxuICBpc0VuYWJsZWQ6IGJvb2xlYW4sXG4gIGlzVmFsaWQ6IGJvb2xlYW4sXG4gIHR5cGU6IDQsXG58fTtcblxuZXhwb3J0IHR5cGUgQ29tcG9uZW50RmlsdGVyID1cbiAgfCBCb29sZWFuQ29tcG9uZW50RmlsdGVyXG4gIHwgRWxlbWVudFR5cGVDb21wb25lbnRGaWx0ZXJcbiAgfCBSZWdFeHBDb21wb25lbnRGaWx0ZXI7XG5cbmV4cG9ydCB0eXBlIEhvb2tOYW1lID0gc3RyaW5nIHwgbnVsbDtcbi8vIE1hcCBvZiBob29rIHNvdXJjZSAoXCI8ZmlsZW5hbWU+OjxsaW5lLW51bWJlcj46PGNvbHVtbi1udW1iZXI+XCIpIHRvIG5hbWUuXG4vLyBIb29rIHNvdXJjZSBpcyB1c2VkIGluc3RlYWQgb2YgdGhlIGhvb2sgaXRzZWxmIGJlY2F1c2UgdGhlIGxhdHRlciBpcyBub3Qgc3RhYmxlIGJldHdlZW4gZWxlbWVudCBpbnNwZWN0aW9ucy5cbi8vIFdlIHVzZSBhIE1hcCByYXRoZXIgdGhhbiBhbiBBcnJheSBiZWNhdXNlIG9mIG5lc3RlZCBob29rcyBhbmQgdHJhdmVyc2FsIG9yZGVyaW5nLlxuZXhwb3J0IHR5cGUgSG9va1NvdXJjZUxvY2F0aW9uS2V5ID0gc3RyaW5nO1xuZXhwb3J0IHR5cGUgSG9va05hbWVzID0gTWFwPEhvb2tTb3VyY2VMb2NhdGlvbktleSwgSG9va05hbWU+O1xuXG5leHBvcnQgdHlwZSBMUlVDYWNoZTxLLCBWPiA9IHt8XG4gIGdldDogKGtleTogSykgPT4gVixcbiAgaGFzOiAoa2V5OiBLKSA9PiBib29sZWFuLFxuICByZW1vdmU6IChrZXk6IEspID0+IHZvaWQsXG4gIHJlc2V0OiAoKSA9PiB2b2lkLFxuICBzZXQ6IChrZXk6IEssIHZhbHVlOiBWKSA9PiB2b2lkLFxufH07XG5cbmV4cG9ydCB0eXBlIFN0eWxlWFBsdWdpbiA9IHt8XG4gIHNvdXJjZXM6IEFycmF5PHN0cmluZz4sXG4gIHJlc29sdmVkU3R5bGVzOiBPYmplY3QsXG58fTtcblxuZXhwb3J0IHR5cGUgUGx1Z2lucyA9IHt8XG4gIHN0eWxleDogU3R5bGVYUGx1Z2luIHwgbnVsbCxcbnx9O1xuXG5leHBvcnQgY29uc3QgU3RyaWN0TW9kZSA9IDE7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7Ozs7QUFlQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUF3REEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/types.js\n");

/***/ }),

/***/ "../react-devtools-shared/src/utils.js":
/*!*********************************************!*\
  !*** ../react-devtools-shared/src/utils.js ***!
  \*********************************************/
/*! exports provided: alphaSortKeys, getAllEnumerableKeys, getDisplayName, getUID, utfDecodeString, utfEncodeString, printOperationsArray, getDefaultComponentFilters, getSavedComponentFilters, saveComponentFilters, getAppendComponentStack, setAppendComponentStack, getBreakOnConsoleErrors, setBreakOnConsoleErrors, getHideConsoleLogsInStrictMode, sethideConsoleLogsInStrictMode, getShowInlineWarningsAndErrors, setShowInlineWarningsAndErrors, getDefaultOpenInEditorURL, getOpenInEditorURL, separateDisplayNameAndHOCs, shallowDiffers, getInObject, deletePathInObject, renamePathInObject, setInObject, getDataType, getDisplayNameForReactElement, formatDataForPreview */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"alphaSortKeys\", function() { return alphaSortKeys; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getAllEnumerableKeys\", function() { return getAllEnumerableKeys; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getDisplayName\", function() { return getDisplayName; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getUID\", function() { return getUID; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"utfDecodeString\", function() { return utfDecodeString; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"utfEncodeString\", function() { return utfEncodeString; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"printOperationsArray\", function() { return printOperationsArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getDefaultComponentFilters\", function() { return getDefaultComponentFilters; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getSavedComponentFilters\", function() { return getSavedComponentFilters; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"saveComponentFilters\", function() { return saveComponentFilters; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getAppendComponentStack\", function() { return getAppendComponentStack; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setAppendComponentStack\", function() { return setAppendComponentStack; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getBreakOnConsoleErrors\", function() { return getBreakOnConsoleErrors; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setBreakOnConsoleErrors\", function() { return setBreakOnConsoleErrors; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getHideConsoleLogsInStrictMode\", function() { return getHideConsoleLogsInStrictMode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sethideConsoleLogsInStrictMode\", function() { return sethideConsoleLogsInStrictMode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getShowInlineWarningsAndErrors\", function() { return getShowInlineWarningsAndErrors; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setShowInlineWarningsAndErrors\", function() { return setShowInlineWarningsAndErrors; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getDefaultOpenInEditorURL\", function() { return getDefaultOpenInEditorURL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getOpenInEditorURL\", function() { return getOpenInEditorURL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"separateDisplayNameAndHOCs\", function() { return separateDisplayNameAndHOCs; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"shallowDiffers\", function() { return shallowDiffers; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getInObject\", function() { return getInObject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"deletePathInObject\", function() { return deletePathInObject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"renamePathInObject\", function() { return renamePathInObject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setInObject\", function() { return setInObject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getDataType\", function() { return getDataType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getDisplayNameForReactElement\", function() { return getDisplayNameForReactElement; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"formatDataForPreview\", function() { return formatDataForPreview; });\n/* harmony import */ var lru_cache__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lru-cache */ \"../../node_modules/lru-cache/index.js\");\n/* harmony import */ var lru_cache__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lru_cache__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_is__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-is */ \"../../build/oss-experimental/react-is/index.js\");\n/* harmony import */ var react_is__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_is__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! shared/ReactSymbols */ \"../shared/ReactSymbols.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants */ \"../react-devtools-shared/src/constants.js\");\n/* harmony import */ var react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-devtools-shared/src/types */ \"../react-devtools-shared/src/types.js\");\n/* harmony import */ var _storage__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./storage */ \"../react-devtools-shared/src/storage.js\");\n/* harmony import */ var _hydration__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./hydration */ \"../react-devtools-shared/src/hydration.js\");\n/* harmony import */ var _isArray__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./isArray */ \"../react-devtools-shared/src/isArray.js\");\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\n\n\n\n\n\n\n\n\n\nconst cachedDisplayNames = new WeakMap(); // On large trees, encoding takes significant time.\n// Try to reuse the already encoded strings.\n\nconst encodedStringCache = new lru_cache__WEBPACK_IMPORTED_MODULE_0___default.a({\n  max: 1000\n});\nfunction alphaSortKeys(a, b) {\n  if (a.toString() > b.toString()) {\n    return 1;\n  } else if (b.toString() > a.toString()) {\n    return -1;\n  } else {\n    return 0;\n  }\n}\nfunction getAllEnumerableKeys(obj) {\n  const keys = new Set();\n  let current = obj;\n\n  while (current != null) {\n    const currentKeys = [...Object.keys(current), ...Object.getOwnPropertySymbols(current)];\n    const descriptors = Object.getOwnPropertyDescriptors(current);\n    currentKeys.forEach(key => {\n      // $FlowFixMe: key can be a Symbol https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\n      if (descriptors[key].enumerable) {\n        keys.add(key);\n      }\n    });\n    current = Object.getPrototypeOf(current);\n  }\n\n  return keys;\n}\nfunction getDisplayName(type, fallbackName = 'Anonymous') {\n  const nameFromCache = cachedDisplayNames.get(type);\n\n  if (nameFromCache != null) {\n    return nameFromCache;\n  }\n\n  let displayName = fallbackName; // The displayName property is not guaranteed to be a string.\n  // It's only safe to use for our purposes if it's a string.\n  // github.com/facebook/react-devtools/issues/803\n\n  if (typeof type.displayName === 'string') {\n    displayName = type.displayName;\n  } else if (typeof type.name === 'string' && type.name !== '') {\n    displayName = type.name;\n  }\n\n  cachedDisplayNames.set(type, displayName);\n  return displayName;\n}\nlet uidCounter = 0;\nfunction getUID() {\n  return ++uidCounter;\n}\nfunction utfDecodeString(array) {\n  // Avoid spreading the array (e.g. String.fromCodePoint(...array))\n  // Functions arguments are first placed on the stack before the function is called\n  // which throws a RangeError for large arrays.\n  // See github.com/facebook/react/issues/22293\n  let string = '';\n\n  for (let i = 0; i < array.length; i++) {\n    const char = array[i];\n    string += String.fromCodePoint(char);\n  }\n\n  return string;\n}\n\nfunction surrogatePairToCodePoint(charCode1, charCode2) {\n  return ((charCode1 & 0x3ff) << 10) + (charCode2 & 0x3ff) + 0x10000;\n} // Credit for this encoding approach goes to Tim Down:\n// https://stackoverflow.com/questions/4877326/how-can-i-tell-if-a-string-contains-multibyte-characters-in-javascript\n\n\nfunction utfEncodeString(string) {\n  const cached = encodedStringCache.get(string);\n\n  if (cached !== undefined) {\n    return cached;\n  }\n\n  const encoded = [];\n  let i = 0;\n  let charCode;\n\n  while (i < string.length) {\n    charCode = string.charCodeAt(i); // Handle multibyte unicode characters (like emoji).\n\n    if ((charCode & 0xf800) === 0xd800) {\n      encoded.push(surrogatePairToCodePoint(charCode, string.charCodeAt(++i)));\n    } else {\n      encoded.push(charCode);\n    }\n\n    ++i;\n  }\n\n  encodedStringCache.set(string, encoded);\n  return encoded;\n}\nfunction printOperationsArray(operations) {\n  // The first two values are always rendererID and rootID\n  const rendererID = operations[0];\n  const rootID = operations[1];\n  const logs = [`operations for renderer:${rendererID} and root:${rootID}`];\n  let i = 2; // Reassemble the string table.\n\n  const stringTable = [null // ID = 0 corresponds to the null string.\n  ];\n  const stringTableSize = operations[i++];\n  const stringTableEnd = i + stringTableSize;\n\n  while (i < stringTableEnd) {\n    const nextLength = operations[i++];\n    const nextString = utfDecodeString(operations.slice(i, i + nextLength));\n    stringTable.push(nextString);\n    i += nextLength;\n  }\n\n  while (i < operations.length) {\n    const operation = operations[i];\n\n    switch (operation) {\n      case _constants__WEBPACK_IMPORTED_MODULE_3__[\"TREE_OPERATION_ADD\"]:\n        {\n          const id = operations[i + 1];\n          const type = operations[i + 2];\n          i += 3;\n\n          if (type === react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_4__[\"ElementTypeRoot\"]) {\n            logs.push(`Add new root node ${id}`);\n            i++; // isStrictModeCompliant\n\n            i++; // supportsProfiling\n\n            i++; // supportsStrictMode\n\n            i++; // hasOwnerMetadata\n          } else {\n            const parentID = operations[i];\n            i++;\n            i++; // ownerID\n\n            const displayNameStringID = operations[i];\n            const displayName = stringTable[displayNameStringID];\n            i++;\n            i++; // key\n\n            logs.push(`Add node ${id} (${displayName || 'null'}) as child of ${parentID}`);\n          }\n\n          break;\n        }\n\n      case _constants__WEBPACK_IMPORTED_MODULE_3__[\"TREE_OPERATION_REMOVE\"]:\n        {\n          const removeLength = operations[i + 1];\n          i += 2;\n\n          for (let removeIndex = 0; removeIndex < removeLength; removeIndex++) {\n            const id = operations[i];\n            i += 1;\n            logs.push(`Remove node ${id}`);\n          }\n\n          break;\n        }\n\n      case _constants__WEBPACK_IMPORTED_MODULE_3__[\"TREE_OPERATION_REMOVE_ROOT\"]:\n        {\n          i += 1;\n          logs.push(`Remove root ${rootID}`);\n          break;\n        }\n\n      case _constants__WEBPACK_IMPORTED_MODULE_3__[\"TREE_OPERATION_SET_SUBTREE_MODE\"]:\n        {\n          const id = operations[i + 1];\n          const mode = operations[i + 1];\n          i += 3;\n          logs.push(`Mode ${mode} set for subtree with root ${id}`);\n          break;\n        }\n\n      case _constants__WEBPACK_IMPORTED_MODULE_3__[\"TREE_OPERATION_REORDER_CHILDREN\"]:\n        {\n          const id = operations[i + 1];\n          const numChildren = operations[i + 2];\n          i += 3;\n          const children = operations.slice(i, i + numChildren);\n          i += numChildren;\n          logs.push(`Re-order node ${id} children ${children.join(',')}`);\n          break;\n        }\n\n      case _constants__WEBPACK_IMPORTED_MODULE_3__[\"TREE_OPERATION_UPDATE_TREE_BASE_DURATION\"]:\n        // Base duration updates are only sent while profiling is in progress.\n        // We can ignore them at this point.\n        // The profiler UI uses them lazily in order to generate the tree.\n        i += 3;\n        break;\n\n      case _constants__WEBPACK_IMPORTED_MODULE_3__[\"TREE_OPERATION_UPDATE_ERRORS_OR_WARNINGS\"]:\n        const id = operations[i + 1];\n        const numErrors = operations[i + 2];\n        const numWarnings = operations[i + 3];\n        i += 4;\n        logs.push(`Node ${id} has ${numErrors} errors and ${numWarnings} warnings`);\n        break;\n\n      default:\n        throw Error(`Unsupported Bridge operation \"${operation}\"`);\n    }\n  }\n\n  console.log(logs.join('\\n  '));\n}\nfunction getDefaultComponentFilters() {\n  return [{\n    type: react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_4__[\"ComponentFilterElementType\"],\n    value: react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_4__[\"ElementTypeHostComponent\"],\n    isEnabled: true\n  }];\n}\nfunction getSavedComponentFilters() {\n  try {\n    const raw = Object(_storage__WEBPACK_IMPORTED_MODULE_5__[\"localStorageGetItem\"])(_constants__WEBPACK_IMPORTED_MODULE_3__[\"LOCAL_STORAGE_FILTER_PREFERENCES_KEY\"]);\n\n    if (raw != null) {\n      return JSON.parse(raw);\n    }\n  } catch (error) {}\n\n  return getDefaultComponentFilters();\n}\nfunction saveComponentFilters(componentFilters) {\n  Object(_storage__WEBPACK_IMPORTED_MODULE_5__[\"localStorageSetItem\"])(_constants__WEBPACK_IMPORTED_MODULE_3__[\"LOCAL_STORAGE_FILTER_PREFERENCES_KEY\"], JSON.stringify(componentFilters));\n}\nfunction getAppendComponentStack() {\n  try {\n    const raw = Object(_storage__WEBPACK_IMPORTED_MODULE_5__[\"localStorageGetItem\"])(_constants__WEBPACK_IMPORTED_MODULE_3__[\"LOCAL_STORAGE_SHOULD_PATCH_CONSOLE_KEY\"]);\n\n    if (raw != null) {\n      return JSON.parse(raw);\n    }\n  } catch (error) {}\n\n  return true;\n}\nfunction setAppendComponentStack(value) {\n  Object(_storage__WEBPACK_IMPORTED_MODULE_5__[\"localStorageSetItem\"])(_constants__WEBPACK_IMPORTED_MODULE_3__[\"LOCAL_STORAGE_SHOULD_PATCH_CONSOLE_KEY\"], JSON.stringify(value));\n}\nfunction getBreakOnConsoleErrors() {\n  try {\n    const raw = Object(_storage__WEBPACK_IMPORTED_MODULE_5__[\"localStorageGetItem\"])(_constants__WEBPACK_IMPORTED_MODULE_3__[\"LOCAL_STORAGE_SHOULD_BREAK_ON_CONSOLE_ERRORS\"]);\n\n    if (raw != null) {\n      return JSON.parse(raw);\n    }\n  } catch (error) {}\n\n  return false;\n}\nfunction setBreakOnConsoleErrors(value) {\n  Object(_storage__WEBPACK_IMPORTED_MODULE_5__[\"localStorageSetItem\"])(_constants__WEBPACK_IMPORTED_MODULE_3__[\"LOCAL_STORAGE_SHOULD_BREAK_ON_CONSOLE_ERRORS\"], JSON.stringify(value));\n}\nfunction getHideConsoleLogsInStrictMode() {\n  try {\n    const raw = Object(_storage__WEBPACK_IMPORTED_MODULE_5__[\"localStorageGetItem\"])(_constants__WEBPACK_IMPORTED_MODULE_3__[\"LOCAL_STORAGE_HIDE_CONSOLE_LOGS_IN_STRICT_MODE\"]);\n\n    if (raw != null) {\n      return JSON.parse(raw);\n    }\n  } catch (error) {}\n\n  return false;\n}\nfunction sethideConsoleLogsInStrictMode(value) {\n  Object(_storage__WEBPACK_IMPORTED_MODULE_5__[\"localStorageSetItem\"])(_constants__WEBPACK_IMPORTED_MODULE_3__[\"LOCAL_STORAGE_HIDE_CONSOLE_LOGS_IN_STRICT_MODE\"], JSON.stringify(value));\n}\nfunction getShowInlineWarningsAndErrors() {\n  try {\n    const raw = Object(_storage__WEBPACK_IMPORTED_MODULE_5__[\"localStorageGetItem\"])(_constants__WEBPACK_IMPORTED_MODULE_3__[\"LOCAL_STORAGE_SHOW_INLINE_WARNINGS_AND_ERRORS_KEY\"]);\n\n    if (raw != null) {\n      return JSON.parse(raw);\n    }\n  } catch (error) {}\n\n  return true;\n}\nfunction setShowInlineWarningsAndErrors(value) {\n  Object(_storage__WEBPACK_IMPORTED_MODULE_5__[\"localStorageSetItem\"])(_constants__WEBPACK_IMPORTED_MODULE_3__[\"LOCAL_STORAGE_SHOW_INLINE_WARNINGS_AND_ERRORS_KEY\"], JSON.stringify(value));\n}\nfunction getDefaultOpenInEditorURL() {\n  return typeof null === 'string' ? null : '';\n}\nfunction getOpenInEditorURL() {\n  try {\n    const raw = Object(_storage__WEBPACK_IMPORTED_MODULE_5__[\"localStorageGetItem\"])(_constants__WEBPACK_IMPORTED_MODULE_3__[\"LOCAL_STORAGE_OPEN_IN_EDITOR_URL\"]);\n\n    if (raw != null) {\n      return JSON.parse(raw);\n    }\n  } catch (error) {}\n\n  return getDefaultOpenInEditorURL();\n}\nfunction separateDisplayNameAndHOCs(displayName, type) {\n  if (displayName === null) {\n    return [null, null];\n  }\n\n  let hocDisplayNames = null;\n\n  switch (type) {\n    case react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_4__[\"ElementTypeClass\"]:\n    case react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_4__[\"ElementTypeForwardRef\"]:\n    case react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_4__[\"ElementTypeFunction\"]:\n    case react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_4__[\"ElementTypeMemo\"]:\n      if (displayName.indexOf('(') >= 0) {\n        const matches = displayName.match(/[^()]+/g);\n\n        if (matches != null) {\n          displayName = matches.pop();\n          hocDisplayNames = matches;\n        }\n      }\n\n      break;\n\n    default:\n      break;\n  }\n\n  if (type === react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_4__[\"ElementTypeMemo\"]) {\n    if (hocDisplayNames === null) {\n      hocDisplayNames = ['Memo'];\n    } else {\n      hocDisplayNames.unshift('Memo');\n    }\n  } else if (type === react_devtools_shared_src_types__WEBPACK_IMPORTED_MODULE_4__[\"ElementTypeForwardRef\"]) {\n    if (hocDisplayNames === null) {\n      hocDisplayNames = ['ForwardRef'];\n    } else {\n      hocDisplayNames.unshift('ForwardRef');\n    }\n  }\n\n  return [displayName, hocDisplayNames];\n} // Pulled from react-compat\n// https://github.com/developit/preact-compat/blob/7c5de00e7c85e2ffd011bf3af02899b63f699d3a/src/index.js#L349\n\nfunction shallowDiffers(prev, next) {\n  for (const attribute in prev) {\n    if (!(attribute in next)) {\n      return true;\n    }\n  }\n\n  for (const attribute in next) {\n    if (prev[attribute] !== next[attribute]) {\n      return true;\n    }\n  }\n\n  return false;\n}\nfunction getInObject(object, path) {\n  return path.reduce((reduced, attr) => {\n    if (reduced) {\n      if (hasOwnProperty.call(reduced, attr)) {\n        return reduced[attr];\n      }\n\n      if (typeof reduced[Symbol.iterator] === 'function') {\n        // Convert iterable to array and return array[index]\n        //\n        // TRICKY\n        // Don't use [...spread] syntax for this purpose.\n        // This project uses @babel/plugin-transform-spread in \"loose\" mode which only works with Array values.\n        // Other types (e.g. typed arrays, Sets) will not spread correctly.\n        return Array.from(reduced)[attr];\n      }\n    }\n\n    return null;\n  }, object);\n}\nfunction deletePathInObject(object, path) {\n  const length = path.length;\n  const last = path[length - 1];\n\n  if (object != null) {\n    const parent = getInObject(object, path.slice(0, length - 1));\n\n    if (parent) {\n      if (Object(_isArray__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(parent)) {\n        parent.splice(last, 1);\n      } else {\n        delete parent[last];\n      }\n    }\n  }\n}\nfunction renamePathInObject(object, oldPath, newPath) {\n  const length = oldPath.length;\n\n  if (object != null) {\n    const parent = getInObject(object, oldPath.slice(0, length - 1));\n\n    if (parent) {\n      const lastOld = oldPath[length - 1];\n      const lastNew = newPath[length - 1];\n      parent[lastNew] = parent[lastOld];\n\n      if (Object(_isArray__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(parent)) {\n        parent.splice(lastOld, 1);\n      } else {\n        delete parent[lastOld];\n      }\n    }\n  }\n}\nfunction setInObject(object, path, value) {\n  const length = path.length;\n  const last = path[length - 1];\n\n  if (object != null) {\n    const parent = getInObject(object, path.slice(0, length - 1));\n\n    if (parent) {\n      parent[last] = value;\n    }\n  }\n}\n\n/**\n * Get a enhanced/artificial type string based on the object instance\n */\nfunction getDataType(data) {\n  if (data === null) {\n    return 'null';\n  } else if (data === undefined) {\n    return 'undefined';\n  }\n\n  if (Object(react_is__WEBPACK_IMPORTED_MODULE_1__[\"isElement\"])(data)) {\n    return 'react_element';\n  }\n\n  if (typeof HTMLElement !== 'undefined' && data instanceof HTMLElement) {\n    return 'html_element';\n  }\n\n  const type = typeof data;\n\n  switch (type) {\n    case 'bigint':\n      return 'bigint';\n\n    case 'boolean':\n      return 'boolean';\n\n    case 'function':\n      return 'function';\n\n    case 'number':\n      if (Number.isNaN(data)) {\n        return 'nan';\n      } else if (!Number.isFinite(data)) {\n        return 'infinity';\n      } else {\n        return 'number';\n      }\n\n    case 'object':\n      if (Object(_isArray__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(data)) {\n        return 'array';\n      } else if (ArrayBuffer.isView(data)) {\n        return hasOwnProperty.call(data.constructor, 'BYTES_PER_ELEMENT') ? 'typed_array' : 'data_view';\n      } else if (data.constructor && data.constructor.name === 'ArrayBuffer') {\n        // HACK This ArrayBuffer check is gross; is there a better way?\n        // We could try to create a new DataView with the value.\n        // If it doesn't error, we know it's an ArrayBuffer,\n        // but this seems kind of awkward and expensive.\n        return 'array_buffer';\n      } else if (typeof data[Symbol.iterator] === 'function') {\n        const iterator = data[Symbol.iterator]();\n\n        if (!iterator) {// Proxies might break assumptoins about iterators.\n          // See github.com/facebook/react/issues/21654\n        } else {\n          return iterator === data ? 'opaque_iterator' : 'iterator';\n        }\n      } else if (data.constructor && data.constructor.name === 'RegExp') {\n        return 'regexp';\n      } else {\n        const toStringValue = Object.prototype.toString.call(data);\n\n        if (toStringValue === '[object Date]') {\n          return 'date';\n        } else if (toStringValue === '[object HTMLAllCollection]') {\n          return 'html_all_collection';\n        }\n      }\n\n      return 'object';\n\n    case 'string':\n      return 'string';\n\n    case 'symbol':\n      return 'symbol';\n\n    case 'undefined':\n      if (Object.prototype.toString.call(data) === '[object HTMLAllCollection]') {\n        return 'html_all_collection';\n      }\n\n      return 'undefined';\n\n    default:\n      return 'unknown';\n  }\n}\nfunction getDisplayNameForReactElement(element) {\n  const elementType = Object(react_is__WEBPACK_IMPORTED_MODULE_1__[\"typeOf\"])(element);\n\n  switch (elementType) {\n    case react_is__WEBPACK_IMPORTED_MODULE_1__[\"ContextConsumer\"]:\n      return 'ContextConsumer';\n\n    case react_is__WEBPACK_IMPORTED_MODULE_1__[\"ContextProvider\"]:\n      return 'ContextProvider';\n\n    case react_is__WEBPACK_IMPORTED_MODULE_1__[\"ForwardRef\"]:\n      return 'ForwardRef';\n\n    case react_is__WEBPACK_IMPORTED_MODULE_1__[\"Fragment\"]:\n      return 'Fragment';\n\n    case react_is__WEBPACK_IMPORTED_MODULE_1__[\"Lazy\"]:\n      return 'Lazy';\n\n    case react_is__WEBPACK_IMPORTED_MODULE_1__[\"Memo\"]:\n      return 'Memo';\n\n    case react_is__WEBPACK_IMPORTED_MODULE_1__[\"Portal\"]:\n      return 'Portal';\n\n    case react_is__WEBPACK_IMPORTED_MODULE_1__[\"Profiler\"]:\n      return 'Profiler';\n\n    case react_is__WEBPACK_IMPORTED_MODULE_1__[\"StrictMode\"]:\n      return 'StrictMode';\n\n    case react_is__WEBPACK_IMPORTED_MODULE_1__[\"Suspense\"]:\n      return 'Suspense';\n\n    case shared_ReactSymbols__WEBPACK_IMPORTED_MODULE_2__[\"REACT_SUSPENSE_LIST_TYPE\"]:\n      return 'SuspenseList';\n\n    default:\n      const {\n        type\n      } = element;\n\n      if (typeof type === 'string') {\n        return type;\n      } else if (typeof type === 'function') {\n        return getDisplayName(type, 'Anonymous');\n      } else if (type != null) {\n        return 'NotImplementedInDevtools';\n      } else {\n        return 'Element';\n      }\n\n  }\n}\nconst MAX_PREVIEW_STRING_LENGTH = 50;\n\nfunction truncateForDisplay(string, length = MAX_PREVIEW_STRING_LENGTH) {\n  if (string.length > length) {\n    return string.substr(0, length) + '…';\n  } else {\n    return string;\n  }\n} // Attempts to mimic Chrome's inline preview for values.\n// For example, the following value...\n//   {\n//      foo: 123,\n//      bar: \"abc\",\n//      baz: [true, false],\n//      qux: { ab: 1, cd: 2 }\n//   };\n//\n// Would show a preview of...\n//   {foo: 123, bar: \"abc\", baz: Array(2), qux: {…}}\n//\n// And the following value...\n//   [\n//     123,\n//     \"abc\",\n//     [true, false],\n//     { foo: 123, bar: \"abc\" }\n//   ];\n//\n// Would show a preview of...\n//   [123, \"abc\", Array(2), {…}]\n\n\nfunction formatDataForPreview(data, showFormattedValue) {\n  if (data != null && hasOwnProperty.call(data, _hydration__WEBPACK_IMPORTED_MODULE_6__[\"meta\"].type)) {\n    return showFormattedValue ? data[_hydration__WEBPACK_IMPORTED_MODULE_6__[\"meta\"].preview_long] : data[_hydration__WEBPACK_IMPORTED_MODULE_6__[\"meta\"].preview_short];\n  }\n\n  const type = getDataType(data);\n\n  switch (type) {\n    case 'html_element':\n      return `<${truncateForDisplay(data.tagName.toLowerCase())} />`;\n\n    case 'function':\n      return truncateForDisplay(`ƒ ${typeof data.name === 'function' ? '' : data.name}() {}`);\n\n    case 'string':\n      return `\"${data}\"`;\n\n    case 'bigint':\n      return truncateForDisplay(data.toString() + 'n');\n\n    case 'regexp':\n      return truncateForDisplay(data.toString());\n\n    case 'symbol':\n      return truncateForDisplay(data.toString());\n\n    case 'react_element':\n      return `<${truncateForDisplay(getDisplayNameForReactElement(data) || 'Unknown')} />`;\n\n    case 'array_buffer':\n      return `ArrayBuffer(${data.byteLength})`;\n\n    case 'data_view':\n      return `DataView(${data.buffer.byteLength})`;\n\n    case 'array':\n      if (showFormattedValue) {\n        let formatted = '';\n\n        for (let i = 0; i < data.length; i++) {\n          if (i > 0) {\n            formatted += ', ';\n          }\n\n          formatted += formatDataForPreview(data[i], false);\n\n          if (formatted.length > MAX_PREVIEW_STRING_LENGTH) {\n            // Prevent doing a lot of unnecessary iteration...\n            break;\n          }\n        }\n\n        return `[${truncateForDisplay(formatted)}]`;\n      } else {\n        const length = hasOwnProperty.call(data, _hydration__WEBPACK_IMPORTED_MODULE_6__[\"meta\"].size) ? data[_hydration__WEBPACK_IMPORTED_MODULE_6__[\"meta\"].size] : data.length;\n        return `Array(${length})`;\n      }\n\n    case 'typed_array':\n      const shortName = `${data.constructor.name}(${data.length})`;\n\n      if (showFormattedValue) {\n        let formatted = '';\n\n        for (let i = 0; i < data.length; i++) {\n          if (i > 0) {\n            formatted += ', ';\n          }\n\n          formatted += data[i];\n\n          if (formatted.length > MAX_PREVIEW_STRING_LENGTH) {\n            // Prevent doing a lot of unnecessary iteration...\n            break;\n          }\n        }\n\n        return `${shortName} [${truncateForDisplay(formatted)}]`;\n      } else {\n        return shortName;\n      }\n\n    case 'iterator':\n      const name = data.constructor.name;\n\n      if (showFormattedValue) {\n        // TRICKY\n        // Don't use [...spread] syntax for this purpose.\n        // This project uses @babel/plugin-transform-spread in \"loose\" mode which only works with Array values.\n        // Other types (e.g. typed arrays, Sets) will not spread correctly.\n        const array = Array.from(data);\n        let formatted = '';\n\n        for (let i = 0; i < array.length; i++) {\n          const entryOrEntries = array[i];\n\n          if (i > 0) {\n            formatted += ', ';\n          } // TRICKY\n          // Browsers display Maps and Sets differently.\n          // To mimic their behavior, detect if we've been given an entries tuple.\n          //   Map(2) {\"abc\" => 123, \"def\" => 123}\n          //   Set(2) {\"abc\", 123}\n\n\n          if (Object(_isArray__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(entryOrEntries)) {\n            const key = formatDataForPreview(entryOrEntries[0], true);\n            const value = formatDataForPreview(entryOrEntries[1], false);\n            formatted += `${key} => ${value}`;\n          } else {\n            formatted += formatDataForPreview(entryOrEntries, false);\n          }\n\n          if (formatted.length > MAX_PREVIEW_STRING_LENGTH) {\n            // Prevent doing a lot of unnecessary iteration...\n            break;\n          }\n        }\n\n        return `${name}(${data.size}) {${truncateForDisplay(formatted)}}`;\n      } else {\n        return `${name}(${data.size})`;\n      }\n\n    case 'opaque_iterator':\n      {\n        return data[Symbol.toStringTag];\n      }\n\n    case 'date':\n      return data.toString();\n\n    case 'object':\n      if (showFormattedValue) {\n        const keys = Array.from(getAllEnumerableKeys(data)).sort(alphaSortKeys);\n        let formatted = '';\n\n        for (let i = 0; i < keys.length; i++) {\n          const key = keys[i];\n\n          if (i > 0) {\n            formatted += ', ';\n          }\n\n          formatted += `${key.toString()}: ${formatDataForPreview(data[key], false)}`;\n\n          if (formatted.length > MAX_PREVIEW_STRING_LENGTH) {\n            // Prevent doing a lot of unnecessary iteration...\n            break;\n          }\n        }\n\n        return `{${truncateForDisplay(formatted)}}`;\n      } else {\n        return '{…}';\n      }\n\n    case 'boolean':\n    case 'number':\n    case 'infinity':\n    case 'nan':\n    case 'null':\n    case 'undefined':\n      return data;\n\n    default:\n      try {\n        return truncateForDisplay(String(data));\n      } catch (error) {\n        return 'unserializable';\n      }\n\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../react-devtools-shared/src/utils.js\n");

/***/ }),

/***/ "../react-reconciler/src/ReactWorkTags.js":
/*!************************************************!*\
  !*** ../react-reconciler/src/ReactWorkTags.js ***!
  \************************************************/
/*! exports provided: FunctionComponent, ClassComponent, IndeterminateComponent, HostRoot, HostPortal, HostComponent, HostText, Fragment, Mode, ContextConsumer, ContextProvider, ForwardRef, Profiler, SuspenseComponent, MemoComponent, SimpleMemoComponent, LazyComponent, IncompleteClassComponent, DehydratedFragment, SuspenseListComponent, ScopeComponent, OffscreenComponent, LegacyHiddenComponent, CacheComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FunctionComponent\", function() { return FunctionComponent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ClassComponent\", function() { return ClassComponent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IndeterminateComponent\", function() { return IndeterminateComponent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HostRoot\", function() { return HostRoot; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HostPortal\", function() { return HostPortal; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HostComponent\", function() { return HostComponent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HostText\", function() { return HostText; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Fragment\", function() { return Fragment; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Mode\", function() { return Mode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ContextConsumer\", function() { return ContextConsumer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ContextProvider\", function() { return ContextProvider; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ForwardRef\", function() { return ForwardRef; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Profiler\", function() { return Profiler; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SuspenseComponent\", function() { return SuspenseComponent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MemoComponent\", function() { return MemoComponent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SimpleMemoComponent\", function() { return SimpleMemoComponent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LazyComponent\", function() { return LazyComponent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IncompleteClassComponent\", function() { return IncompleteClassComponent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DehydratedFragment\", function() { return DehydratedFragment; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SuspenseListComponent\", function() { return SuspenseListComponent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ScopeComponent\", function() { return ScopeComponent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"OffscreenComponent\", function() { return OffscreenComponent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LegacyHiddenComponent\", function() { return LegacyHiddenComponent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CacheComponent\", function() { return CacheComponent; });\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nconst FunctionComponent = 0;\nconst ClassComponent = 1;\nconst IndeterminateComponent = 2; // Before we know whether it is function or class\n\nconst HostRoot = 3; // Root of a host tree. Could be nested inside another node.\n\nconst HostPortal = 4; // A subtree. Could be an entry point to a different renderer.\n\nconst HostComponent = 5;\nconst HostText = 6;\nconst Fragment = 7;\nconst Mode = 8;\nconst ContextConsumer = 9;\nconst ContextProvider = 10;\nconst ForwardRef = 11;\nconst Profiler = 12;\nconst SuspenseComponent = 13;\nconst MemoComponent = 14;\nconst SimpleMemoComponent = 15;\nconst LazyComponent = 16;\nconst IncompleteClassComponent = 17;\nconst DehydratedFragment = 18;\nconst SuspenseListComponent = 19;\nconst ScopeComponent = 21;\nconst OffscreenComponent = 22;\nconst LegacyHiddenComponent = 23;\nconst CacheComponent = 24;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vcmVhY3QtcmVjb25jaWxlci9zcmMvUmVhY3RXb3JrVGFncy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9yZWFjdC1yZWNvbmNpbGVyL3NyYy9SZWFjdFdvcmtUYWdzLmpzPzMzZTgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbmV4cG9ydCB0eXBlIFdvcmtUYWcgPVxuICB8IDBcbiAgfCAxXG4gIHwgMlxuICB8IDNcbiAgfCA0XG4gIHwgNVxuICB8IDZcbiAgfCA3XG4gIHwgOFxuICB8IDlcbiAgfCAxMFxuICB8IDExXG4gIHwgMTJcbiAgfCAxM1xuICB8IDE0XG4gIHwgMTVcbiAgfCAxNlxuICB8IDE3XG4gIHwgMThcbiAgfCAxOVxuICB8IDIwXG4gIHwgMjFcbiAgfCAyMlxuICB8IDIzXG4gIHwgMjQ7XG5cbmV4cG9ydCBjb25zdCBGdW5jdGlvbkNvbXBvbmVudCA9IDA7XG5leHBvcnQgY29uc3QgQ2xhc3NDb21wb25lbnQgPSAxO1xuZXhwb3J0IGNvbnN0IEluZGV0ZXJtaW5hdGVDb21wb25lbnQgPSAyOyAvLyBCZWZvcmUgd2Uga25vdyB3aGV0aGVyIGl0IGlzIGZ1bmN0aW9uIG9yIGNsYXNzXG5leHBvcnQgY29uc3QgSG9zdFJvb3QgPSAzOyAvLyBSb290IG9mIGEgaG9zdCB0cmVlLiBDb3VsZCBiZSBuZXN0ZWQgaW5zaWRlIGFub3RoZXIgbm9kZS5cbmV4cG9ydCBjb25zdCBIb3N0UG9ydGFsID0gNDsgLy8gQSBzdWJ0cmVlLiBDb3VsZCBiZSBhbiBlbnRyeSBwb2ludCB0byBhIGRpZmZlcmVudCByZW5kZXJlci5cbmV4cG9ydCBjb25zdCBIb3N0Q29tcG9uZW50ID0gNTtcbmV4cG9ydCBjb25zdCBIb3N0VGV4dCA9IDY7XG5leHBvcnQgY29uc3QgRnJhZ21lbnQgPSA3O1xuZXhwb3J0IGNvbnN0IE1vZGUgPSA4O1xuZXhwb3J0IGNvbnN0IENvbnRleHRDb25zdW1lciA9IDk7XG5leHBvcnQgY29uc3QgQ29udGV4dFByb3ZpZGVyID0gMTA7XG5leHBvcnQgY29uc3QgRm9yd2FyZFJlZiA9IDExO1xuZXhwb3J0IGNvbnN0IFByb2ZpbGVyID0gMTI7XG5leHBvcnQgY29uc3QgU3VzcGVuc2VDb21wb25lbnQgPSAxMztcbmV4cG9ydCBjb25zdCBNZW1vQ29tcG9uZW50ID0gMTQ7XG5leHBvcnQgY29uc3QgU2ltcGxlTWVtb0NvbXBvbmVudCA9IDE1O1xuZXhwb3J0IGNvbnN0IExhenlDb21wb25lbnQgPSAxNjtcbmV4cG9ydCBjb25zdCBJbmNvbXBsZXRlQ2xhc3NDb21wb25lbnQgPSAxNztcbmV4cG9ydCBjb25zdCBEZWh5ZHJhdGVkRnJhZ21lbnQgPSAxODtcbmV4cG9ydCBjb25zdCBTdXNwZW5zZUxpc3RDb21wb25lbnQgPSAxOTtcbmV4cG9ydCBjb25zdCBTY29wZUNvbXBvbmVudCA9IDIxO1xuZXhwb3J0IGNvbnN0IE9mZnNjcmVlbkNvbXBvbmVudCA9IDIyO1xuZXhwb3J0IGNvbnN0IExlZ2FjeUhpZGRlbkNvbXBvbmVudCA9IDIzO1xuZXhwb3J0IGNvbnN0IENhY2hlQ29tcG9uZW50ID0gMjQ7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7Ozs7O0FBb0NBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../react-reconciler/src/ReactWorkTags.js\n");

/***/ }),

/***/ "../shared/ReactSymbols.js":
/*!*********************************!*\
  !*** ../shared/ReactSymbols.js ***!
  \*********************************/
/*! exports provided: REACT_ELEMENT_TYPE, REACT_PORTAL_TYPE, REACT_FRAGMENT_TYPE, REACT_STRICT_MODE_TYPE, REACT_PROFILER_TYPE, REACT_PROVIDER_TYPE, REACT_CONTEXT_TYPE, REACT_FORWARD_REF_TYPE, REACT_SUSPENSE_TYPE, REACT_SUSPENSE_LIST_TYPE, REACT_MEMO_TYPE, REACT_LAZY_TYPE, REACT_SCOPE_TYPE, REACT_DEBUG_TRACING_MODE_TYPE, REACT_OFFSCREEN_TYPE, REACT_LEGACY_HIDDEN_TYPE, REACT_CACHE_TYPE, getIteratorFn */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"REACT_ELEMENT_TYPE\", function() { return REACT_ELEMENT_TYPE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"REACT_PORTAL_TYPE\", function() { return REACT_PORTAL_TYPE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"REACT_FRAGMENT_TYPE\", function() { return REACT_FRAGMENT_TYPE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"REACT_STRICT_MODE_TYPE\", function() { return REACT_STRICT_MODE_TYPE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"REACT_PROFILER_TYPE\", function() { return REACT_PROFILER_TYPE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"REACT_PROVIDER_TYPE\", function() { return REACT_PROVIDER_TYPE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"REACT_CONTEXT_TYPE\", function() { return REACT_CONTEXT_TYPE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"REACT_FORWARD_REF_TYPE\", function() { return REACT_FORWARD_REF_TYPE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"REACT_SUSPENSE_TYPE\", function() { return REACT_SUSPENSE_TYPE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"REACT_SUSPENSE_LIST_TYPE\", function() { return REACT_SUSPENSE_LIST_TYPE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"REACT_MEMO_TYPE\", function() { return REACT_MEMO_TYPE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"REACT_LAZY_TYPE\", function() { return REACT_LAZY_TYPE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"REACT_SCOPE_TYPE\", function() { return REACT_SCOPE_TYPE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"REACT_DEBUG_TRACING_MODE_TYPE\", function() { return REACT_DEBUG_TRACING_MODE_TYPE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"REACT_OFFSCREEN_TYPE\", function() { return REACT_OFFSCREEN_TYPE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"REACT_LEGACY_HIDDEN_TYPE\", function() { return REACT_LEGACY_HIDDEN_TYPE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"REACT_CACHE_TYPE\", function() { return REACT_CACHE_TYPE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getIteratorFn\", function() { return getIteratorFn; });\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nlet REACT_ELEMENT_TYPE = 0xeac7;\nlet REACT_PORTAL_TYPE = 0xeaca;\nlet REACT_FRAGMENT_TYPE = 0xeacb;\nlet REACT_STRICT_MODE_TYPE = 0xeacc;\nlet REACT_PROFILER_TYPE = 0xead2;\nlet REACT_PROVIDER_TYPE = 0xeacd;\nlet REACT_CONTEXT_TYPE = 0xeace;\nlet REACT_FORWARD_REF_TYPE = 0xead0;\nlet REACT_SUSPENSE_TYPE = 0xead1;\nlet REACT_SUSPENSE_LIST_TYPE = 0xead8;\nlet REACT_MEMO_TYPE = 0xead3;\nlet REACT_LAZY_TYPE = 0xead4;\nlet REACT_SCOPE_TYPE = 0xead7;\nlet REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;\nlet REACT_OFFSCREEN_TYPE = 0xeae2;\nlet REACT_LEGACY_HIDDEN_TYPE = 0xeae3;\nlet REACT_CACHE_TYPE = 0xeae4;\n\nif (typeof Symbol === 'function' && Symbol.for) {\n  const symbolFor = Symbol.for;\n  REACT_ELEMENT_TYPE = symbolFor('react.element');\n  REACT_PORTAL_TYPE = symbolFor('react.portal');\n  REACT_FRAGMENT_TYPE = symbolFor('react.fragment');\n  REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');\n  REACT_PROFILER_TYPE = symbolFor('react.profiler');\n  REACT_PROVIDER_TYPE = symbolFor('react.provider');\n  REACT_CONTEXT_TYPE = symbolFor('react.context');\n  REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');\n  REACT_SUSPENSE_TYPE = symbolFor('react.suspense');\n  REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');\n  REACT_MEMO_TYPE = symbolFor('react.memo');\n  REACT_LAZY_TYPE = symbolFor('react.lazy');\n  REACT_SCOPE_TYPE = symbolFor('react.scope');\n  REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');\n  REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');\n  REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');\n  REACT_CACHE_TYPE = symbolFor('react.cache');\n}\n\nconst MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\nconst FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  const maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL1JlYWN0U3ltYm9scy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9zaGFyZWQvUmVhY3RTeW1ib2xzLmpzP2MwMjAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbi8vIEFUVEVOVElPTlxuLy8gV2hlbiBhZGRpbmcgbmV3IHN5bWJvbHMgdG8gdGhpcyBmaWxlLFxuLy8gUGxlYXNlIGNvbnNpZGVyIGFsc28gYWRkaW5nIHRvICdyZWFjdC1kZXZ0b29scy1zaGFyZWQvc3JjL2JhY2tlbmQvUmVhY3RTeW1ib2xzJ1xuXG4vLyBUaGUgU3ltYm9sIHVzZWQgdG8gdGFnIHRoZSBSZWFjdEVsZW1lbnQtbGlrZSB0eXBlcy4gSWYgdGhlcmUgaXMgbm8gbmF0aXZlIFN5bWJvbFxuLy8gbm9yIHBvbHlmaWxsLCB0aGVuIGEgcGxhaW4gbnVtYmVyIGlzIHVzZWQgZm9yIHBlcmZvcm1hbmNlLlxuZXhwb3J0IGxldCBSRUFDVF9FTEVNRU5UX1RZUEUgPSAweGVhYzc7XG5leHBvcnQgbGV0IFJFQUNUX1BPUlRBTF9UWVBFID0gMHhlYWNhO1xuZXhwb3J0IGxldCBSRUFDVF9GUkFHTUVOVF9UWVBFID0gMHhlYWNiO1xuZXhwb3J0IGxldCBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFID0gMHhlYWNjO1xuZXhwb3J0IGxldCBSRUFDVF9QUk9GSUxFUl9UWVBFID0gMHhlYWQyO1xuZXhwb3J0IGxldCBSRUFDVF9QUk9WSURFUl9UWVBFID0gMHhlYWNkO1xuZXhwb3J0IGxldCBSRUFDVF9DT05URVhUX1RZUEUgPSAweGVhY2U7XG5leHBvcnQgbGV0IFJFQUNUX0ZPUldBUkRfUkVGX1RZUEUgPSAweGVhZDA7XG5leHBvcnQgbGV0IFJFQUNUX1NVU1BFTlNFX1RZUEUgPSAweGVhZDE7XG5leHBvcnQgbGV0IFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRSA9IDB4ZWFkODtcbmV4cG9ydCBsZXQgUkVBQ1RfTUVNT19UWVBFID0gMHhlYWQzO1xuZXhwb3J0IGxldCBSRUFDVF9MQVpZX1RZUEUgPSAweGVhZDQ7XG5leHBvcnQgbGV0IFJFQUNUX1NDT1BFX1RZUEUgPSAweGVhZDc7XG5leHBvcnQgbGV0IFJFQUNUX0RFQlVHX1RSQUNJTkdfTU9ERV9UWVBFID0gMHhlYWUxO1xuZXhwb3J0IGxldCBSRUFDVF9PRkZTQ1JFRU5fVFlQRSA9IDB4ZWFlMjtcbmV4cG9ydCBsZXQgUkVBQ1RfTEVHQUNZX0hJRERFTl9UWVBFID0gMHhlYWUzO1xuZXhwb3J0IGxldCBSRUFDVF9DQUNIRV9UWVBFID0gMHhlYWU0O1xuXG5pZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuZm9yKSB7XG4gIGNvbnN0IHN5bWJvbEZvciA9IFN5bWJvbC5mb3I7XG4gIFJFQUNUX0VMRU1FTlRfVFlQRSA9IHN5bWJvbEZvcigncmVhY3QuZWxlbWVudCcpO1xuICBSRUFDVF9QT1JUQUxfVFlQRSA9IHN5bWJvbEZvcigncmVhY3QucG9ydGFsJyk7XG4gIFJFQUNUX0ZSQUdNRU5UX1RZUEUgPSBzeW1ib2xGb3IoJ3JlYWN0LmZyYWdtZW50Jyk7XG4gIFJFQUNUX1NUUklDVF9NT0RFX1RZUEUgPSBzeW1ib2xGb3IoJ3JlYWN0LnN0cmljdF9tb2RlJyk7XG4gIFJFQUNUX1BST0ZJTEVSX1RZUEUgPSBzeW1ib2xGb3IoJ3JlYWN0LnByb2ZpbGVyJyk7XG4gIFJFQUNUX1BST1ZJREVSX1RZUEUgPSBzeW1ib2xGb3IoJ3JlYWN0LnByb3ZpZGVyJyk7XG4gIFJFQUNUX0NPTlRFWFRfVFlQRSA9IHN5bWJvbEZvcigncmVhY3QuY29udGV4dCcpO1xuICBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5mb3J3YXJkX3JlZicpO1xuICBSRUFDVF9TVVNQRU5TRV9UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5zdXNwZW5zZScpO1xuICBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEUgPSBzeW1ib2xGb3IoJ3JlYWN0LnN1c3BlbnNlX2xpc3QnKTtcbiAgUkVBQ1RfTUVNT19UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5tZW1vJyk7XG4gIFJFQUNUX0xBWllfVFlQRSA9IHN5bWJvbEZvcigncmVhY3QubGF6eScpO1xuICBSRUFDVF9TQ09QRV9UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5zY29wZScpO1xuICBSRUFDVF9ERUJVR19UUkFDSU5HX01PREVfVFlQRSA9IHN5bWJvbEZvcigncmVhY3QuZGVidWdfdHJhY2VfbW9kZScpO1xuICBSRUFDVF9PRkZTQ1JFRU5fVFlQRSA9IHN5bWJvbEZvcigncmVhY3Qub2Zmc2NyZWVuJyk7XG4gIFJFQUNUX0xFR0FDWV9ISURERU5fVFlQRSA9IHN5bWJvbEZvcigncmVhY3QubGVnYWN5X2hpZGRlbicpO1xuICBSRUFDVF9DQUNIRV9UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5jYWNoZScpO1xufVxuXG5jb25zdCBNQVlCRV9JVEVSQVRPUl9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5pdGVyYXRvcjtcbmNvbnN0IEZBVVhfSVRFUkFUT1JfU1lNQk9MID0gJ0BAaXRlcmF0b3InO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SXRlcmF0b3JGbihtYXliZUl0ZXJhYmxlOiA/YW55KTogPygpID0+ID9JdGVyYXRvcjwqPiB7XG4gIGlmIChtYXliZUl0ZXJhYmxlID09PSBudWxsIHx8IHR5cGVvZiBtYXliZUl0ZXJhYmxlICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGNvbnN0IG1heWJlSXRlcmF0b3IgPVxuICAgIChNQVlCRV9JVEVSQVRPUl9TWU1CT0wgJiYgbWF5YmVJdGVyYWJsZVtNQVlCRV9JVEVSQVRPUl9TWU1CT0xdKSB8fFxuICAgIG1heWJlSXRlcmFibGVbRkFVWF9JVEVSQVRPUl9TWU1CT0xdO1xuICBpZiAodHlwZW9mIG1heWJlSXRlcmF0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gbWF5YmVJdGVyYXRvcjtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7Ozs7QUFTQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../shared/ReactSymbols.js\n");

/***/ }),

/***/ "../shared/hasOwnProperty.js":
/*!***********************************!*\
  !*** ../shared/hasOwnProperty.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n/* harmony default export */ __webpack_exports__[\"default\"] = (hasOwnProperty);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL2hhc093blByb3BlcnR5LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL3NoYXJlZC9oYXNPd25Qcm9wZXJ0eS5qcz9iYmM1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG5jb25zdCBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbmV4cG9ydCBkZWZhdWx0IGhhc093blByb3BlcnR5O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBOzs7Ozs7OztBQVNBO0FBRUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../shared/hasOwnProperty.js\n");

/***/ }),

/***/ "../shared/isArray.js":
/*!****************************!*\
  !*** ../shared/isArray.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nconst isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (isArray);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL2lzQXJyYXkuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vc2hhcmVkL2lzQXJyYXkuanM/ZDkzYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKi9cblxuZGVjbGFyZSBmdW5jdGlvbiBpc0FycmF5KGE6IG1peGVkKTogYm9vbGVhbiAlY2hlY2tzKEFycmF5LmlzQXJyYXkoYSkpO1xuXG5jb25zdCBpc0FycmF5SW1wbCA9IEFycmF5LmlzQXJyYXk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZWRlY2xhcmVcbmZ1bmN0aW9uIGlzQXJyYXkoYTogbWl4ZWQpOiBib29sZWFuIHtcbiAgcmV0dXJuIGlzQXJyYXlJbXBsKGEpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0FycmF5O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBOzs7Ozs7OztBQVdBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../shared/isArray.js\n");

/***/ }),

/***/ "../shared/objectIs.js":
/*!*****************************!*\
  !*** ../shared/objectIs.js ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x, y) {\n  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare\n  ;\n}\n\nconst objectIs = typeof Object.is === 'function' ? Object.is : is;\n/* harmony default export */ __webpack_exports__[\"default\"] = (objectIs);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL29iamVjdElzLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL3NoYXJlZC9vYmplY3RJcy5qcz9kMWNiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG4vKipcbiAqIGlubGluZWQgT2JqZWN0LmlzIHBvbHlmaWxsIHRvIGF2b2lkIHJlcXVpcmluZyBjb25zdW1lcnMgc2hpcCB0aGVpciBvd25cbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9pc1xuICovXG5mdW5jdGlvbiBpcyh4OiBhbnksIHk6IGFueSkge1xuICByZXR1cm4gKFxuICAgICh4ID09PSB5ICYmICh4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geSkpIHx8ICh4ICE9PSB4ICYmIHkgIT09IHkpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICk7XG59XG5cbmNvbnN0IG9iamVjdElzOiAoeDogYW55LCB5OiBhbnkpID0+IGJvb2xlYW4gPVxuICB0eXBlb2YgT2JqZWN0LmlzID09PSAnZnVuY3Rpb24nID8gT2JqZWN0LmlzIDogaXM7XG5cbmV4cG9ydCBkZWZhdWx0IG9iamVjdElzO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBOzs7Ozs7Ozs7QUFTQTs7OztBQUlBO0FBQ0E7QUFBQTtBQUdBO0FBQ0E7QUFDQTtBQUdBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../shared/objectIs.js\n");

/***/ }),

/***/ "./src/renderer.js":
/*!*************************!*\
  !*** ./src/renderer.js ***!
  \*************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_devtools_shared_src_backend_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-devtools-shared/src/backend/renderer */ \"../react-devtools-shared/src/backend/renderer.js\");\n/**\n * In order to support reload-and-profile functionality, the renderer needs to be injected before any other scripts.\n * Since it is a complex file (with imports) we can't just toString() it like we do with the hook itself,\n * So this entry point (one of the web_accessible_resources) provides a way to eagerly inject it.\n * The hook will look for the presence of a global __REACT_DEVTOOLS_ATTACH__ and attach an injected renderer early.\n * The normal case (not a reload-and-profile) will not make use of this entry point though.\n *\n * \n */\n\nObject.defineProperty(window, '__REACT_DEVTOOLS_ATTACH__', {\n  enumerable: false,\n  // This property needs to be configurable to allow third-party integrations\n  // to attach their own renderer. Note that using third-party integrations\n  // is not officially supported. Use at your own risk.\n  configurable: true,\n\n  get() {\n    return react_devtools_shared_src_backend_renderer__WEBPACK_IMPORTED_MODULE_0__[\"attach\"];\n  }\n\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcmVuZGVyZXIuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcmVuZGVyZXIuanM/ODhjMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEluIG9yZGVyIHRvIHN1cHBvcnQgcmVsb2FkLWFuZC1wcm9maWxlIGZ1bmN0aW9uYWxpdHksIHRoZSByZW5kZXJlciBuZWVkcyB0byBiZSBpbmplY3RlZCBiZWZvcmUgYW55IG90aGVyIHNjcmlwdHMuXG4gKiBTaW5jZSBpdCBpcyBhIGNvbXBsZXggZmlsZSAod2l0aCBpbXBvcnRzKSB3ZSBjYW4ndCBqdXN0IHRvU3RyaW5nKCkgaXQgbGlrZSB3ZSBkbyB3aXRoIHRoZSBob29rIGl0c2VsZixcbiAqIFNvIHRoaXMgZW50cnkgcG9pbnQgKG9uZSBvZiB0aGUgd2ViX2FjY2Vzc2libGVfcmVzb3VyY2VzKSBwcm92aWRlcyBhIHdheSB0byBlYWdlcmx5IGluamVjdCBpdC5cbiAqIFRoZSBob29rIHdpbGwgbG9vayBmb3IgdGhlIHByZXNlbmNlIG9mIGEgZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfQVRUQUNIX18gYW5kIGF0dGFjaCBhbiBpbmplY3RlZCByZW5kZXJlciBlYXJseS5cbiAqIFRoZSBub3JtYWwgY2FzZSAobm90IGEgcmVsb2FkLWFuZC1wcm9maWxlKSB3aWxsIG5vdCBtYWtlIHVzZSBvZiB0aGlzIGVudHJ5IHBvaW50IHRob3VnaC5cbiAqXG4gKiBAZmxvd1xuICovXG5cbmltcG9ydCB7YXR0YWNofSBmcm9tICdyZWFjdC1kZXZ0b29scy1zaGFyZWQvc3JjL2JhY2tlbmQvcmVuZGVyZXInO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoXG4gIHdpbmRvdyxcbiAgJ19fUkVBQ1RfREVWVE9PTFNfQVRUQUNIX18nLFxuICAoe1xuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIC8vIFRoaXMgcHJvcGVydHkgbmVlZHMgdG8gYmUgY29uZmlndXJhYmxlIHRvIGFsbG93IHRoaXJkLXBhcnR5IGludGVncmF0aW9uc1xuICAgIC8vIHRvIGF0dGFjaCB0aGVpciBvd24gcmVuZGVyZXIuIE5vdGUgdGhhdCB1c2luZyB0aGlyZC1wYXJ0eSBpbnRlZ3JhdGlvbnNcbiAgICAvLyBpcyBub3Qgb2ZmaWNpYWxseSBzdXBwb3J0ZWQuIFVzZSBhdCB5b3VyIG93biByaXNrLlxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQoKSB7XG4gICAgICByZXR1cm4gYXR0YWNoO1xuICAgIH0sXG4gIH06IE9iamVjdCksXG4pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7Ozs7Ozs7OztBQVVBO0FBRUE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQVRBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/renderer.js\n");

/***/ })

/******/ });